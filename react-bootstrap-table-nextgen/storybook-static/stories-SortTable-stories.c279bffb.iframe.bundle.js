"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[989],{"./src/stories/SortTable.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomClassesOnSortingHeaderColumn:()=>CustomClassesOnSortingHeaderColumn,CustomSortCaret:()=>CustomSortCaret,CustomSortFunction:()=>CustomSortFunction,CustomSortValue:()=>SortTable_stories_CustomSortValue,CustomStyleOnSortingHeaderColumn:()=>CustomStyleOnSortingHeaderColumn,DefaultSortDirectionTable:()=>DefaultSortDirectionTable,DefaultSortTable:()=>DefaultSortTable,EnableSort:()=>EnableSort,OnetimeSortConfiguration:()=>OnetimeSortConfiguration,SortEvents:()=>SortEvents,SortManagement:()=>SortTable_stories_SortManagement,__namedExportsOrder:()=>__namedExportsOrder,default:()=>SortTable_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),react=__webpack_require__("./node_modules/react/index.js"),common=__webpack_require__("./src/utils/common.ts"),classCallCheck=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),createClass=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createClass.js"),inherits=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/inherits.js"),createSuper=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createSuper.js"),lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),SortManagement=function(_Component){(0,inherits.Z)(SortManagement,_Component);var _super=(0,createSuper.Z)(SortManagement);function SortManagement(props){var _this;return(0,classCallCheck.Z)(this,SortManagement),(_this=_super.call(this,props)).handleSort=function(field,order){_this.setState({field,order})},_this.handleSortById=function(){_this.setState({field:"id",order:"desc"})},_this.state={field:null,order:null},_this}return(0,createClass.Z)(SortManagement,[{key:"render",value:function render(){var columns=[{dataField:"id",text:"Product ID",sort:!0,onSort:this.handleSort},{dataField:"name",text:"Product Name",sort:!0,onSort:this.handleSort},{dataField:"price",text:"Product Price"}],data=(0,common.bG)();return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{className:"btn btn-danger",onClick:this.handleSortById,children:"Sort By ID"}),(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,sort:{dataField:this.state.field,order:this.state.order}}),(0,jsx_runtime.jsx)(code_block.Z,{children:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    class SortManagement extends React.Component {\n      state = {\n        field: null,\n        order: null\n      }\n\n      handleSort = (field, order) => {\n        this.setState({\n          field,\n          order\n        });\n      }\n\n      handleSortById = () => {\n        this.setState({\n          field: 'id',\n          order: 'desc'\n        });\n      }\n\n      render() {\n        const columns = [{\n          dataField: 'id',\n          text: 'Product ID',\n          sort: true,\n          onSort: this.handleSort\n        }, {\n          dataField: 'name',\n          text: 'Product Name',\n          sort: true,\n          onSort: this.handleSort\n        }, {\n          dataField: 'price',\n          text: 'Product Price'\n        }];\n        return (\n          <div>\n            <button className=\"btn btn-danger\" onClick={ this.handleSortById }>Sort By ID</button>\n            <BootstrapTable\n              keyField=\"id\"\n              data={ products }\n              columns={ columns }\n              sort={ {\n                dataField: this.state.field,\n                order: this.state.order\n              } }\n            />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    "})]})}}]),SortManagement}(react.Component),CustomSortValue=function(_Component2){(0,inherits.Z)(CustomSortValue,_Component2);var _super2=(0,createSuper.Z)(CustomSortValue);function CustomSortValue(props){var _this2;return(0,classCallCheck.Z)(this,CustomSortValue),(_this2=_super2.call(this,props)).handleClick=function(){_this2.setState((function(){return{data:(0,common.A9)(21)}}))},_this2.state={data:(0,common.A9)(8)},_this2}return(0,createClass.Z)(CustomSortValue,[{key:"render",value:function render(){var types=["Cloud Service","Message Service","Add Service","Edit Service","Money"],columns=[{dataField:"id",text:"Job ID"},{dataField:"name",text:"Job Name"},{dataField:"owner",text:"Job Owner"},{dataField:"type",text:"Job Type",sort:!0,formatter:function formatter(cell,row){return types[cell]},sortValue:function sortValue(cell,row){return types[cell]}}];return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:this.handleClick,children:"Change Data"}),(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data:this.state.data,columns}),(0,jsx_runtime.jsx)(code_block.Z,{children:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const types = ['Cloud Service', 'Message Service', 'Add Service', 'Edit Service', 'Money'];\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      sort: true,\n      formatter: (cell, row) => types[cell],\n      sortValue: (cell, row) => types[cell]\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "})]})}}]),CustomSortValue}(react.Component);try{SortTable.displayName="SortTable",SortTable.__docgenInfo={description:"",displayName:"SortTable",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},defaultSorted:{defaultValue:null,description:"",name:"defaultSorted",required:!0,type:{name:"any"}},defaultSortDirection:{defaultValue:null,description:"",name:"defaultSortDirection",required:!0,type:{name:"any"}},sort:{defaultValue:null,description:"",name:"sort",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/SortTable.tsx#SortTable"]={docgenInfo:SortTable.__docgenInfo,name:"SortTable",path:"src/stories/SortTable.tsx#SortTable"})}catch(__react_docgen_typescript_loader_error){}var _EnableSort$parameter,_EnableSort$parameter2,_EnableSort$parameter3,_DefaultSortTable$par,_DefaultSortTable$par2,_DefaultSortTable$par3,_DefaultSortDirection,_DefaultSortDirection2,_DefaultSortDirection3,_SortEvents$parameter,_SortEvents$parameter2,_SortEvents$parameter3,_SortManagement$param,_SortManagement$param2,_SortManagement$param3,_OnetimeSortConfigura,_OnetimeSortConfigura2,_OnetimeSortConfigura3,_CustomSortValue$para,_CustomSortValue$para2,_CustomSortValue$para3,_CustomSortFunction$p,_CustomSortFunction$p2,_CustomSortFunction$p3,_CustomSortCaret$para,_CustomSortCaret$para2,_CustomSortCaret$para3,_CustomClassesOnSorti,_CustomClassesOnSorti2,_CustomClassesOnSorti3,_CustomStyleOnSorting,_CustomStyleOnSorting2,_CustomStyleOnSorting3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const SortTable_stories={title:"Sort Table",component:function(_ref){var mode=_ref.mode,header=_ref.header,data=_ref.data,columns=_ref.columns,sourceCode=_ref.sourceCode,defaultSorted=_ref.defaultSorted,defaultSortDirection=_ref.defaultSortDirection,sort=_ref.sort;switch(mode){case"management":return(0,jsx_runtime.jsx)(SortManagement,{});case"configuration":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h3",{children:"Reverse Sorting Table"}),(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,sort}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"custom":return(0,jsx_runtime.jsx)(CustomSortValue,{});default:return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,defaultSorted,defaultSortDirection,sort}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var EnableSort={name:"Enable sort",args:{columns:[{dataField:"id",text:"Product ID",sort:!0},{dataField:"name",text:"Product Name",sort:!0},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(21),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},DefaultSortTable={name:"Default sort table",args:{columns:[{dataField:"id",text:"Product ID",sort:!0},{dataField:"name",text:"Product Name",sort:!0},{dataField:"price",text:"Product Price",sort:!0}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true\n    }];\n\n    const defaultSorted = [{\n      dataField: 'name',\n      order: 'desc'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      defaultSorted={ defaultSorted }\n    />\n    ",defaultSorted:[{dataField:"name",order:"desc"}]}},DefaultSortDirectionTable={name:"Default sort table",args:{columns:[{dataField:"id",text:"Product ID",sort:!0},{dataField:"name",text:"Product Name",sort:!0},{dataField:"price",text:"Product Price",sort:!0}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true\n    }];\n\n    const defaultSorted = [{\n      dataField: 'name',\n      order: 'desc'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      defaultSortDirection=\"asc\"\n    />\n    ",defaultSortDirection:"asc"}},SortEvents={name:"Sort events",args:{columns:[{dataField:"id",text:"Product ID",sort:!0},{dataField:"name",text:"Product Name",sort:!0,onSort:function onSort(field,order){console.log("Sort Field: ".concat(field,", Sort Order: ").concat(order))}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      onSort: (field, order) => {\n        console.log(....);\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    ",defaultSorted:[{dataField:"name",order:"desc"}]}},SortTable_stories_SortManagement={name:"Sort management",args:{mode:"management"}},OnetimeSortConfiguration={name:"One-time sort configuration",args:{mode:"configuration",columns:[{dataField:"id",text:"Product ID",sort:!0},{dataField:"name",text:"Product Name",sort:!0},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    class OnetimeSortConfiguration extends React.Component {\n      sortFunc = (a: any, b: any, order: string, dataField: any) => {\n        if (order === 'desc') {\n          if (typeof b === 'string' && typeof a === 'string') {\n            return b.localeCompare(a);\n          } else {\n            return b - a;\n          }\n        } else {\n          if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b);\n          } else {\n            return a - b;\n          }\n        }\n      }\n\n      render() {\n        const sortOption = {\n          // No need to configure sortFunc per column\n          sortFunc: this.sortFunc,\n          // No need to configure sortCaret per column\n          sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;Desc/Asc</span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;Desc/<p style={{color: \"red\"}}>Asc</p></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<p style={{color: \"red\"}}>Desc</p>/Asc</span>);\n            return null;\n          }\n        };\n\n        return (\n          <div>\n            <button className=\"btn btn-default\" onClick={ this.handleClick }>Change Data</button>\n            <BootstrapTable keyField=\"id\" data={ products } columns={ columns } sort={ sortOption } />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    ",sort:{sortFunc:function sortFunc(a,b,order,dataField){return"desc"===order?"string"==typeof b&&"string"==typeof a?b.localeCompare(a):b-a:"string"==typeof a&&"string"==typeof b?a.localeCompare(b):a-b},sortCaret:function sortCaret(order,column){return order?"asc"===order?(0,jsx_runtime.jsxs)("span",{children:["  Desc/",(0,jsx_runtime.jsx)("span",{style:{color:"red"},children:"Asc"})]}):"desc"===order?(0,jsx_runtime.jsxs)("span",{children:["  ",(0,jsx_runtime.jsx)("span",{style:{color:"red"},children:"Desc"}),"/Asc"]}):null:(0,jsx_runtime.jsx)("span",{children:"  Desc/Asc"})}}}},SortTable_stories_CustomSortValue={name:"Custom sort value",args:{mode:"custom"}},CustomSortFunction={name:"Custom sort function",args:{columns:[{dataField:"id",text:"Product ID",sort:!0,sortFunc:function sortFunc(a,b,order,dataField){return"desc"===order?"string"==typeof b&&"string"==typeof a?b.localeCompare(a):b-a:"string"==typeof a&&"string"==typeof b?a.localeCompare(b):a-b}},{dataField:"name",text:"Product Name",sort:!0},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      // here, we implement a custom sort which perform a reverse sorting\n      sortFunc: (a: any, b: any, order: string, dataField: any) => {\n        if (order === 'desc') {\n          if (typeof b === 'string' && typeof a === 'string') {\n            return b.localeCompare(a);\n          } else {\n            return b - a;\n          }\n        } else {\n          if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b);\n          } else {\n            return a - b;\n          }\n        }\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Product ID sorting is reverted"})}},CustomSortCaret={name:"Custom sort caret",args:{columns:[{dataField:"id",text:"Product ID",sort:!0},{dataField:"name",text:"Product Name",sort:!0,sortCaret:function sortCaret(order,column){return order?"asc"===order?(0,jsx_runtime.jsxs)("span",{children:["  Desc/",(0,jsx_runtime.jsx)("span",{style:{color:"red"},children:"Asc"})]}):"desc"===order?(0,jsx_runtime.jsxs)("span",{children:["  ",(0,jsx_runtime.jsx)("span",{style:{color:"red"},children:"Desc"}),"/Asc"]}):null:(0,jsx_runtime.jsx)("span",{children:"  Desc/Asc"})}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      sortCaret: (order: string, column: any) => {\n        if (!order) return (<span>&nbsp;&nbsp;Desc/Asc</span>);\n        else if (order === 'asc') return (<span>&nbsp;&nbsp;Desc/<span style={{color: \"red\"}}>Asc</span></span>);\n        else if (order === 'desc') return (<span>&nbsp;&nbsp;<span style={{color: \"red\"}}>Desc</span>/Asc</span>);\n        return null;\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},headerSortingClasses=function headerSortingClasses(column,sortOrder,isLastSorting,colIndex){return"asc"===sortOrder?"demo-sorting-asc":"demo-sorting-desc"},CustomClassesOnSortingHeaderColumn={name:"Custom classes on sorting header column",args:{columns:[{dataField:"id",text:"Product ID",sort:!0,headerSortingClasses},{dataField:"name",text:"Product Name",sort:!0,headerSortingClasses},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const headerSortingClasses = (column, sortOrder, isLastSorting, colIndex) => (\n      sortOrder === 'asc' ? 'demo-sorting-asc' : 'demo-sorting-desc'\n    );\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      headerSortingClasses\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      headerSortingClasses\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField=\"id\" data={ products } columns={ columns } />\n    "}},headerSortingStyle={backgroundColor:"#c8e6c9"},CustomStyleOnSortingHeaderColumn={name:"Custom style on sorting header column",args:{columns:[{dataField:"id",text:"Product ID",sort:!0,headerSortingStyle},{dataField:"name",text:"Product Name",sort:!0,headerSortingStyle},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const headerSortingStyle = { backgroundColor: '#c8e6c9' };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      headerSortingStyle\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      headerSortingStyle\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField=\"id\" data={ products } columns={ columns } />\n    "}};EnableSort.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},EnableSort.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_EnableSort$parameter=EnableSort.parameters)||void 0===_EnableSort$parameter?void 0:_EnableSort$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Enable sort\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(21),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_EnableSort$parameter2=EnableSort.parameters)||void 0===_EnableSort$parameter2||null===(_EnableSort$parameter3=_EnableSort$parameter2.docs)||void 0===_EnableSort$parameter3?void 0:_EnableSort$parameter3.source)})}),DefaultSortTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DefaultSortTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DefaultSortTable$par=DefaultSortTable.parameters)||void 0===_DefaultSortTable$par?void 0:_DefaultSortTable$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Default sort table\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true\n    }];\n\n    const defaultSorted = [{\n      dataField: 'name',\n      order: 'desc'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      defaultSorted={ defaultSorted }\n    />\n    `,\n    defaultSorted: [{\n      dataField: 'name',\n      order: 'desc'\n    }]\n  }\n}"},null===(_DefaultSortTable$par2=DefaultSortTable.parameters)||void 0===_DefaultSortTable$par2||null===(_DefaultSortTable$par3=_DefaultSortTable$par2.docs)||void 0===_DefaultSortTable$par3?void 0:_DefaultSortTable$par3.source)})}),DefaultSortDirectionTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DefaultSortDirectionTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DefaultSortDirection=DefaultSortDirectionTable.parameters)||void 0===_DefaultSortDirection?void 0:_DefaultSortDirection.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Default sort table\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true\n    }];\n\n    const defaultSorted = [{\n      dataField: 'name',\n      order: 'desc'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      defaultSortDirection=\"asc\"\n    />\n    `,\n    defaultSortDirection: \"asc\"\n  }\n}"},null===(_DefaultSortDirection2=DefaultSortDirectionTable.parameters)||void 0===_DefaultSortDirection2||null===(_DefaultSortDirection3=_DefaultSortDirection2.docs)||void 0===_DefaultSortDirection3?void 0:_DefaultSortDirection3.source)})}),SortEvents.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SortEvents.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SortEvents$parameter=SortEvents.parameters)||void 0===_SortEvents$parameter?void 0:_SortEvents$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Sort events\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      onSort: (field: any, order: any) => {\n        console.log(`Sort Field: ${field}, Sort Order: ${order}`);\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      onSort: (field, order) => {\n        console.log(....);\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `,\n    defaultSorted: [{\n      dataField: 'name',\n      order: 'desc'\n    }]\n  }\n}"},null===(_SortEvents$parameter2=SortEvents.parameters)||void 0===_SortEvents$parameter2||null===(_SortEvents$parameter3=_SortEvents$parameter2.docs)||void 0===_SortEvents$parameter3?void 0:_SortEvents$parameter3.source)})}),SortTable_stories_SortManagement.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SortTable_stories_SortManagement.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SortManagement$param=SortTable_stories_SortManagement.parameters)||void 0===_SortManagement$param?void 0:_SortManagement$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Sort management",\n  args: {\n    mode: "management"\n  }\n}'},null===(_SortManagement$param2=SortTable_stories_SortManagement.parameters)||void 0===_SortManagement$param2||null===(_SortManagement$param3=_SortManagement$param2.docs)||void 0===_SortManagement$param3?void 0:_SortManagement$param3.source)})}),OnetimeSortConfiguration.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},OnetimeSortConfiguration.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_OnetimeSortConfigura=OnetimeSortConfiguration.parameters)||void 0===_OnetimeSortConfigura?void 0:_OnetimeSortConfigura.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"One-time sort configuration\",\n  args: {\n    mode: \"configuration\",\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    class OnetimeSortConfiguration extends React.Component {\n      sortFunc = (a: any, b: any, order: string, dataField: any) => {\n        if (order === 'desc') {\n          if (typeof b === 'string' && typeof a === 'string') {\n            return b.localeCompare(a);\n          } else {\n            return b - a;\n          }\n        } else {\n          if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b);\n          } else {\n            return a - b;\n          }\n        }\n      }\n\n      render() {\n        const sortOption = {\n          // No need to configure sortFunc per column\n          sortFunc: this.sortFunc,\n          // No need to configure sortCaret per column\n          sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;Desc/Asc</span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;Desc/<p style={{color: \"red\"}}>Asc</p></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<p style={{color: \"red\"}}>Desc</p>/Asc</span>);\n            return null;\n          }\n        };\n\n        return (\n          <div>\n            <button className=\"btn btn-default\" onClick={ this.handleClick }>Change Data</button>\n            <BootstrapTable keyField=\"id\" data={ products } columns={ columns } sort={ sortOption } />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    `,\n    sort: {\n      sortFunc: sortFunc,\n      sortCaret: (order: string, column: any) => {\n        if (!order) return <span>&nbsp;&nbsp;Desc/Asc</span>;else if (order === 'asc') return <span>&nbsp;&nbsp;Desc/<span style={{\n            color: \"red\"\n          }}>Asc</span></span>;else if (order === 'desc') return <span>&nbsp;&nbsp;<span style={{\n            color: \"red\"\n          }}>Desc</span>/Asc</span>;\n        return null;\n      }\n    }\n  }\n}"},null===(_OnetimeSortConfigura2=OnetimeSortConfiguration.parameters)||void 0===_OnetimeSortConfigura2||null===(_OnetimeSortConfigura3=_OnetimeSortConfigura2.docs)||void 0===_OnetimeSortConfigura3?void 0:_OnetimeSortConfigura3.source)})}),SortTable_stories_CustomSortValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SortTable_stories_CustomSortValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomSortValue$para=SortTable_stories_CustomSortValue.parameters)||void 0===_CustomSortValue$para?void 0:_CustomSortValue$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Custom sort value",\n  args: {\n    mode: "custom"\n  }\n}'},null===(_CustomSortValue$para2=SortTable_stories_CustomSortValue.parameters)||void 0===_CustomSortValue$para2||null===(_CustomSortValue$para3=_CustomSortValue$para2.docs)||void 0===_CustomSortValue$para3?void 0:_CustomSortValue$para3.source)})}),CustomSortFunction.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomSortFunction.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomSortFunction$p=CustomSortFunction.parameters)||void 0===_CustomSortFunction$p?void 0:_CustomSortFunction$p.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom sort function\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      // here, we implement a custom sort which perform a reverse sorting\n      sortFunc: (a: any, b: any, order: string, dataField: any) => {\n        if (order === 'desc') {\n          if (typeof b === 'string' && typeof a === 'string') {\n            return b.localeCompare(a);\n          } else {\n            return b - a;\n          }\n        } else {\n          if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b);\n          } else {\n            return a - b;\n          }\n        }\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      // here, we implement a custom sort which perform a reverse sorting\n      sortFunc: (a: any, b: any, order: string, dataField: any) => {\n        if (order === 'desc') {\n          if (typeof b === 'string' && typeof a === 'string') {\n            return b.localeCompare(a);\n          } else {\n            return b - a;\n          }\n        } else {\n          if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b);\n          } else {\n            return a - b;\n          }\n        }\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `,\n    header: <h3>Product ID sorting is reverted</h3>\n  }\n}"},null===(_CustomSortFunction$p2=CustomSortFunction.parameters)||void 0===_CustomSortFunction$p2||null===(_CustomSortFunction$p3=_CustomSortFunction$p2.docs)||void 0===_CustomSortFunction$p3?void 0:_CustomSortFunction$p3.source)})}),CustomSortCaret.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomSortCaret.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomSortCaret$para=CustomSortCaret.parameters)||void 0===_CustomSortCaret$para?void 0:_CustomSortCaret$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom sort caret\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      sortCaret: (order: string, column: any) => {\n        if (!order) return <span>&nbsp;&nbsp;Desc/Asc</span>;else if (order === 'asc') return <span>&nbsp;&nbsp;Desc/<span style={{\n            color: \"red\"\n          }}>Asc</span></span>;else if (order === 'desc') return <span>&nbsp;&nbsp;<span style={{\n            color: \"red\"\n          }}>Desc</span>/Asc</span>;\n        return null;\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      sortCaret: (order: string, column: any) => {\n        if (!order) return (<span>&nbsp;&nbsp;Desc/Asc</span>);\n        else if (order === 'asc') return (<span>&nbsp;&nbsp;Desc/<span style={{color: \"red\"}}>Asc</span></span>);\n        else if (order === 'desc') return (<span>&nbsp;&nbsp;<span style={{color: \"red\"}}>Desc</span>/Asc</span>);\n        return null;\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomSortCaret$para2=CustomSortCaret.parameters)||void 0===_CustomSortCaret$para2||null===(_CustomSortCaret$para3=_CustomSortCaret$para2.docs)||void 0===_CustomSortCaret$para3?void 0:_CustomSortCaret$para3.source)})}),CustomClassesOnSortingHeaderColumn.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomClassesOnSortingHeaderColumn.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomClassesOnSorti=CustomClassesOnSortingHeaderColumn.parameters)||void 0===_CustomClassesOnSorti?void 0:_CustomClassesOnSorti.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom classes on sorting header column\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      headerSortingClasses\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      headerSortingClasses\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const headerSortingClasses = (column, sortOrder, isLastSorting, colIndex) => (\n      sortOrder === 'asc' ? 'demo-sorting-asc' : 'demo-sorting-desc'\n    );\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      headerSortingClasses\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      headerSortingClasses\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField=\"id\" data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomClassesOnSorti2=CustomClassesOnSortingHeaderColumn.parameters)||void 0===_CustomClassesOnSorti2||null===(_CustomClassesOnSorti3=_CustomClassesOnSorti2.docs)||void 0===_CustomClassesOnSorti3?void 0:_CustomClassesOnSorti3.source)})}),CustomStyleOnSortingHeaderColumn.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomStyleOnSortingHeaderColumn.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomStyleOnSorting=CustomStyleOnSortingHeaderColumn.parameters)||void 0===_CustomStyleOnSorting?void 0:_CustomStyleOnSorting.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom style on sorting header column\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      headerSortingStyle\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      headerSortingStyle\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const headerSortingStyle = { backgroundColor: '#c8e6c9' };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true,\n      headerSortingStyle\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      headerSortingStyle\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField=\"id\" data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomStyleOnSorting2=CustomStyleOnSortingHeaderColumn.parameters)||void 0===_CustomStyleOnSorting2||null===(_CustomStyleOnSorting3=_CustomStyleOnSorting2.docs)||void 0===_CustomStyleOnSorting3?void 0:_CustomStyleOnSorting3.source)})});var __namedExportsOrder=["EnableSort","DefaultSortTable","DefaultSortDirectionTable","SortEvents","SortManagement","OnetimeSortConfiguration","CustomSortValue","CustomSortFunction","CustomSortCaret","CustomClassesOnSortingHeaderColumn","CustomStyleOnSortingHeaderColumn"]}}]);