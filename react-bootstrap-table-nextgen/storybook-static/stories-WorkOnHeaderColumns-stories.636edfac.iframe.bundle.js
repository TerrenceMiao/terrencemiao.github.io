"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[117],{"./src/stories/WorkOnHeaderColumns.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ColumnAlign:()=>ColumnAlign,ColumnEvent:()=>ColumnEvent,ColumnFormatter:()=>ColumnFormatter,ColumnFormatterWithFilterAndSort:()=>ColumnFormatterWithFilterAndSort,ColumnTitle:()=>ColumnTitle,CustomizeColumnClass:()=>CustomizeColumnClass,CustomizeColumnHTMLAttribute:()=>CustomizeColumnHTMLAttribute,CustomizeColumnStyle:()=>CustomizeColumnStyle,HeaderClass:()=>HeaderClass,__namedExportsOrder:()=>__namedExportsOrder,default:()=>WorkOnHeaderColumns_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),lib=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("../react-bootstrap-table-nextgen-filter/lib/index.js")),common=__webpack_require__("./src/utils/common.ts"),react_bootstrap_table_nextgen_lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js"));try{WorkOnHeaderColumns.displayName="WorkOnHeaderColumns",WorkOnHeaderColumns.__docgenInfo={description:"",displayName:"WorkOnHeaderColumns",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},filter:{defaultValue:null,description:"",name:"filter",required:!0,type:{name:"any"}},defaultSorted:{defaultValue:null,description:"",name:"defaultSorted",required:!0,type:{name:"any"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"any"}},headerClasses:{defaultValue:null,description:"",name:"headerClasses",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/WorkOnHeaderColumns.tsx#WorkOnHeaderColumns"]={docgenInfo:WorkOnHeaderColumns.__docgenInfo,name:"WorkOnHeaderColumns",path:"src/stories/WorkOnHeaderColumns.tsx#WorkOnHeaderColumns"})}catch(__react_docgen_typescript_loader_error){}var _ColumnFormatter$para,_ColumnFormatter$para2,_ColumnFormatter$para3,_ColumnFormatterWithF,_ColumnFormatterWithF2,_ColumnFormatterWithF3,_ColumnAlign$paramete,_ColumnAlign$paramete2,_ColumnAlign$paramete3,_ColumnTitle$paramete,_ColumnTitle$paramete2,_ColumnTitle$paramete3,_ColumnEvent$paramete,_ColumnEvent$paramete2,_ColumnEvent$paramete3,_CustomizeColumnClass,_CustomizeColumnClass2,_CustomizeColumnClass3,_CustomizeColumnStyle,_CustomizeColumnStyle2,_CustomizeColumnStyle3,_CustomizeColumnHTMLA,_CustomizeColumnHTMLA2,_CustomizeColumnHTMLA3,_HeaderClass$paramete,_HeaderClass$paramete2,_HeaderClass$paramete3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const WorkOnHeaderColumns_stories={title:"Work On Header Columns",component:function(_ref){var data=_ref.data,columns=_ref.columns,sourceCode=_ref.sourceCode,filter=_ref.filter,defaultSorted=_ref.defaultSorted,header=_ref.header,headerClasses=_ref.headerClasses;return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns,filter,defaultSorted,headerClasses}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var ColumnFormatter={name:"Column formatter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",headerFormatter:function priceFormatter(column,colIndex){return(0,jsx_runtime.jsx)("h5",{children:(0,jsx_runtime.jsxs)("strong",{children:["$$ ",column.text," $$"]})})}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function priceFormatter(column, colIndex) {\n      return (\n        <h5><strong>$$ { column.text } $$</strong></h5>\n      );\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerFormatter: priceFormatter\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    "}};var ColumnFormatterWithFilterAndSort={name:"Column formatter with filter and sort",args:{columns:[{dataField:"id",text:"Product ID",sort:!0},{dataField:"name",text:"Product Name",sort:!0},{dataField:"price",text:"Product Price",sort:!0,filter:(0,lib.textFilter)(),headerFormatter:function priceFormatterWithFilterAndSort(column,colIndex,_ref){var sortElement=_ref.sortElement,filterElement=_ref.filterElement;return(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column"},children:[filterElement,column.text,sortElement]})}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n    // ...\n    function priceFormatter(column, colIndex, { sortElement, filterElement }) {\n      return (\n        <div style={ { display: 'flex', flexDirection: 'column' } }>\n          { filterElement }\n          { column.text }\n          { sortElement }\n        </div>\n      );\n    }\n\n    const columns = [\n    // omit...\n    {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true,\n      filter: textFilter(),\n      headerFormatter: priceFormatter\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      filter={ filterFactory() }\n      defaultSorted={ defaultSorted }\n    />\n    ",filter:(0,lib.default)(),defaultSorted:[{dataField:"name",order:"desc"}]}},ColumnAlign={name:"Column align",args:{columns:[{dataField:"id",text:"Product ID",headerAlign:"center"},{dataField:"name",text:"Product Name",headerAlign:function headerAlign(column,colIndex){return"right"}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerAlign: 'center'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerAlign: (column, colIndex) => 'right'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},ColumnTitle={name:"Column title",args:{columns:[{dataField:"id",text:"Product ID",headerTitle:!0},{dataField:"name",text:"Product Name",headerTitle:function headerTitle(column,colIndex){return"this is custom title for ".concat(column.text)}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerTitle: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerTitle: (column, colIndex) => `this is custom title for ${column.text}`\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},ColumnEvent={name:"Column event",args:{columns:[{dataField:"id",text:"Product ID",headerEvents:{onClick:function onClick(e,column,columnIndex){return alert("Click on Product ID header column, columnIndex: ".concat(columnIndex))}}},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerEvents: {\n        onClick: (e, column, columnIndex) => alert('Click on Product ID header column')\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Try to Click on Product ID header column"})}},CustomizeColumnClass={name:"Customize column class",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",headerClasses:"demo-row-odd"},{dataField:"price",text:"Product Price",headerClasses:function headerClasses(column,colIndex){return colIndex%2==0?"demo-row-even":"demo-row-odd"}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerClasses: 'demo-row-odd'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerClasses: (column, colIndex) => {\n        if (colIndex % 2 === 0) return 'demo-row-even';\n        return 'demo-row-odd';\n      }\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},CustomizeColumnStyle={name:"Customize column style",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",headerStyle:{backgroundColor:"#c8e6c9"}},{dataField:"price",text:"Product Price",headerStyle:function headerStyle(column,colIndex){return colIndex%2==0?{backgroundColor:"#81c784"}:{backgroundColor:"#c8e6c9"}}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerStyle: {\n        backgroundColor: '#c8e6c9'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerStyle: (column, colIndex) => {\n        if (colIndex % 2 === 0) {\n          return {\n            backgroundColor: '#81c784'\n          };\n        }\n        return {\n          backgroundColor: '#c8e6c9'\n        };\n      }\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},CustomizeColumnHTMLAttribute={name:"Customize column HTML attribute",args:{columns:[{dataField:"id",text:"Product ID",headerAttrs:{title:"ID header column"}},{dataField:"name",text:"Product Name",headerAttrs:function headerAttrs(column,colIndex){return{"data-test":"customized data ".concat(colIndex)}}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerAttrs: { title: 'ID header column' }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerAttrs: (column, colIndex) => ({ 'data-test': `customized data ${colIndex}` })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},HeaderClass={name:"Header class",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      headerClasses=\"header-class\"\n    />\n    ",headerClasses:"header-class"}};ColumnFormatter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnFormatter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnFormatter$para=ColumnFormatter.parameters)||void 0===_ColumnFormatter$para?void 0:_ColumnFormatter$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column formatter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerFormatter: priceFormatter\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function priceFormatter(column, colIndex) {\n      return (\n        <h5><strong>$$ { column.text } $$</strong></h5>\n      );\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerFormatter: priceFormatter\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    `\n  }\n}"},null===(_ColumnFormatter$para2=ColumnFormatter.parameters)||void 0===_ColumnFormatter$para2||null===(_ColumnFormatter$para3=_ColumnFormatter$para2.docs)||void 0===_ColumnFormatter$para3?void 0:_ColumnFormatter$para3.source)})}),ColumnFormatterWithFilterAndSort.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnFormatterWithFilterAndSort.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnFormatterWithF=ColumnFormatterWithFilterAndSort.parameters)||void 0===_ColumnFormatterWithF?void 0:_ColumnFormatterWithF.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column formatter with filter and sort\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      sort: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true,\n      filter: textFilter(),\n      headerFormatter: priceFormatterWithFilterAndSort\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n    // ...\n    function priceFormatter(column, colIndex, { sortElement, filterElement }) {\n      return (\n        <div style={ { display: 'flex', flexDirection: 'column' } }>\n          { filterElement }\n          { column.text }\n          { sortElement }\n        </div>\n      );\n    }\n\n    const columns = [\n    // omit...\n    {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true,\n      filter: textFilter(),\n      headerFormatter: priceFormatter\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      filter={ filterFactory() }\n      defaultSorted={ defaultSorted }\n    />\n    `,\n    filter: filterFactory(),\n    defaultSorted: [{\n      dataField: 'name',\n      order: 'desc'\n    }]\n  }\n}"},null===(_ColumnFormatterWithF2=ColumnFormatterWithFilterAndSort.parameters)||void 0===_ColumnFormatterWithF2||null===(_ColumnFormatterWithF3=_ColumnFormatterWithF2.docs)||void 0===_ColumnFormatterWithF3?void 0:_ColumnFormatterWithF3.source)})}),ColumnAlign.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnAlign.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnAlign$paramete=ColumnAlign.parameters)||void 0===_ColumnAlign$paramete?void 0:_ColumnAlign$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column align\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerAlign: 'center'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerAlign: (column: any, colIndex: number) => 'right'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerAlign: 'center'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerAlign: (column, colIndex) => 'right'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_ColumnAlign$paramete2=ColumnAlign.parameters)||void 0===_ColumnAlign$paramete2||null===(_ColumnAlign$paramete3=_ColumnAlign$paramete2.docs)||void 0===_ColumnAlign$paramete3?void 0:_ColumnAlign$paramete3.source)})}),ColumnTitle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnTitle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnTitle$paramete=ColumnTitle.parameters)||void 0===_ColumnTitle$paramete?void 0:_ColumnTitle$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column title\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerTitle: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerTitle: (column: any, colIndex: number) => `this is custom title for ${column.text}`\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerTitle: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerTitle: (column, colIndex) => \\`this is custom title for \\${column.text}\\`\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_ColumnTitle$paramete2=ColumnTitle.parameters)||void 0===_ColumnTitle$paramete2||null===(_ColumnTitle$paramete3=_ColumnTitle$paramete2.docs)||void 0===_ColumnTitle$paramete3?void 0:_ColumnTitle$paramete3.source)})}),ColumnEvent.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnEvent.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnEvent$paramete=ColumnEvent.parameters)||void 0===_ColumnEvent$paramete?void 0:_ColumnEvent$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column event\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerEvents: {\n        onClick: (e: any, column: any, columnIndex: number) => alert(`Click on Product ID header column, columnIndex: ${columnIndex}`)\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerEvents: {\n        onClick: (e, column, columnIndex) => alert('Click on Product ID header column')\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `,\n    header: <h3>Try to Click on Product ID header column</h3>\n  }\n}"},null===(_ColumnEvent$paramete2=ColumnEvent.parameters)||void 0===_ColumnEvent$paramete2||null===(_ColumnEvent$paramete3=_ColumnEvent$paramete2.docs)||void 0===_ColumnEvent$paramete3?void 0:_ColumnEvent$paramete3.source)})}),CustomizeColumnClass.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnClass.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnClass=CustomizeColumnClass.parameters)||void 0===_CustomizeColumnClass?void 0:_CustomizeColumnClass.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column class\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerClasses: 'demo-row-odd'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerClasses: (column: any, colIndex: number) => {\n        if (colIndex % 2 === 0) return 'demo-row-even';\n        return 'demo-row-odd';\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerClasses: 'demo-row-odd'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerClasses: (column, colIndex) => {\n        if (colIndex % 2 === 0) return 'demo-row-even';\n        return 'demo-row-odd';\n      }\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnClass2=CustomizeColumnClass.parameters)||void 0===_CustomizeColumnClass2||null===(_CustomizeColumnClass3=_CustomizeColumnClass2.docs)||void 0===_CustomizeColumnClass3?void 0:_CustomizeColumnClass3.source)})}),CustomizeColumnStyle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnStyle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnStyle=CustomizeColumnStyle.parameters)||void 0===_CustomizeColumnStyle?void 0:_CustomizeColumnStyle.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column style\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerStyle: {\n        backgroundColor: '#c8e6c9'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerStyle: (column: any, colIndex: number) => {\n        if (colIndex % 2 === 0) {\n          return {\n            backgroundColor: '#81c784'\n          };\n        }\n        return {\n          backgroundColor: '#c8e6c9'\n        };\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerStyle: {\n        backgroundColor: '#c8e6c9'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      headerStyle: (column, colIndex) => {\n        if (colIndex % 2 === 0) {\n          return {\n            backgroundColor: '#81c784'\n          };\n        }\n        return {\n          backgroundColor: '#c8e6c9'\n        };\n      }\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnStyle2=CustomizeColumnStyle.parameters)||void 0===_CustomizeColumnStyle2||null===(_CustomizeColumnStyle3=_CustomizeColumnStyle2.docs)||void 0===_CustomizeColumnStyle3?void 0:_CustomizeColumnStyle3.source)})}),CustomizeColumnHTMLAttribute.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnHTMLAttribute.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnHTMLA=CustomizeColumnHTMLAttribute.parameters)||void 0===_CustomizeColumnHTMLA?void 0:_CustomizeColumnHTMLA.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column HTML attribute\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerAttrs: {\n        title: 'ID header column'\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerAttrs: (column: any, colIndex: number) => ({\n        'data-test': `customized data ${colIndex}`\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      headerAttrs: { title: 'ID header column' }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      headerAttrs: (column, colIndex) => ({ 'data-test': \\`customized data \\${colIndex}\\` })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnHTMLA2=CustomizeColumnHTMLAttribute.parameters)||void 0===_CustomizeColumnHTMLA2||null===(_CustomizeColumnHTMLA3=_CustomizeColumnHTMLA2.docs)||void 0===_CustomizeColumnHTMLA3?void 0:_CustomizeColumnHTMLA3.source)})}),HeaderClass.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},HeaderClass.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_HeaderClass$paramete=HeaderClass.parameters)||void 0===_HeaderClass$paramete?void 0:_HeaderClass$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Header class\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      headerClasses=\"header-class\"\n    />\n    `,\n    headerClasses: \"header-class\"\n  }\n}"},null===(_HeaderClass$paramete2=HeaderClass.parameters)||void 0===_HeaderClass$paramete2||null===(_HeaderClass$paramete3=_HeaderClass$paramete2.docs)||void 0===_HeaderClass$paramete3?void 0:_HeaderClass$paramete3.source)})});var __namedExportsOrder=["ColumnFormatter","ColumnFormatterWithFilterAndSort","ColumnAlign","ColumnTitle","ColumnEvent","CustomizeColumnClass","CustomizeColumnStyle","CustomizeColumnHTMLAttribute","HeaderClass"]}}]);