/*! For license information please see stories-BasicTable-stories.2a8bc525.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[478],{"../../node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./src/stories/BasicTable.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicTable:()=>BasicTable_stories_BasicTable,BorderlessTable:()=>BorderlessTable,CustomizedIdAndClassTable:()=>CustomizedIdAndClassTable,EmptyTable:()=>EmptyTable,EnableTabIndexOnCell:()=>EnableTabIndexOnCell,ExposedAPITable:()=>ExposedAPITable,LargeTable:()=>LargeTable,StripedHoverCondensedTable:()=>StripedHoverCondensedTable,TableWithCaption:()=>TableWithCaption,__namedExportsOrder:()=>__namedExportsOrder,default:()=>BasicTable_stories});var node,objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),common=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./src/utils/common.ts")),lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),react_bootstrap_table_nextgen_filter_lib=__webpack_require__("../react-bootstrap-table-nextgen-filter/lib/index.js"),react_bootstrap_table_nextgen_paginator_lib=__webpack_require__("../react-bootstrap-table-nextgen-paginator/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),handleGetCurrentData=function handleGetCurrentData(){console.log(node.table.props.data)},handleGetSelectedData=function handleGetSelectedData(){console.log(node.selectionContext.selected)},handleGetExpandedData=function handleGetExpandedData(){console.log(node.rowExpandContext.state.expanded)},handleGetCurrentPage=function handleGetCurrentPage(){console.log(node.paginationContext.currPage)},handleGetCurrentSizePerPage=function handleGetCurrentSizePerPage(){console.log(node.paginationContext.currSizePerPage)},handleGetCurrentSortColumn=function handleGetCurrentSortColumn(){console.log(node.sortContext.state.sortColumn)},handleGetCurrentSortOrder=function handleGetCurrentSortOrder(){console.log(node.sortContext.state.sortOrder)},handleGetCurrentFilter=function handleGetCurrentFilter(){console.log(node.filterContext.currFilters)};try{BasicTable.displayName="BasicTable",BasicTable.__docgenInfo={description:"",displayName:"BasicTable",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"any"}},classes:{defaultValue:null,description:"",name:"classes",required:!0,type:{name:"any"}},headerWrapperClasses:{defaultValue:null,description:"",name:"headerWrapperClasses",required:!0,type:{name:"any"}},bodyClasses:{defaultValue:null,description:"",name:"bodyClasses",required:!0,type:{name:"any"}},wrapperClasses:{defaultValue:null,description:"",name:"wrapperClasses",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},caption:{defaultValue:null,description:"",name:"caption",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},selectRow:{defaultValue:null,description:"",name:"selectRow",required:!0,type:{name:"any"}},expandRow:{defaultValue:null,description:"",name:"expandRow",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},striped:{defaultValue:null,description:"",name:"striped",required:!0,type:{name:"any"}},hover:{defaultValue:null,description:"",name:"hover",required:!0,type:{name:"any"}},condensed:{defaultValue:null,description:"",name:"condensed",required:!0,type:{name:"any"}},bordered:{defaultValue:null,description:"",name:"bordered",required:!0,type:{name:"any"}},noDataIndication:{defaultValue:null,description:"",name:"noDataIndication",required:!0,type:{name:"any"}},tabIndexCell:{defaultValue:null,description:"",name:"tabIndexCell",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/BasicTable.tsx#BasicTable"]={docgenInfo:BasicTable.__docgenInfo,name:"BasicTable",path:"src/stories/BasicTable.tsx#BasicTable"})}catch(__react_docgen_typescript_loader_error){}var _BasicTable$parameter,_BasicTable$parameter2,_BasicTable$parameter3,_StripedHoverCondense,_StripedHoverCondense2,_StripedHoverCondense3,_BorderlessTable$para,_BorderlessTable$para2,_BorderlessTable$para3,_EmptyTable$parameter,_EmptyTable$parameter2,_EmptyTable$parameter3,_CustomizedIdAndClass,_CustomizedIdAndClass2,_CustomizedIdAndClass3,_TableWithCaption$par,_TableWithCaption$par2,_TableWithCaption$par3,_LargeTable$parameter,_LargeTable$parameter2,_LargeTable$parameter3,_ExposedAPITable$para,_ExposedAPITable$para2,_ExposedAPITable$para3,_EnableTabIndexOnCell,_EnableTabIndexOnCell2,_EnableTabIndexOnCell3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx"),meta={title:"Basic Table",component:function(_ref){var mode=_ref.mode,id=_ref.id,classes=_ref.classes,headerWrapperClasses=_ref.headerWrapperClasses,bodyClasses=_ref.bodyClasses,wrapperClasses=_ref.wrapperClasses,data=_ref.data,caption=_ref.caption,columns=_ref.columns,selectRow=_ref.selectRow,expandRow=_ref.expandRow,sourceCode=_ref.sourceCode,striped=_ref.striped,hover=_ref.hover,condensed=_ref.condensed,bordered=_ref.bordered,noDataIndication=_ref.noDataIndication,tabIndexCell=_ref.tabIndexCell;switch(mode){case"idAndClass":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h4",{children:" Customized table ID "}),(0,jsx_runtime.jsx)(lib.default,{id,keyField:"id",data,columns}),(0,jsx_runtime.jsx)("h4",{children:" Customized table className "}),(0,jsx_runtime.jsx)(lib.default,{classes,keyField:"id",data,columns}),(0,jsx_runtime.jsx)("h4",{children:" Customized thead className "}),(0,jsx_runtime.jsx)(lib.default,{headerWrapperClasses,keyField:"id",data,columns}),(0,jsx_runtime.jsx)("h4",{children:" Customized tbody className "}),(0,jsx_runtime.jsx)(lib.default,{bodyClasses,keyField:"id",data,columns}),(0,jsx_runtime.jsx)("h4",{children:" Customized wrapper className "}),(0,jsx_runtime.jsx)(lib.default,{wrapperClasses,keyField:"id",data,columns}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"caption":var Caption=function Caption(){return(0,jsx_runtime.jsx)("h3",{style:{borderRadius:"0.25em",textAlign:"center",color:"purple",border:"1px solid purple",padding:"0.5em"},children:"Component as Header"})};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,caption:"Plain text header",columns}),(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,caption:(0,jsx_runtime.jsx)(Caption,{}),columns}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"exposedAPI":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetCurrentData,children:"Get Current Display Rows"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetSelectedData,children:"Get Current Selected Rows"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetExpandedData,children:"Get Current Expanded Rows"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetCurrentPage,children:"Get Current Page"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetCurrentSizePerPage,children:"Get Current Size Per Page"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetCurrentSortColumn,children:"Get Current Sort Column"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetCurrentSortOrder,children:"Get Current Sort Order"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:handleGetCurrentFilter,children:"Get Current Filter Information"}),(0,jsx_runtime.jsx)(lib.default,{ref:function ref(n){return node=n},keyField:"id",data,columns,filter:(0,react_bootstrap_table_nextgen_filter_lib.default)(),pagination:(0,react_bootstrap_table_nextgen_paginator_lib.ZP)(),selectRow:{mode:"checkbox",clickToSelect:!0},expandRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});default:return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(lib.default,{id,classes,headerWrapperClasses,bodyClasses,wrapperClasses,keyField:"id",data,caption,columns,selectRow,expandRow,striped,hover,condensed,bordered,noDataIndication,tabIndexCell}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},id:{control:"text",description:"id"},classes:{control:"text",description:"classes"},headerWrapperClasses:{control:"text",description:"headerWrapperClasses"},bodyClasses:{control:"text",description:"bodyClasses"},wrapperClasses:{control:"text",description:"wrapperClasses"},data:{control:"object",description:"table data"},caption:{control:"object",description:"table caption"},columns:{control:"object",description:"table columns"},selectRow:{control:"object",description:"table select row"},expandRow:{control:"object",description:"table expand row"},sourceCode:{control:"text",description:"source code of the table"},striped:{control:"boolean",description:"striped flag",table:{defaultValue:{summary:"false"}}},hover:{control:"boolean",description:"hover flag",table:{defaultValue:{summary:"false"}}},condensed:{control:"boolean",description:"condensed flag",table:{defaultValue:{summary:"false"}}},bordered:{control:"boolean",description:"bordered flag",table:{defaultValue:{summary:"true"}}},noDataIndication:{control:"text",description:"no data in the table indication"},tabIndexCell:{control:"boolean",description:"tab index cell",table:{defaultValue:{summary:"false"}}}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};const BasicTable_stories=meta;var BasicTable_stories_BasicTable={name:"Basic table",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},StripedHoverCondensedTable={name:"Striped, hover, condensed table",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    // omit...\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      striped\n      hover\n      condensed\n    />\n    ",striped:!0,hover:!0,condensed:!0}},BorderlessTable={name:"Borderless table",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    // omit...\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      bordered={ false }\n    />\n    ",bordered:!1}},EmptyTable={name:"Indication for empty table",args:{columns:common.zF,data:[],sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    // omit...\n\n    <BootstrapTable keyField='id' data={ [] } columns={ columns } noDataIndication=\"Table is Empty\" />\n\n    // Following is a more flexible example\n\n    function indication() {\n      // return something here\n    }\n\n    <BootstrapTable keyField='id' data={ [] } columns={ columns } noDataIndication={ indication } />\n    ",noDataIndication:"Table is Empty"}},CustomizedIdAndClassTable={name:"Customized id and class table",args:{mode:"idAndClass",columns:common.zF,data:(0,common.bG)(),sourceCode:'    import BootstrapTable from \'react-bootstrap-table-nextgen\';\n\n    const columns = [{\n      dataField: \'id\',\n      text: \'Product ID\'\n    }, {\n      dataField: \'name\',\n      text: \'Product Name\'\n    }, {\n      dataField: \'price\',\n      text: \'Product Price\'\n    }];\n\n    <BootstrapTable id="bar" keyField=\'id\' data={ products } columns={ columns } />\n    <BootstrapTable classes="foo" keyField="id" data={ products } columns={ columns } />\n    <BootstrapTable headerWrapperClasses="foo" keyField="id" data={ products } columns={ columns } />\n    <BootstrapTable bodyClasses="foo" keyField="id" data={ products } columns={ columns } />\n    <BootstrapTable wrapperClasses="boo" keyField="id" data={ products } columns={ columns } />\n    ',id:"bar",classes:"foo",headerWrapperClasses:"foo",bodyClasses:"foo",wrapperClasses:"boo"}},TableWithCaption={name:"Table with caption",args:{mode:"caption",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const CaptionElement = () => <h3 style={{ borderRadius: '0.25em', textAlign: 'center', color: 'purple', border: '1px solid purple', padding: '0.5em' }}>Component as Header</h3>;\n\n    <BootstrapTable keyField=\"id\" data={ products } caption=\"Plain text header\" columns={ columns } />\n    <BootstrapTable keyField=\"id\" data={ products } caption={<CaptionElement />} columns={ columns } />\n    "}},expandRow={showExpandColumn:!0,renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})}},LargeTable={name:"Large table",args:{columns:common.zF,data:(0,common.bG)(20),selectRow:{mode:"checkbox",clickToSelect:!0},expandRow}},ExposedAPITable={name:"Exposed API",args:{mode:"exposedAPI",columns:common.hl,data:(0,common.bG)(63),expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0},sourceCode:'    import BootstrapTable from \'react-bootstrap-table-nextgen\';\n\n    const columns = [{\n      dataField: \'id\',\n      text: \'Product ID\',\n      sort: true\n    }, {\n      dataField: \'name\',\n      text: \'Product Name\',\n      sort: true,\n      filter: textFilter()\n    }, {\n      dataField: \'price\',\n      text: \'Product Price\',\n      sort: true,\n      filter: textFilter()\n    }];\n\n    class ExposedFunctionTable extends React.Component {\n      handleGetCurrentData = () => {\n        console.log(this.node.table.props.data);\n      }\n\n      handleGetCurrentData = () => {\n        console.log(this.node.table.props.data);\n      }\n\n      handleGetSelectedData = () => {\n        console.log(this.node.selectionContext.selected);\n      }\n\n      handleGetExpandedData = () => {\n        console.log(this.node.rowExpandContext.state.expanded);\n      }\n\n      handleGetCurrentPage = () => {\n        console.log(this.node.paginationContext.currPage);\n      }\n\n      handleGetCurrentSizePerPage = () => {\n        console.log(this.node.paginationContext.currSizePerPage);\n      }\n\n      handleGetCurrentSortColumn = () => {\n        console.log(this.node.sortContext.state.sortColumn);\n      }\n\n      handleGetCurrentSortOrder = () => {\n        console.log(this.node.sortContext.state.sortOrder);\n      }\n\n      handleGetCurrentFilter = () => {\n        console.log(this.node.filterContext.currFilters);\n      }\n\n      render() {\n        const expandRow = {\n          renderer: row => (\n            <div>\n              <p>.....</p>\n              <p>You can render anything here, also you can add additional data on every row object</p>\n              <p>expandRow.renderer callback will pass the origin row object to you</p>\n            </div>\n          ),\n          showExpandColumn: true\n        };\n        return (\n          <div>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentData }>Get Current Display Rows</button>\n            <button className="btn btn-default" onClick={ this.handleGetSelectedData }>Get Current Selected Rows</button>\n            <button className="btn btn-default" onClick={ this.handleGetExpandedData }>Get Current Expanded Rows</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentPage }>Get Current Page</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentSizePerPage }>Get Current Size Per Page</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentSortColumn }>Get Current Sort Column</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentSortOrder }>Get Current Sort Order</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentFilter }>Get Current Filter Information</button>\n            <BootstrapTable\n              ref={ n => this.node = n }\n              keyField="id"\n              data={ products }\n              columns={ columns }\n              filter={ filterFactory() }\n              pagination={ paginationFactory() }\n              selectRow={ { mode: \'checkbox\', clickToSelect: true } }\n              expandRow={ expandRow }\n            />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    '}},EnableTabIndexOnCell={name:"Enable tabIndex on cell",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      selectRow={ { mode: 'checkbox' } }\n      tabIndexCell\n    />\n    ",selectRow:{mode:"checkbox"},tabIndexCell:!0}};BasicTable_stories_BasicTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},BasicTable_stories_BasicTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_BasicTable$parameter=BasicTable_stories_BasicTable.parameters)||void 0===_BasicTable$parameter?void 0:_BasicTable$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Basic table\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_BasicTable$parameter2=BasicTable_stories_BasicTable.parameters)||void 0===_BasicTable$parameter2||null===(_BasicTable$parameter3=_BasicTable$parameter2.docs)||void 0===_BasicTable$parameter3?void 0:_BasicTable$parameter3.source)})}),StripedHoverCondensedTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},StripedHoverCondensedTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_StripedHoverCondense=StripedHoverCondensedTable.parameters)||void 0===_StripedHoverCondense?void 0:_StripedHoverCondense.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Striped, hover, condensed table",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from \'react-bootstrap-table-nextgen\';\n    // omit...\n\n    <BootstrapTable\n      keyField="id"\n      data={ products }\n      columns={ columns }\n      striped\n      hover\n      condensed\n    />\n    `,\n    striped: true,\n    hover: true,\n    condensed: true\n  }\n}'},null===(_StripedHoverCondense2=StripedHoverCondensedTable.parameters)||void 0===_StripedHoverCondense2||null===(_StripedHoverCondense3=_StripedHoverCondense2.docs)||void 0===_StripedHoverCondense3?void 0:_StripedHoverCondense3.source)})}),BorderlessTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},BorderlessTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_BorderlessTable$para=BorderlessTable.parameters)||void 0===_BorderlessTable$para?void 0:_BorderlessTable$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Borderless table",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from \'react-bootstrap-table-nextgen\';\n    // omit...\n\n    <BootstrapTable\n      keyField="id"\n      data={ products }\n      columns={ columns }\n      bordered={ false }\n    />\n    `,\n    bordered: false\n  }\n}'},null===(_BorderlessTable$para2=BorderlessTable.parameters)||void 0===_BorderlessTable$para2||null===(_BorderlessTable$para3=_BorderlessTable$para2.docs)||void 0===_BorderlessTable$para3?void 0:_BorderlessTable$para3.source)})}),EmptyTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},EmptyTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_EmptyTable$parameter=EmptyTable.parameters)||void 0===_EmptyTable$parameter?void 0:_EmptyTable$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Indication for empty table\",\n  args: {\n    columns: columns,\n    data: [],\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    // omit...\n\n    <BootstrapTable keyField='id' data={ [] } columns={ columns } noDataIndication=\"Table is Empty\" />\n\n    // Following is a more flexible example\n\n    function indication() {\n      // return something here\n    }\n\n    <BootstrapTable keyField='id' data={ [] } columns={ columns } noDataIndication={ indication } />\n    `,\n    noDataIndication: \"Table is Empty\"\n  }\n}"},null===(_EmptyTable$parameter2=EmptyTable.parameters)||void 0===_EmptyTable$parameter2||null===(_EmptyTable$parameter3=_EmptyTable$parameter2.docs)||void 0===_EmptyTable$parameter3?void 0:_EmptyTable$parameter3.source)})}),CustomizedIdAndClassTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizedIdAndClassTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizedIdAndClass=CustomizedIdAndClassTable.parameters)||void 0===_CustomizedIdAndClass?void 0:_CustomizedIdAndClass.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Customized id and class table",\n  args: {\n    mode: "idAndClass",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from \'react-bootstrap-table-nextgen\';\n\n    const columns = [{\n      dataField: \'id\',\n      text: \'Product ID\'\n    }, {\n      dataField: \'name\',\n      text: \'Product Name\'\n    }, {\n      dataField: \'price\',\n      text: \'Product Price\'\n    }];\n\n    <BootstrapTable id="bar" keyField=\'id\' data={ products } columns={ columns } />\n    <BootstrapTable classes="foo" keyField="id" data={ products } columns={ columns } />\n    <BootstrapTable headerWrapperClasses="foo" keyField="id" data={ products } columns={ columns } />\n    <BootstrapTable bodyClasses="foo" keyField="id" data={ products } columns={ columns } />\n    <BootstrapTable wrapperClasses="boo" keyField="id" data={ products } columns={ columns } />\n    `,\n    id: "bar",\n    classes: "foo",\n    headerWrapperClasses: "foo",\n    bodyClasses: "foo",\n    wrapperClasses: "boo"\n  }\n}'},null===(_CustomizedIdAndClass2=CustomizedIdAndClassTable.parameters)||void 0===_CustomizedIdAndClass2||null===(_CustomizedIdAndClass3=_CustomizedIdAndClass2.docs)||void 0===_CustomizedIdAndClass3?void 0:_CustomizedIdAndClass3.source)})}),TableWithCaption.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TableWithCaption.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_TableWithCaption$par=TableWithCaption.parameters)||void 0===_TableWithCaption$par?void 0:_TableWithCaption$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Table with caption\",\n  args: {\n    mode: \"caption\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const CaptionElement = () => <h3 style={{ borderRadius: '0.25em', textAlign: 'center', color: 'purple', border: '1px solid purple', padding: '0.5em' }}>Component as Header</h3>;\n\n    <BootstrapTable keyField=\"id\" data={ products } caption=\"Plain text header\" columns={ columns } />\n    <BootstrapTable keyField=\"id\" data={ products } caption={<CaptionElement />} columns={ columns } />\n    `\n  }\n}"},null===(_TableWithCaption$par2=TableWithCaption.parameters)||void 0===_TableWithCaption$par2||null===(_TableWithCaption$par3=_TableWithCaption$par2.docs)||void 0===_TableWithCaption$par3?void 0:_TableWithCaption$par3.source)})}),LargeTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},LargeTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_LargeTable$parameter=LargeTable.parameters)||void 0===_LargeTable$parameter?void 0:_LargeTable$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Large table\",\n  args: {\n    columns: columns,\n    data: productsGenerator(20),\n    selectRow: {\n      mode: 'checkbox',\n      clickToSelect: true\n    },\n    expandRow: expandRow\n  }\n}"},null===(_LargeTable$parameter2=LargeTable.parameters)||void 0===_LargeTable$parameter2||null===(_LargeTable$parameter3=_LargeTable$parameter2.docs)||void 0===_LargeTable$parameter3?void 0:_LargeTable$parameter3.source)})}),ExposedAPITable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExposedAPITable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExposedAPITable$para=ExposedAPITable.parameters)||void 0===_ExposedAPITable$para?void 0:_ExposedAPITable$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Exposed API",\n  args: {\n    mode: "exposedAPI",\n    columns: sortFilterColumns,\n    data: productsGenerator(63),\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>\n            You can render anything here, also you can add additional data on\n            every row object\n          </p>\n          <p>\n            expandRow.renderer callback will pass the origin row object to you\n          </p>\n        </div>,\n      showExpandColumn: true\n    },\n    sourceCode: `\\\n    import BootstrapTable from \'react-bootstrap-table-nextgen\';\n\n    const columns = [{\n      dataField: \'id\',\n      text: \'Product ID\',\n      sort: true\n    }, {\n      dataField: \'name\',\n      text: \'Product Name\',\n      sort: true,\n      filter: textFilter()\n    }, {\n      dataField: \'price\',\n      text: \'Product Price\',\n      sort: true,\n      filter: textFilter()\n    }];\n\n    class ExposedFunctionTable extends React.Component {\n      handleGetCurrentData = () => {\n        console.log(this.node.table.props.data);\n      }\n\n      handleGetCurrentData = () => {\n        console.log(this.node.table.props.data);\n      }\n\n      handleGetSelectedData = () => {\n        console.log(this.node.selectionContext.selected);\n      }\n\n      handleGetExpandedData = () => {\n        console.log(this.node.rowExpandContext.state.expanded);\n      }\n\n      handleGetCurrentPage = () => {\n        console.log(this.node.paginationContext.currPage);\n      }\n\n      handleGetCurrentSizePerPage = () => {\n        console.log(this.node.paginationContext.currSizePerPage);\n      }\n\n      handleGetCurrentSortColumn = () => {\n        console.log(this.node.sortContext.state.sortColumn);\n      }\n\n      handleGetCurrentSortOrder = () => {\n        console.log(this.node.sortContext.state.sortOrder);\n      }\n\n      handleGetCurrentFilter = () => {\n        console.log(this.node.filterContext.currFilters);\n      }\n\n      render() {\n        const expandRow = {\n          renderer: row => (\n            <div>\n              <p>.....</p>\n              <p>You can render anything here, also you can add additional data on every row object</p>\n              <p>expandRow.renderer callback will pass the origin row object to you</p>\n            </div>\n          ),\n          showExpandColumn: true\n        };\n        return (\n          <div>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentData }>Get Current Display Rows</button>\n            <button className="btn btn-default" onClick={ this.handleGetSelectedData }>Get Current Selected Rows</button>\n            <button className="btn btn-default" onClick={ this.handleGetExpandedData }>Get Current Expanded Rows</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentPage }>Get Current Page</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentSizePerPage }>Get Current Size Per Page</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentSortColumn }>Get Current Sort Column</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentSortOrder }>Get Current Sort Order</button>\n            <button className="btn btn-default" onClick={ this.handleGetCurrentFilter }>Get Current Filter Information</button>\n            <BootstrapTable\n              ref={ n => this.node = n }\n              keyField="id"\n              data={ products }\n              columns={ columns }\n              filter={ filterFactory() }\n              pagination={ paginationFactory() }\n              selectRow={ { mode: \'checkbox\', clickToSelect: true } }\n              expandRow={ expandRow }\n            />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    `\n  }\n}'},null===(_ExposedAPITable$para2=ExposedAPITable.parameters)||void 0===_ExposedAPITable$para2||null===(_ExposedAPITable$para3=_ExposedAPITable$para2.docs)||void 0===_ExposedAPITable$para3?void 0:_ExposedAPITable$para3.source)})}),EnableTabIndexOnCell.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},EnableTabIndexOnCell.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_EnableTabIndexOnCell=EnableTabIndexOnCell.parameters)||void 0===_EnableTabIndexOnCell?void 0:_EnableTabIndexOnCell.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Enable tabIndex on cell\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      selectRow={ { mode: 'checkbox' } }\n      tabIndexCell\n    />\n    `,\n    selectRow: {\n      mode: 'checkbox'\n    },\n    tabIndexCell: true\n  }\n}"},null===(_EnableTabIndexOnCell2=EnableTabIndexOnCell.parameters)||void 0===_EnableTabIndexOnCell2||null===(_EnableTabIndexOnCell3=_EnableTabIndexOnCell2.docs)||void 0===_EnableTabIndexOnCell3?void 0:_EnableTabIndexOnCell3.source)})});var __namedExportsOrder=["BasicTable","StripedHoverCondensedTable","BorderlessTable","EmptyTable","CustomizedIdAndClassTable","TableWithCaption","LargeTable","ExposedAPITable","EnableTabIndexOnCell"]}}]);