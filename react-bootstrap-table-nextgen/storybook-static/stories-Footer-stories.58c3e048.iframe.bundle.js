"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[513],{"./src/stories/Footer.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ColumnAlign:()=>ColumnAlign,ColumnEvent:()=>ColumnEvent,ColumnFormatter:()=>ColumnFormatter,ColumnTitle:()=>ColumnTitle,CustomizeColumnClass:()=>CustomizeColumnClass,CustomizeColumnHTMLAttribute:()=>CustomizeColumnHTMLAttribute,CustomizeColumnStyle:()=>CustomizeColumnStyle,FooterClass:()=>FooterClass,FunctionFooter:()=>FunctionFooter,SimpleFooter:()=>SimpleFooter,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Footer_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),common=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./src/utils/common.ts")),lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js"));try{Footer.displayName="Footer",Footer.__docgenInfo={description:"",displayName:"Footer",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},footerClasses:{defaultValue:null,description:"",name:"footerClasses",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/Footer.tsx#Footer"]={docgenInfo:Footer.__docgenInfo,name:"Footer",path:"src/stories/Footer.tsx#Footer"})}catch(__react_docgen_typescript_loader_error){}var _SimpleFooter$paramet,_SimpleFooter$paramet2,_SimpleFooter$paramet3,_FunctionFooter$param,_FunctionFooter$param2,_FunctionFooter$param3,_ColumnFormatter$para,_ColumnFormatter$para2,_ColumnFormatter$para3,_ColumnAlign$paramete,_ColumnAlign$paramete2,_ColumnAlign$paramete3,_ColumnTitle$paramete,_ColumnTitle$paramete2,_ColumnTitle$paramete3,_ColumnEvent$paramete,_ColumnEvent$paramete2,_ColumnEvent$paramete3,_CustomizeColumnClass,_CustomizeColumnClass2,_CustomizeColumnClass3,_CustomizeColumnStyle,_CustomizeColumnStyle2,_CustomizeColumnStyle3,_CustomizeColumnHTMLA,_CustomizeColumnHTMLA2,_CustomizeColumnHTMLA3,_FooterClass$paramete,_FooterClass$paramete2,_FooterClass$paramete3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const Footer_stories={title:"Footer",component:function(_ref){var data=_ref.data,columns=_ref.columns,sourceCode=_ref.sourceCode,footerClasses=_ref.footerClasses;return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,footerClasses}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var SimpleFooter={name:"Simple footer",args:{columns:[{dataField:"id",text:"Product ID",footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"Footer 2"},{dataField:"price",text:"Product Price",footer:"Footer 3"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [\n      {\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      },\n      {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      },\n      {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3'\n      }\n    ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    "}},FunctionFooter={name:"Function footer",args:{columns:[{dataField:"id",text:"Product ID",footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"Footer 2"},{dataField:"price",text:"Product Price",footer:function footer(columnData){return columnData.reduce((function(acc,item){return acc+item}),0)}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [\n      {\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      },\n      {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      },\n      {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: (columnData: any) => columnData.reduce((acc: any, item: any) => acc + item, 0)\n      }\n    ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    "}};var ColumnFormatter={name:"Column formatter",args:{columns:[{dataField:"id",text:"Product ID",footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"Footer 2"},{dataField:"price",text:"Product Price",footer:"Footer 3",footerFormatter:function priceFormatter(column,colIndex,_ref){return _ref.text,(0,jsx_runtime.jsx)("h5",{children:(0,jsx_runtime.jsxs)("strong",{children:["$$ ",column.text," $$"]})})}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function priceFormatter(column, colIndex, { text }) {\n      return (\n        <h5><strong>$$ { column.text } $$</strong></h5>\n      );\n    }\n\n    const columns = [\n      {\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      },\n      {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      },\n      {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3',\n        footerFormatter: priceFormatter\n      }\n    ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    "}},ColumnAlign={name:"Column align",args:{columns:[{dataField:"id",text:"Product ID",footerAlign:"center",footer:"Footer 1"},{dataField:"name",text:"Product Name",footerAlign:function footerAlign(column,colIndex){return"right"},footer:"Footer 2"},{dataField:"price",text:"Product Price",footer:"Footer 3"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      footerAlign: 'center',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footerAlign: (column, colIndex) => 'right',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},ColumnTitle={name:"Column title",args:{columns:[{dataField:"id",text:"Product ID",footerTitle:!0,footer:"Footer 1"},{dataField:"name",text:"Product Name",footerTitle:function footerTitle(column,colIndex){return"this is custom title for ".concat(column.text)},footer:"Footer 2"},{dataField:"price",text:"Product Price",footer:"Footer 3"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      footerTitle: true,\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footerTitle: (column, colIndex) => `this is custom title for ${column.text}`,\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},ColumnEvent={name:"Column event",args:{columns:[{dataField:"id",text:"Product ID",footerEvents:{onClick:function onClick(e,column,columnIndex){return alert("Click on Product ID header column, columnIndex: ".concat(columnIndex))}},footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"Footer 2"},{dataField:"price",text:"Product Price",footer:"Footer 3"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footerEvents: {\n          onClick: (e, column, columnIndex) => alert('Click on Product ID footer column')\n        },\n        footer: 'Footer 1'\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3'\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},CustomizeColumnClass={name:"Customize column class",args:{columns:[{dataField:"id",text:"Product ID",footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"Footer 2",footerClasses:"demo-row-odd"},{dataField:"price",text:"Product Price",footer:"Footer 3",footerClasses:function footerClasses(column,colIndex){return colIndex%2==0?"demo-row-even":"demo-row-odd"}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2',\n        footerClasses: 'demo-row-odd'\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3',\n        footerClasses: (column, colIndex) => {\n          if (colIndex % 2 === 0) return 'demo-row-even';\n          return 'demo-row-odd';\n        }\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},CustomizeColumnStyle={name:"Customize column style",args:{columns:[{dataField:"id",text:"Product ID",footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"Footer 2",footerStyle:{backgroundColor:"#c8e6c9"}},{dataField:"price",text:"Product Price",footer:"Footer 3",footerStyle:function footerStyle(column,colIndex){return colIndex%2==0?{backgroundColor:"#81c784"}:{backgroundColor:"#c8e6c9"}}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2',\n        footerStyle: {\n          backgroundColor: '#c8e6c9'\n        }\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3',\n        footerStyle: (column, colIndex) => {\n          if (colIndex % 2 === 0) {\n            return {\n              backgroundColor: '#81c784'\n            };\n          }\n          return {\n            backgroundColor: '#c8e6c9'\n          };\n        }\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},CustomizeColumnHTMLAttribute={name:"Customize column HTML attribute",args:{columns:[{dataField:"id",text:"Product ID",footer:"Footer 1",footerAttrs:{title:"ID footer column"}},{dataField:"name",text:"Product Name",footer:"Footer 2",footerAttrs:function footerAttrs(column,colIndex){return{"data-test":"customized data ".concat(colIndex)}}},{dataField:"price",text:"Product Price",footer:"Footer 3"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1',\n        footerAttrs: { title: 'ID footer column' }\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2',\n        footerAttrs: (column, colIndex) => ({ 'data-test': `customized data ${colIndex}` })\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3'\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},FooterClass={name:"Footer class",args:{columns:[{dataField:"id",text:"Product ID",footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"Footer 2"},{dataField:"price",text:"Product Price",footer:"Footer 3"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [\n        {\n          dataField: 'id',\n          text: 'Product ID',\n          footer: 'Footer 1'\n        },\n        {\n          dataField: 'name',\n          text: 'Product Name',\n          footer: 'Footer 2'\n        },\n        {\n          dataField: 'price',\n          text: 'Product Price',\n          footer: 'Footer 3'\n        }\n      ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      footerClasses=\"footer-class\"\n    />\n    ",footerClasses:"footer-class"}};SimpleFooter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SimpleFooter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SimpleFooter$paramet=SimpleFooter.parameters)||void 0===_SimpleFooter$paramet?void 0:_SimpleFooter$paramet.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Simple footer\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [\n      {\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      },\n      {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      },\n      {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3'\n      }\n    ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    `\n  }\n}"},null===(_SimpleFooter$paramet2=SimpleFooter.parameters)||void 0===_SimpleFooter$paramet2||null===(_SimpleFooter$paramet3=_SimpleFooter$paramet2.docs)||void 0===_SimpleFooter$paramet3?void 0:_SimpleFooter$paramet3.source)})}),FunctionFooter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},FunctionFooter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_FunctionFooter$param=FunctionFooter.parameters)||void 0===_FunctionFooter$param?void 0:_FunctionFooter$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Function footer\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: (columnData: any) => columnData.reduce((acc: any, item: any) => acc + item, 0)\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [\n      {\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      },\n      {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      },\n      {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: (columnData: any) => columnData.reduce((acc: any, item: any) => acc + item, 0)\n      }\n    ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    `\n  }\n}"},null===(_FunctionFooter$param2=FunctionFooter.parameters)||void 0===_FunctionFooter$param2||null===(_FunctionFooter$param3=_FunctionFooter$param2.docs)||void 0===_FunctionFooter$param3?void 0:_FunctionFooter$param3.source)})}),ColumnFormatter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnFormatter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnFormatter$para=ColumnFormatter.parameters)||void 0===_ColumnFormatter$para?void 0:_ColumnFormatter$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column formatter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3',\n      footerFormatter: priceFormatter\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function priceFormatter(column, colIndex, { text }) {\n      return (\n        <h5><strong>$$ { column.text } $$</strong></h5>\n      );\n    }\n\n    const columns = [\n      {\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      },\n      {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      },\n      {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3',\n        footerFormatter: priceFormatter\n      }\n    ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    `\n  }\n}"},null===(_ColumnFormatter$para2=ColumnFormatter.parameters)||void 0===_ColumnFormatter$para2||null===(_ColumnFormatter$para3=_ColumnFormatter$para2.docs)||void 0===_ColumnFormatter$para3?void 0:_ColumnFormatter$para3.source)})}),ColumnAlign.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnAlign.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnAlign$paramete=ColumnAlign.parameters)||void 0===_ColumnAlign$paramete?void 0:_ColumnAlign$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column align\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footerAlign: 'center',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footerAlign: (column: any, colIndex: number) => 'right',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      footerAlign: 'center',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footerAlign: (column, colIndex) => 'right',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_ColumnAlign$paramete2=ColumnAlign.parameters)||void 0===_ColumnAlign$paramete2||null===(_ColumnAlign$paramete3=_ColumnAlign$paramete2.docs)||void 0===_ColumnAlign$paramete3?void 0:_ColumnAlign$paramete3.source)})}),ColumnTitle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnTitle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnTitle$paramete=ColumnTitle.parameters)||void 0===_ColumnTitle$paramete?void 0:_ColumnTitle$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column title\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footerTitle: true,\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footerTitle: (column: any, colIndex: number) => `this is custom title for ${column.text}`,\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      footerTitle: true,\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footerTitle: (column, colIndex) => \\`this is custom title for \\${column.text}\\`,\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_ColumnTitle$paramete2=ColumnTitle.parameters)||void 0===_ColumnTitle$paramete2||null===(_ColumnTitle$paramete3=_ColumnTitle$paramete2.docs)||void 0===_ColumnTitle$paramete3?void 0:_ColumnTitle$paramete3.source)})}),ColumnEvent.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnEvent.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnEvent$paramete=ColumnEvent.parameters)||void 0===_ColumnEvent$paramete?void 0:_ColumnEvent$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column event\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footerEvents: {\n        onClick: (e: any, column: any, columnIndex: number) => alert(`Click on Product ID header column, columnIndex: ${columnIndex}`)\n      },\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footerEvents: {\n          onClick: (e, column, columnIndex) => alert('Click on Product ID footer column')\n        },\n        footer: 'Footer 1'\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2'\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3'\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_ColumnEvent$paramete2=ColumnEvent.parameters)||void 0===_ColumnEvent$paramete2||null===(_ColumnEvent$paramete3=_ColumnEvent$paramete2.docs)||void 0===_ColumnEvent$paramete3?void 0:_ColumnEvent$paramete3.source)})}),CustomizeColumnClass.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnClass.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnClass=CustomizeColumnClass.parameters)||void 0===_CustomizeColumnClass?void 0:_CustomizeColumnClass.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column class\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2',\n      footerClasses: 'demo-row-odd'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3',\n      footerClasses: (column: any, colIndex: number) => {\n        if (colIndex % 2 === 0) return 'demo-row-even';\n        return 'demo-row-odd';\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2',\n        footerClasses: 'demo-row-odd'\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3',\n        footerClasses: (column, colIndex) => {\n          if (colIndex % 2 === 0) return 'demo-row-even';\n          return 'demo-row-odd';\n        }\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnClass2=CustomizeColumnClass.parameters)||void 0===_CustomizeColumnClass2||null===(_CustomizeColumnClass3=_CustomizeColumnClass2.docs)||void 0===_CustomizeColumnClass3?void 0:_CustomizeColumnClass3.source)})}),CustomizeColumnStyle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnStyle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnStyle=CustomizeColumnStyle.parameters)||void 0===_CustomizeColumnStyle?void 0:_CustomizeColumnStyle.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column style\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2',\n      footerStyle: {\n        backgroundColor: '#c8e6c9'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3',\n      footerStyle: (column: any, colIndex: number) => {\n        if (colIndex % 2 === 0) {\n          return {\n            backgroundColor: '#81c784'\n          };\n        }\n        return {\n          backgroundColor: '#c8e6c9'\n        };\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1'\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2',\n        footerStyle: {\n          backgroundColor: '#c8e6c9'\n        }\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3',\n        footerStyle: (column, colIndex) => {\n          if (colIndex % 2 === 0) {\n            return {\n              backgroundColor: '#81c784'\n            };\n          }\n          return {\n            backgroundColor: '#c8e6c9'\n          };\n        }\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnStyle2=CustomizeColumnStyle.parameters)||void 0===_CustomizeColumnStyle2||null===(_CustomizeColumnStyle3=_CustomizeColumnStyle2.docs)||void 0===_CustomizeColumnStyle3?void 0:_CustomizeColumnStyle3.source)})}),CustomizeColumnHTMLAttribute.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnHTMLAttribute.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnHTMLA=CustomizeColumnHTMLAttribute.parameters)||void 0===_CustomizeColumnHTMLA?void 0:_CustomizeColumnHTMLA.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column HTML attribute\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1',\n      footerAttrs: {\n        title: 'ID footer column'\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2',\n      footerAttrs: (column: any, colIndex: number) => ({\n        'data-test': `customized data ${colIndex}`\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Product ID',\n        footer: 'Footer 1',\n        footerAttrs: { title: 'ID footer column' }\n      }, {\n        dataField: 'name',\n        text: 'Product Name',\n        footer: 'Footer 2',\n        footerAttrs: (column, colIndex) => ({ 'data-test': \\`customized data \\${colIndex}\\` })\n      }, {\n        dataField: 'price',\n        text: 'Product Price',\n        footer: 'Footer 3'\n      }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnHTMLA2=CustomizeColumnHTMLAttribute.parameters)||void 0===_CustomizeColumnHTMLA2||null===(_CustomizeColumnHTMLA3=_CustomizeColumnHTMLA2.docs)||void 0===_CustomizeColumnHTMLA3?void 0:_CustomizeColumnHTMLA3.source)})}),FooterClass.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},FooterClass.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_FooterClass$paramete=FooterClass.parameters)||void 0===_FooterClass$paramete?void 0:_FooterClass$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Footer class\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [\n        {\n          dataField: 'id',\n          text: 'Product ID',\n          footer: 'Footer 1'\n        },\n        {\n          dataField: 'name',\n          text: 'Product Name',\n          footer: 'Footer 2'\n        },\n        {\n          dataField: 'price',\n          text: 'Product Price',\n          footer: 'Footer 3'\n        }\n      ];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      footerClasses=\"footer-class\"\n    />\n    `,\n    footerClasses: \"footer-class\"\n  }\n}"},null===(_FooterClass$paramete2=FooterClass.parameters)||void 0===_FooterClass$paramete2||null===(_FooterClass$paramete3=_FooterClass$paramete2.docs)||void 0===_FooterClass$paramete3?void 0:_FooterClass$paramete3.source)})});var __namedExportsOrder=["SimpleFooter","FunctionFooter","ColumnFormatter","ColumnAlign","ColumnTitle","ColumnEvent","CustomizeColumnClass","CustomizeColumnStyle","CustomizeColumnHTMLAttribute","FooterClass"]}}]);