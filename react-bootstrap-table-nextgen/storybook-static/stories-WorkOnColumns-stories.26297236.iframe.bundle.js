"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[110],{"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}__webpack_require__.d(__webpack_exports__,{Z:()=>_toConsumableArray})},"./src/stories/WorkOnColumns.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ColumnAlign:()=>ColumnAlign,ColumnEvent:()=>ColumnEvent,ColumnFormatter:()=>ColumnFormatter,ColumnFormatterWithCustomData:()=>ColumnFormatterWithCustomData,ColumnHidden:()=>ColumnHidden,ColumnTitle:()=>ColumnTitle,CustomizeColumnClass:()=>CustomizeColumnClass,CustomizeColumnHTMLAttribute:()=>CustomizeColumnHTMLAttribute,CustomizeColumnStyle:()=>CustomizeColumnStyle,DisplayNestedData:()=>DisplayNestedData,DummyColumn:()=>DummyColumn,RowExpandWithDummyColumn:()=>RowExpandWithDummyColumn,__namedExportsOrder:()=>__namedExportsOrder,default:()=>WorkOnColumns_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),react=__webpack_require__("./node_modules/react/index.js"),common=__webpack_require__("./src/utils/common.ts"),toConsumableArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),classCallCheck=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),createClass=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createClass.js"),inherits=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/inherits.js"),createSuper=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createSuper.js"),lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),ProductList=function(_React$Component){(0,inherits.Z)(ProductList,_React$Component);var _super=(0,createSuper.Z)(ProductList);function ProductList(props){var _this;return(0,classCallCheck.Z)(this,ProductList),(_this=_super.call(this,props)).toggleInStock=function(){var newProducts=(0,toConsumableArray.Z)(_this.state.products);newProducts=newProducts.map((function(d){return 13===d.id?(0,objectSpread2.Z)((0,objectSpread2.Z)({},d),{},{inStock:!d.inStock}):d})),_this.setState((function(curr){return(0,objectSpread2.Z)((0,objectSpread2.Z)({},curr),{},{products:newProducts})}))},_this.counter=function(){_this.setState((function(curr){return(0,objectSpread2.Z)((0,objectSpread2.Z)({},curr),{},{count:_this.state.count+1})}))},_this.state={products:[{id:12,name:"Item 12",price:12.5,inStock:!1},{id:13,name:"Item 13",price:13.5,inStock:!0},{id:14,name:"Item 14",price:14.5,inStock:!0}],count:0},_this}return(0,createClass.Z)(ProductList,[{key:"render",value:function render(){var columns=[{dataField:"id",text:"Product ID",formatter:function formatter(cell,row,rowIndex,extraData){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)("span",{children:["ID: ",row.id]}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsxs)("span",{children:["Counter: ",extraData]})]})},formatExtraData:this.state.count},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price"},{dataField:"inStock",text:"In Stock",formatter:function formatter(cellContent,row){return(0,jsx_runtime.jsx)("div",{className:"checkbox disabled",children:(0,jsx_runtime.jsx)("label",{children:(0,jsx_runtime.jsx)("input",{type:"checkbox",checked:row.inStock,disabled:!0})})})}},{dataField:"df1",isDummyField:!0,text:"Action 1",formatter:function formatter(cellContent,row){return row.inStock?(0,jsx_runtime.jsx)("h5",{children:(0,jsx_runtime.jsx)("span",{className:"label label-success",children:" Available"})}):(0,jsx_runtime.jsx)("h5",{children:(0,jsx_runtime.jsx)("span",{className:"label label-danger",children:" Backordered"})})}},{dataField:"df2",isDummyField:!0,text:"Action 2",formatter:function formatter(cellContent,row){return row.inStock?(0,jsx_runtime.jsx)("h5",{children:(0,jsx_runtime.jsx)("span",{className:"label label-success",children:" Available"})}):(0,jsx_runtime.jsx)("h5",{children:(0,jsx_runtime.jsx)("span",{className:"label label-danger",children:" Backordered"})})}}];return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h3",{children:"Action 1 and Action 2 are dummy column"}),(0,jsx_runtime.jsx)("button",{onClick:this.toggleInStock,className:"btn btn-primary",children:"Toggle item 13 stock status"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-success",onClick:this.counter,children:"Click me to Increase counter"}),(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data:this.state.products,columns}),(0,jsx_runtime.jsx)(code_block.Z,{children:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    class ProductList extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = { products, count: 0 };\n      }\n\n      toggleInStock = () => {\n        let newProducts = [...this.state.products];\n        newProducts = newProducts.map((d) => {\n          if (d.id === 13) {\n            return {\n              ...d,\n              inStock: !d.inStock\n            };\n          }\n          return d;\n        });\n        this.setState(curr => ({ ...curr, products: newProducts }));\n      };\n\n      render() {\n        const columns = [\n          {\n            dataField: 'id',\n            text: 'Product ID',\n            formatter: (cell, row, rowIndex, extraData) => (\n              <div>\n                <span>ID: {row.id}</span>\n                <br />\n                <span>state: {extraData}</span>\n              </div>\n            ),\n            formatExtraData: this.state.count\n          },\n          {\n            dataField: 'name',\n            text: 'Product Name'\n          },\n          {\n            dataField: 'price',\n            text: 'Product Price'\n          },\n          {\n            dataField: 'inStock',\n            text: 'In Stock',\n            formatter: (cellContent, row) => (\n              <div className=\"checkbox disabled\">\n                <label>\n                  <input type=\"checkbox\" checked={ row.inStock } disabled />\n                </label>\n              </div>\n            )\n          },\n          {\n            dataField: 'df1',\n            isDummyField: true,\n            text: 'Action 1',\n            formatter: (cellContent, row) => {\n              if (row.inStock) {\n                return (\n                  <h5>\n                    <span className=\"label label-success\"> Available</span>\n                  </h5>\n                );\n              }\n              return (\n                <h5>\n                  <span className=\"label label-danger\"> Backordered</span>\n                </h5>\n              );\n            }\n          },\n          {\n            dataField: 'df2',\n            isDummyField: true,\n            text: 'Action 2',\n            formatter: (cellContent, row) => {\n              if (row.inStock) {\n                return (\n                  <h5>\n                    <span className=\"label label-success\"> Available</span>\n                  </h5>\n                );\n              }\n              return (\n                <h5>\n                  <span className=\"label label-danger\"> Backordered</span>\n                </h5>\n              );\n            }\n          }\n        ];\n\n        return (\n          <div>\n            <h3>Action 1 and Action 2 are dummy column</h3>\n            <button onClick={ this.toggleInStock } className=\"btn btn-primary\">\n              Toggle item 13 stock status\n            </button>\n            <button\n              className=\"btn btn-success\"\n              onClick={ () => this.setState(() => ({ count: this.state.count + 1 })) }\n            >\n              Click me to Increase counter\n            </button>\n            <BootstrapTable\n              keyField=\"id\"\n              data={ this.state.products }\n              columns={ columns }\n            />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    "})]})}}]),ProductList}(react.Component),DummyColumnWithRowExpand=function(_React$Component2){(0,inherits.Z)(DummyColumnWithRowExpand,_React$Component2);var _super2=(0,createSuper.Z)(DummyColumnWithRowExpand);function DummyColumnWithRowExpand(props){var _this2;return(0,classCallCheck.Z)(this,DummyColumnWithRowExpand),(_this2=_super2.call(this,props)).expandRow={renderer:function renderer(){return(0,jsx_runtime.jsx)("div",{style:{width:"100%",height:"20px"},children:"Content"})},showExpandColumn:!0,expandByColumnOnly:!0},_this2.actionFormater=function(cell,row,rowIndex,_ref){var hoverIdx=_ref.hoverIdx;return null===hoverIdx&&void 0===hoverIdx||hoverIdx!==rowIndex?(0,jsx_runtime.jsx)("div",{style:{width:"20px",height:"20px"}}):(0,jsx_runtime.jsx)("div",{style:{width:"20px",height:"20px",backgroundColor:"orange"}})},_this2.rowEvents={onMouseEnter:function onMouseEnter(e,row,rowIndex){_this2.setState({hoverIdx:rowIndex})},onMouseLeave:function onMouseLeave(){_this2.setState({hoverIdx:null})}},_this2.rowStyle=function(row,rowIndex){row.index=rowIndex;var style={};return style.backgroundColor=rowIndex%2==0?"transparent":"rgba(54, 163, 173, .10)",style.borderTop="none",style},_this2.state={hoverIdx:null},_this2}return(0,createClass.Z)(DummyColumnWithRowExpand,[{key:"render",value:function render(){var columns=[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price"},{isDummyField:!0,text:"",formatter:this.actionFormater,formatExtraData:{hoverIdx:this.state.hoverIdx},headerStyle:{width:"50px"},style:{height:"30px"}}];return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data:(0,common.bG)(),columns,rowStyle:this.rowStyle,rowEvents:this.rowEvents,expandRow:this.expandRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    class DummyColumnWithRowExpand extends React.Component {\n      constructor(props) {\n        super(props);\n\n        this.state = {\n          hoverIdx: null\n        };\n      }\n\n      expandRow = {\n        renderer: () => (\n          <div style={ { width: '100%', height: '20px' } }>Content</div>\n        ),\n        showExpandColumn: true,\n        expandByColumnOnly: true\n      };\n\n      actionFormater = (cell, row, rowIndex, { hoverIdx }) => {\n        if ((hoverIdx !== null || hoverIdx !== undefined) && hoverIdx === rowIndex) {\n          return (\n            <div\n              style={ { width: '20px', height: '20px', backgroundColor: 'orange' } }\n            />\n          );\n        }\n        return (\n          <div\n            style={ { width: '20px', height: '20px' } }\n          />\n        );\n      }\n\n      rowEvents = {\n        onMouseEnter: (e, row, rowIndex) => {\n          this.setState({ hoverIdx: rowIndex });\n        },\n        onMouseLeave: () => {\n          this.setState({ hoverIdx: null });\n        }\n      }\n\n      rowStyle = (row, rowIndex) => {\n        row.index = rowIndex;\n        const style = {};\n        if (rowIndex % 2 === 0) {\n          style.backgroundColor = 'transparent';\n        } else {\n          style.backgroundColor = 'rgba(54, 163, 173, .10)';\n        }\n        style.borderTop = 'none';\n\n        return style;\n      }\n\n      render() {\n        const columns = [{\n          dataField: 'id',\n          text: 'Product ID'\n        }, {\n          dataField: 'name',\n          text: 'Product Name'\n        }, {\n          dataField: 'price',\n          text: 'Product Price'\n        }, {\n          text: '',\n          isDummyField: true,\n          formatter: this.actionFormater,\n          formatExtraData: { hoverIdx: this.state.hoverIdx },\n          headerStyle: { width: '50px' },\n          style: { height: '30px' }\n        }];\n        return (\n          <div>\n            <BootstrapTable\n              keyField=\"id\"\n              data={ products }\n              columns={ columns }\n              noDataIndication=\"There is no data\"\n              classes=\"table\"\n              rowStyle={ this.rowStyle }\n              rowEvents={ this.rowEvents }\n              expandRow={ this.expandRow }\n            />\n          </div>\n        );\n      }\n    }\n    "})]})}}]),DummyColumnWithRowExpand}(react.Component);try{WorkOnColumns.displayName="WorkOnColumns",WorkOnColumns.__docgenInfo={description:"",displayName:"WorkOnColumns",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},bordered:{defaultValue:null,description:"",name:"bordered",required:!0,type:{name:"any"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/WorkOnColumns.tsx#WorkOnColumns"]={docgenInfo:WorkOnColumns.__docgenInfo,name:"WorkOnColumns",path:"src/stories/WorkOnColumns.tsx#WorkOnColumns"})}catch(__react_docgen_typescript_loader_error){}var _DisplayNestedData$pa,_DisplayNestedData$pa2,_DisplayNestedData$pa3,_ColumnFormatter$para,_ColumnFormatter$para2,_ColumnFormatter$para3,_ColumnFormatterWithC,_ColumnFormatterWithC2,_ColumnFormatterWithC3,_ColumnAlign$paramete,_ColumnAlign$paramete2,_ColumnAlign$paramete3,_ColumnTitle$paramete,_ColumnTitle$paramete2,_ColumnTitle$paramete3,_ColumnHidden$paramet,_ColumnHidden$paramet2,_ColumnHidden$paramet3,_ColumnEvent$paramete,_ColumnEvent$paramete2,_ColumnEvent$paramete3,_CustomizeColumnClass,_CustomizeColumnClass2,_CustomizeColumnClass3,_CustomizeColumnStyle,_CustomizeColumnStyle2,_CustomizeColumnStyle3,_CustomizeColumnHTMLA,_CustomizeColumnHTMLA2,_CustomizeColumnHTMLA3,_DummyColumn$paramete,_DummyColumn$paramete2,_DummyColumn$paramete3,_RowExpandWithDummyCo,_RowExpandWithDummyCo2,_RowExpandWithDummyCo3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const WorkOnColumns_stories={title:"Work On Columns",component:function(_ref2){var mode=_ref2.mode,data=_ref2.data,columns=_ref2.columns,sourceCode=_ref2.sourceCode,bordered=_ref2.bordered,header=_ref2.header;switch(mode){case"dummy":return(0,jsx_runtime.jsx)(ProductList,{});case"rowdummy":return(0,jsx_runtime.jsx)(DummyColumnWithRowExpand,{});default:return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,bordered}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"},bordered:{control:"boolean",description:"to have or not to have table border"},header:{control:"text",description:"header of the table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var DisplayNestedData={name:"Display nested data",args:{columns:[{dataField:"id",text:"User ID"},{dataField:"name",text:"User Name"},{dataField:"phone",text:"Phone"},{dataField:"address.city",text:"City"},{dataField:"address.postCode",text:"PostCode"}],data:(0,common.bG)(5,(function(value,index){return{id:index,name:"User Name ".concat(index),phone:21009831+index,address:{city:"New York",postCode:"1111-4512"}}})),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'User ID'\n    }, {\n      dataField: 'name',\n      text: 'User Name'\n    }, {\n      dataField: 'phone',\n      text: 'Phone'\n    }, {\n      dataField: 'address.city',\n      text: 'City'\n    }, {\n      dataField: 'address.postCode',\n      text: 'PostCode'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}};var ColumnFormatter={name:"Column formatter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",formatter:function priceFormatter(cell,row){return row.onSale?(0,jsx_runtime.jsx)("span",{children:(0,jsx_runtime.jsxs)("strong",{style:{color:"red"},children:["$ ",cell," NTD(Sales!!)"]})}):(0,jsx_runtime.jsxs)("span",{children:["$ ",cell," NTD"]})}}],data:(0,common.oj)((0,common.bG)()),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function priceFormatter(cell, row) {\n      if (row.onSale) {\n        return (\n          <span>\n            <strong style={ { color: 'red' } }>$ { cell } NTD(Sales!!)</strong>\n          </span>\n        );\n      }\n\n      return (\n        <span>$ { cell } NTD</span>\n      );\n    }\n\n    const columns = [\n    // omit...\n    {\n      dataField: 'price',\n      text: 'Product Price',\n      formatter: priceFormatter\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    "}};var ColumnFormatterWithCustomData={name:"Column formatter with custom data",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"rank",text:"Rank",formatter:function rankFormatter(cell,row,rowIndex,formatExtraData){return(0,jsx_runtime.jsx)("i",{className:formatExtraData[cell]})},formatExtraData:{up:"glyphicon glyphicon-chevron-up",down:"glyphicon glyphicon-chevron-down"}}],data:(0,common.bG)(5,(function(value,index){return{id:index,name:"User Name ".concat(index),rank:Math.random()<.5?"down":"up"}})),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function rankFormatter(cell, row, rowIndex, formatExtraData) {\n      return (\n        <i className={ formatExtraData[cell] } />\n      );\n    }\n\n    const columns = [\n    // omit...\n    {\n      dataField: 'rank',\n      text: 'Rank',\n      formatter: rankFormatter,\n      formatExtraData: {\n        up: 'glyphicon glyphicon-chevron-up',\n        down: 'glyphicon glyphicon-chevron-down'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      bordered={ false }\n    />\n    ",bordered:!1}},ColumnAlign={name:"Column align",args:{columns:[{dataField:"id",text:"Product ID",align:"center"},{dataField:"name",text:"Product Name",align:function align(cell,row,rowIndex,colIndex){return rowIndex%2==0?"right":"left"}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      align: 'center'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      align: (cell, row, rowIndex, colIndex) => {\n        if (rowIndex % 2 === 0) return 'right';\n        return 'left';\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},ColumnTitle={name:"Column title",args:{columns:[{dataField:"id",text:"Product ID",title:!0},{dataField:"name",text:"Product Name",title:function title(cell,row,rowIndex,colIndex){return"this is custom title for ".concat(cell)}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      title: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      title: (cell, row, rowIndex, colIndex) => `this is custom title for ${cell}`\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Try to hover on any Product Name cells"})}},ColumnHidden={name:"Column hidden",args:{columns:[{dataField:"id",text:"Product ID",hidden:!0},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      hidden: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},ColumnEvent={name:"Column event",args:{columns:[{dataField:"id",text:"Product ID",events:{onClick:function onClick(e,column,columnIndex,row,rowIndex){console.log(e),console.log(column),console.log(columnIndex),console.log(row),console.log(rowIndex),alert("Click on Product ID field")},onMouseEnter:function onMouseEnter(e,column,columnIndex,row,rowIndex){console.log(e),console.log(column),console.log(columnIndex),console.log(row),console.log(rowIndex),console.log("onMouseEnter on Product ID field")}}},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      events: {\n        onClick: (e, column, columnIndex, row, rowIndex) => {\n          console.log(e);\n          console.log(column);\n          console.log(columnIndex);\n          console.log(row);\n          console.log(rowIndex);\n          alert('Click on Product ID field');\n        },\n        onMouseEnter: (e, column, columnIndex, row, rowIndex) => {\n          console.log(e);\n          console.log(column);\n          console.log(columnIndex);\n          console.log(row);\n          console.log(rowIndex);\n          console.log('onMouseEnter on Product ID field');\n        }\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Try to Click or Mouse over on Product ID columns"})}},CustomizeColumnClass={name:"Customize column class",args:{columns:[{dataField:"id",text:"Product ID",classes:"demo-key-row"},{dataField:"name",text:"Product Name",classes:function classes(cell,row,rowIndex,colIndex){return rowIndex%2==0?"demo-row-even":"demo-row-odd"}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      classes: 'demo-key-row'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      classes: (cell, row, rowIndex, colIndex) => {\n        if (rowIndex % 2 === 0) return 'demo-row-even';\n        return 'demo-row-odd';\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},CustomizeColumnStyle={name:"Customize column style",args:{columns:[{dataField:"id",text:"Product ID",style:{fontWeight:"bold",fontSize:"18px"}},{dataField:"name",text:"Product Name",style:function style(cell,row,rowIndex,colIndex){return rowIndex%2==0?{backgroundColor:"#81c784"}:{backgroundColor:"#c8e6c9"}}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      style: {\n        fontWeight: 'bold',\n        fontSize: '18px'\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      style: (cell, row, rowIndex, colIndex) => {\n        if (rowIndex % 2 === 0) {\n          return {\n            backgroundColor: '#81c784'\n          };\n        }\n        return {\n          backgroundColor: '#c8e6c9'\n        };\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "}},CustomizeColumnHTMLAttribute={name:"Customize column HTML attribute",args:{columns:[{dataField:"id",text:"Product ID",attrs:{title:"id column"}},{dataField:"name",text:"Product Name",attrs:function attrs(cell,row,rowIndex,colIndex){return{"data-test":"customized data ".concat(rowIndex)}}},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      attrs: { title: 'id column' }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      attrs: (cell, row, rowIndex, colIndex) => ({ 'data-test': `customized data ${rowIndex}` })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Try to hover on Product ID Cell"})}},DummyColumn={name:"Dummy column",args:{mode:"dummy"}},RowExpandWithDummyColumn={name:"Row expand with dummy column formatter",args:{mode:"rowdummy"}};DisplayNestedData.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DisplayNestedData.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DisplayNestedData$pa=DisplayNestedData.parameters)||void 0===_DisplayNestedData$pa?void 0:_DisplayNestedData$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Display nested data\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'User ID'\n    }, {\n      dataField: 'name',\n      text: 'User Name'\n    }, {\n      dataField: 'phone',\n      text: 'Phone'\n    }, {\n      dataField: 'address.city',\n      text: 'City'\n    }, {\n      dataField: 'address.postCode',\n      text: 'PostCode'\n    }],\n    data: productsGenerator(5, (value: any, index: number) => ({\n      id: index,\n      name: `User Name ${index}`,\n      phone: 21009831 + index,\n      address: {\n        city: 'New York',\n        postCode: '1111-4512'\n      }\n    })),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'User ID'\n    }, {\n      dataField: 'name',\n      text: 'User Name'\n    }, {\n      dataField: 'phone',\n      text: 'Phone'\n    }, {\n      dataField: 'address.city',\n      text: 'City'\n    }, {\n      dataField: 'address.postCode',\n      text: 'PostCode'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_DisplayNestedData$pa2=DisplayNestedData.parameters)||void 0===_DisplayNestedData$pa2||null===(_DisplayNestedData$pa3=_DisplayNestedData$pa2.docs)||void 0===_DisplayNestedData$pa3?void 0:_DisplayNestedData$pa3.source)})}),ColumnFormatter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnFormatter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnFormatter$para=ColumnFormatter.parameters)||void 0===_ColumnFormatter$para?void 0:_ColumnFormatter$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column formatter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      formatter: priceFormatter\n    }],\n    data: withOnSale(productsGenerator()),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function priceFormatter(cell, row) {\n      if (row.onSale) {\n        return (\n          <span>\n            <strong style={ { color: 'red' } }>$ { cell } NTD(Sales!!)</strong>\n          </span>\n        );\n      }\n\n      return (\n        <span>$ { cell } NTD</span>\n      );\n    }\n\n    const columns = [\n    // omit...\n    {\n      dataField: 'price',\n      text: 'Product Price',\n      formatter: priceFormatter\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n    />\n    `\n  }\n}"},null===(_ColumnFormatter$para2=ColumnFormatter.parameters)||void 0===_ColumnFormatter$para2||null===(_ColumnFormatter$para3=_ColumnFormatter$para2.docs)||void 0===_ColumnFormatter$para3?void 0:_ColumnFormatter$para3.source)})}),ColumnFormatterWithCustomData.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnFormatterWithCustomData.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnFormatterWithC=ColumnFormatterWithCustomData.parameters)||void 0===_ColumnFormatterWithC?void 0:_ColumnFormatterWithC.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column formatter with custom data\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'rank',\n      text: 'Rank',\n      formatter: rankFormatter,\n      formatExtraData: {\n        up: 'glyphicon glyphicon-chevron-up',\n        down: 'glyphicon glyphicon-chevron-down'\n      }\n    }],\n    data: productsGenerator(5, (value: any, index: number) => ({\n      id: index,\n      name: `User Name ${index}`,\n      rank: Math.random() < 0.5 ? 'down' : 'up'\n    })),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    function rankFormatter(cell, row, rowIndex, formatExtraData) {\n      return (\n        <i className={ formatExtraData[cell] } />\n      );\n    }\n\n    const columns = [\n    // omit...\n    {\n      dataField: 'rank',\n      text: 'Rank',\n      formatter: rankFormatter,\n      formatExtraData: {\n        up: 'glyphicon glyphicon-chevron-up',\n        down: 'glyphicon glyphicon-chevron-down'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      bordered={ false }\n    />\n    `,\n    bordered: false\n  }\n}"},null===(_ColumnFormatterWithC2=ColumnFormatterWithCustomData.parameters)||void 0===_ColumnFormatterWithC2||null===(_ColumnFormatterWithC3=_ColumnFormatterWithC2.docs)||void 0===_ColumnFormatterWithC3?void 0:_ColumnFormatterWithC3.source)})}),ColumnAlign.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnAlign.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnAlign$paramete=ColumnAlign.parameters)||void 0===_ColumnAlign$paramete?void 0:_ColumnAlign$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column align\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      align: 'center'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      align: (cell: any, row: any, rowIndex: number, colIndex: any) => {\n        if (rowIndex % 2 === 0) return 'right';\n        return 'left';\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      align: 'center'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      align: (cell, row, rowIndex, colIndex) => {\n        if (rowIndex % 2 === 0) return 'right';\n        return 'left';\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_ColumnAlign$paramete2=ColumnAlign.parameters)||void 0===_ColumnAlign$paramete2||null===(_ColumnAlign$paramete3=_ColumnAlign$paramete2.docs)||void 0===_ColumnAlign$paramete3?void 0:_ColumnAlign$paramete3.source)})}),ColumnTitle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnTitle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnTitle$paramete=ColumnTitle.parameters)||void 0===_ColumnTitle$paramete?void 0:_ColumnTitle$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column title\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      title: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      title: (cell: number, row: any, rowIndex: any, colIndex: any) => `this is custom title for ${cell}`\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      title: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      title: (cell, row, rowIndex, colIndex) => \\`this is custom title for \\${cell}\\`\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `,\n    header: <h3>Try to hover on any Product Name cells</h3>\n  }\n}"},null===(_ColumnTitle$paramete2=ColumnTitle.parameters)||void 0===_ColumnTitle$paramete2||null===(_ColumnTitle$paramete3=_ColumnTitle$paramete2.docs)||void 0===_ColumnTitle$paramete3?void 0:_ColumnTitle$paramete3.source)})}),ColumnHidden.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnHidden.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnHidden$paramet=ColumnHidden.parameters)||void 0===_ColumnHidden$paramet?void 0:_ColumnHidden$paramet.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column hidden\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      hidden: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      hidden: true\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_ColumnHidden$paramet2=ColumnHidden.parameters)||void 0===_ColumnHidden$paramet2||null===(_ColumnHidden$paramet3=_ColumnHidden$paramet2.docs)||void 0===_ColumnHidden$paramet3?void 0:_ColumnHidden$paramet3.source)})}),ColumnEvent.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnEvent.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnEvent$paramete=ColumnEvent.parameters)||void 0===_ColumnEvent$paramete?void 0:_ColumnEvent$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column event\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      events: {\n        onClick: (e: any, column: any, columnIndex: number, row: any, rowIndex: number) => {\n          console.log(e);\n          console.log(column);\n          console.log(columnIndex);\n          console.log(row);\n          console.log(rowIndex);\n          alert('Click on Product ID field');\n        },\n        onMouseEnter: (e: any, column: any, columnIndex: number, row: any, rowIndex: number) => {\n          console.log(e);\n          console.log(column);\n          console.log(columnIndex);\n          console.log(row);\n          console.log(rowIndex);\n          console.log('onMouseEnter on Product ID field');\n        }\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      events: {\n        onClick: (e, column, columnIndex, row, rowIndex) => {\n          console.log(e);\n          console.log(column);\n          console.log(columnIndex);\n          console.log(row);\n          console.log(rowIndex);\n          alert('Click on Product ID field');\n        },\n        onMouseEnter: (e, column, columnIndex, row, rowIndex) => {\n          console.log(e);\n          console.log(column);\n          console.log(columnIndex);\n          console.log(row);\n          console.log(rowIndex);\n          console.log('onMouseEnter on Product ID field');\n        }\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `,\n    header: <h3>Try to Click or Mouse over on Product ID columns</h3>\n  }\n}"},null===(_ColumnEvent$paramete2=ColumnEvent.parameters)||void 0===_ColumnEvent$paramete2||null===(_ColumnEvent$paramete3=_ColumnEvent$paramete2.docs)||void 0===_ColumnEvent$paramete3?void 0:_ColumnEvent$paramete3.source)})}),CustomizeColumnClass.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnClass.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnClass=CustomizeColumnClass.parameters)||void 0===_CustomizeColumnClass?void 0:_CustomizeColumnClass.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column class\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      classes: 'demo-key-row'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      classes: (cell: any, row: any, rowIndex: number, colIndex: number) => {\n        if (rowIndex % 2 === 0) return 'demo-row-even';\n        return 'demo-row-odd';\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      classes: 'demo-key-row'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      classes: (cell, row, rowIndex, colIndex) => {\n        if (rowIndex % 2 === 0) return 'demo-row-even';\n        return 'demo-row-odd';\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnClass2=CustomizeColumnClass.parameters)||void 0===_CustomizeColumnClass2||null===(_CustomizeColumnClass3=_CustomizeColumnClass2.docs)||void 0===_CustomizeColumnClass3?void 0:_CustomizeColumnClass3.source)})}),CustomizeColumnStyle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnStyle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnStyle=CustomizeColumnStyle.parameters)||void 0===_CustomizeColumnStyle?void 0:_CustomizeColumnStyle.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column style\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      style: {\n        fontWeight: 'bold',\n        fontSize: '18px'\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      style: (cell, row, rowIndex, colIndex) => {\n        if (rowIndex % 2 === 0) {\n          return {\n            backgroundColor: '#81c784'\n          };\n        }\n        return {\n          backgroundColor: '#c8e6c9'\n        };\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      style: {\n        fontWeight: 'bold',\n        fontSize: '18px'\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      style: (cell, row, rowIndex, colIndex) => {\n        if (rowIndex % 2 === 0) {\n          return {\n            backgroundColor: '#81c784'\n          };\n        }\n        return {\n          backgroundColor: '#c8e6c9'\n        };\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `\n  }\n}"},null===(_CustomizeColumnStyle2=CustomizeColumnStyle.parameters)||void 0===_CustomizeColumnStyle2||null===(_CustomizeColumnStyle3=_CustomizeColumnStyle2.docs)||void 0===_CustomizeColumnStyle3?void 0:_CustomizeColumnStyle3.source)})}),CustomizeColumnHTMLAttribute.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomizeColumnHTMLAttribute.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomizeColumnHTMLA=CustomizeColumnHTMLAttribute.parameters)||void 0===_CustomizeColumnHTMLA?void 0:_CustomizeColumnHTMLA.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Customize column HTML attribute\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      attrs: {\n        title: 'id column'\n      }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      attrs: (cell: any, row: any, rowIndex: number, colIndex: any) => ({\n        'data-test': `customized data ${rowIndex}`\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      attrs: { title: 'id column' }\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      attrs: (cell, row, rowIndex, colIndex) => ({ 'data-test': \\`customized data \\${rowIndex}\\` })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    `,\n    header: <h3>Try to hover on Product ID Cell</h3>\n  }\n}"},null===(_CustomizeColumnHTMLA2=CustomizeColumnHTMLAttribute.parameters)||void 0===_CustomizeColumnHTMLA2||null===(_CustomizeColumnHTMLA3=_CustomizeColumnHTMLA2.docs)||void 0===_CustomizeColumnHTMLA3?void 0:_CustomizeColumnHTMLA3.source)})}),DummyColumn.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DummyColumn.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DummyColumn$paramete=DummyColumn.parameters)||void 0===_DummyColumn$paramete?void 0:_DummyColumn$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Dummy column",\n  args: {\n    mode: "dummy"\n  }\n}'},null===(_DummyColumn$paramete2=DummyColumn.parameters)||void 0===_DummyColumn$paramete2||null===(_DummyColumn$paramete3=_DummyColumn$paramete2.docs)||void 0===_DummyColumn$paramete3?void 0:_DummyColumn$paramete3.source)})}),RowExpandWithDummyColumn.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},RowExpandWithDummyColumn.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_RowExpandWithDummyCo=RowExpandWithDummyColumn.parameters)||void 0===_RowExpandWithDummyCo?void 0:_RowExpandWithDummyCo.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Row expand with dummy column formatter",\n  args: {\n    mode: "rowdummy"\n  }\n}'},null===(_RowExpandWithDummyCo2=RowExpandWithDummyColumn.parameters)||void 0===_RowExpandWithDummyCo2||null===(_RowExpandWithDummyCo3=_RowExpandWithDummyCo2.docs)||void 0===_RowExpandWithDummyCo3?void 0:_RowExpandWithDummyCo3.source)})});var __namedExportsOrder=["DisplayNestedData","ColumnFormatter","ColumnFormatterWithCustomData","ColumnAlign","ColumnTitle","ColumnHidden","ColumnEvent","CustomizeColumnClass","CustomizeColumnStyle","CustomizeColumnHTMLAttribute","DummyColumn","RowExpandWithDummyColumn"]}}]);