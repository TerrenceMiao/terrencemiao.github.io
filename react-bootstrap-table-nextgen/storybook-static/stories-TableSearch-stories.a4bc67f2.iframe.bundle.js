"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[241],{"./src/stories/TableSearch.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicSearchTable:()=>BasicSearchTable,ClearSearchButton:()=>TableSearch_stories_ClearSearchButton,CustomMatchFunction:()=>CustomMatchFunction,CustomSearchValue:()=>CustomSearchValue,DefaultCustomSearch:()=>DefaultCustomSearch,DefaultSearchButton:()=>DefaultSearchButton,FullyCustomSearch:()=>FullyCustomSearch,SearchFormattedValue:()=>SearchFormattedValue,SearchHooks:()=>SearchHooks,SearchableColumn:()=>SearchableColumn,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TableSearch_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),common=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./src/utils/common.ts")),lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),react_bootstrap_table_nextgen_toolkit_lib=__webpack_require__("../react-bootstrap-table-nextgen-toolkit/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),SearchBar=react_bootstrap_table_nextgen_toolkit_lib.ol.SearchBar,ClearSearchButton=react_bootstrap_table_nextgen_toolkit_lib.ol.ClearSearchButton;try{TableSearch.displayName="TableSearch",TableSearch.__docgenInfo={description:"",displayName:"TableSearch",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/TableSearch.tsx#TableSearch"]={docgenInfo:TableSearch.__docgenInfo,name:"TableSearch",path:"src/stories/TableSearch.tsx#TableSearch"})}catch(__react_docgen_typescript_loader_error){}var _BasicSearchTable$par,_BasicSearchTable$par2,_BasicSearchTable$par3,_ClearSearchButton$pa,_ClearSearchButton$pa2,_ClearSearchButton$pa3,_DefaultSearchButton$,_DefaultSearchButton$2,_DefaultSearchButton$3,_DefaultCustomSearch$,_DefaultCustomSearch$2,_DefaultCustomSearch$3,_SearchHooks$paramete,_SearchHooks$paramete2,_SearchHooks$paramete3,_SearchableColumn$par,_SearchableColumn$par2,_SearchableColumn$par3,_FullyCustomSearch$pa,_FullyCustomSearch$pa2,_FullyCustomSearch$pa3,_SearchFormattedValue,_SearchFormattedValue2,_SearchFormattedValue3,_CustomSearchValue$pa,_CustomSearchValue$pa2,_CustomSearchValue$pa3,_CustomMatchFunction$,_CustomMatchFunction$2,_CustomMatchFunction$3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const TableSearch_stories={title:"Table Search",component:function(_ref){var mode=_ref.mode,data=_ref.data,columns=_ref.columns,sourceCode=_ref.sourceCode,header=_ref.header;switch(mode){case"function":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h1",{children:"Custom a search match function by startWith instead of contain"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:{onColumnMatch:function customMatchFunc(_ref2){var searchText=_ref2.searchText,value=_ref2.value;_ref2.column,_ref2.row;return void 0!==value&&"".concat(value).toLowerCase().startsWith(searchText.toLowerCase())}},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"formatted":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:{searchFormatted:!0},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"fully":var MySearch=function MySearch(props){var input;return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{className:"form-control",style:{backgroundColor:"pink"},ref:function ref(n){return input=n},type:"text"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-warning",onClick:function handleClick(){props.onSearch(input.value)},children:"Click to Search!!"})]})};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps)),(0,jsx_runtime.jsx)(MySearch,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)("br",{})]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"hooks":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:{afterSearch:function afterSearch(newResult){console.log(newResult)}},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"custom":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.searchProps),{},{className:"custome-search-field",style:{color:"white"},delay:1e3,placeholder:"Search Something!!!"})),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"default":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:{defaultSearch:"2101"},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"clear":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)(ClearSearchButton,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});default:return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,search:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"},header:{control:"text",description:"header of table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var BasicSearchTable={name:"Basic search table",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Input something at below input field:"})}},TableSearch_stories_ClearSearchButton={name:"Clear search button",args:{mode:"clear",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar, ClearSearchButton } = Search;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <ClearSearchButton { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Input something at below input field:"})}},DefaultSearchButton={name:"Default search table",args:{mode:"default",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search={ { defaultSearch: '2101' } }\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Input something at below input field:"})}},DefaultCustomSearch={name:"Default custom search",args:{mode:"custom",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar\n              { ...props.searchProps }\n              className=\"custome-search-field\"\n              style={ { color: 'white' } }\n              delay={ 1000 }\n              placeholder=\"Search Something!!!\"\n            />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Input something at below input field:"})}},SearchHooks={name:"Search hooks",args:{mode:"hooks",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const afterSearch = (newResult) => {\n      console.log(newResult);\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search={ { afterSearch } }\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Input something at below input field:"})}},SearchableColumn={name:"Searchable column",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",searchable:!1},{dataField:"price",text:"Product Price",searchable:!1}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      searchable: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      searchable: false\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Column name and price is unsearchable"})}},FullyCustomSearch={name:"Fully custom search",args:{mode:"fully",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const MySearch = (props) => {\n      let input;\n      const handleClick = () => {\n        props.onSearch(input.value);\n      };\n      return (\n        <div>\n          <input\n            className=\"form-control\"\n            style={ { backgroundColor: 'pink' } }\n            ref={ n => input = n }\n            type=\"text\"\n          />\n          <button className=\"btn btn-warning\" onClick={ handleClick }>Click to Search!!</button>\n        </div>\n      );\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n            <MySearch { ...props.searchProps } />\n            <br />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},SearchFormattedValue={name:"Search formatted value",args:{mode:"formatted",columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",formatter:function formatter(cell){return"USD ".concat(cell)}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      formatter: cell => `USD ${cell}`  // we will search the data after formatted\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search={ { searchFormatted: true } }\n    >\n      {\n        props => (\n          <div>\n            <h3>Try to Search USD at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Try to Search USD at below input field:"})}},owners=["Allen","Bob","Cat"],types=["Cloud Service","Message Service","Add Service","Edit Service","Money"],CustomSearchValue={name:"Custom search value",args:{columns:[{dataField:"id",text:"Job ID",searchable:!1,hidden:!0},{dataField:"owner",text:"Job Owner",formatter:function formatter(cell,row){return owners[cell]},filterValue:function filterValue(cell,row){return owners[cell]}},{dataField:"type",text:"Job Type",formatter:function formatter(cell,row){return types[cell]},filterValue:function filterValue(cell,row){return types[cell]}}],data:(0,common.A9)(5),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const owners = ['Allen', 'Bob', 'Cat'];\n    const types = ['Cloud Service', 'Message Service', 'Add Service', 'Edit Service', 'Money'];\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID',\n      searchable: false,\n      hidden: true\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner',\n      formatter: (cell, row) => owners[cell],\n      filterValue: (cell, row) => owners[cell] // we will search the value after filterValue called\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      formatter: (cell, row) => types[cell],\n      filterValue: (cell, row) => types[cell] // we will search the value after filterValue called\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Try to Search Bob, Cat or Allen instead of 0, 1 or 2</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Try to Search Bob, Cat or Allen instead of 0, 1 or 2"})}},CustomMatchFunction={name:"Custom match function",args:{mode:"function",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    // Implement startWith instead of contain\n    function customMatchFunc({\n      searchText,\n      value,\n      column,\n      row\n    }) {\n      if (typeof value !== 'undefined') {\n        return value.startsWith(searchText);\n      }\n      return false;\n    }\n\n    export default () => (\n      <div>\n        <ToolkitProvider\n          keyField=\"id\"\n          data={ products }\n          columns={ columns }\n          search={ { customMatchFunc } }\n        >\n          {\n            props => (\n              <div>\n                <h3>Input something at below input field:</h3>\n                <SearchBar { ...props.searchProps } />\n                <hr />\n                <BootstrapTable\n                  { ...props.baseProps }\n                />\n              </div>\n            )\n          }\n        </ToolkitProvider>\n        <Code>{ sourceCode }</Code>\n      </div>\n    );\n    ",header:(0,jsx_runtime.jsx)("h3",{children:"Input something at below input field:"})}};BasicSearchTable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},BasicSearchTable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_BasicSearchTable$par=BasicSearchTable.parameters)||void 0===_BasicSearchTable$par?void 0:_BasicSearchTable$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Basic search table\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Input something at below input field:</h3>\n  }\n}"},null===(_BasicSearchTable$par2=BasicSearchTable.parameters)||void 0===_BasicSearchTable$par2||null===(_BasicSearchTable$par3=_BasicSearchTable$par2.docs)||void 0===_BasicSearchTable$par3?void 0:_BasicSearchTable$par3.source)})}),TableSearch_stories_ClearSearchButton.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TableSearch_stories_ClearSearchButton.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ClearSearchButton$pa=TableSearch_stories_ClearSearchButton.parameters)||void 0===_ClearSearchButton$pa?void 0:_ClearSearchButton$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Clear search button\",\n  args: {\n    mode: \"clear\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar, ClearSearchButton } = Search;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <ClearSearchButton { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Input something at below input field:</h3>\n  }\n}"},null===(_ClearSearchButton$pa2=TableSearch_stories_ClearSearchButton.parameters)||void 0===_ClearSearchButton$pa2||null===(_ClearSearchButton$pa3=_ClearSearchButton$pa2.docs)||void 0===_ClearSearchButton$pa3?void 0:_ClearSearchButton$pa3.source)})}),DefaultSearchButton.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DefaultSearchButton.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DefaultSearchButton$=DefaultSearchButton.parameters)||void 0===_DefaultSearchButton$?void 0:_DefaultSearchButton$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Default search table\",\n  args: {\n    mode: \"default\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search={ { defaultSearch: '2101' } }\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Input something at below input field:</h3>\n  }\n}"},null===(_DefaultSearchButton$2=DefaultSearchButton.parameters)||void 0===_DefaultSearchButton$2||null===(_DefaultSearchButton$3=_DefaultSearchButton$2.docs)||void 0===_DefaultSearchButton$3?void 0:_DefaultSearchButton$3.source)})}),DefaultCustomSearch.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DefaultCustomSearch.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DefaultCustomSearch$=DefaultCustomSearch.parameters)||void 0===_DefaultCustomSearch$?void 0:_DefaultCustomSearch$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Default custom search\",\n  args: {\n    mode: \"custom\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar\n              { ...props.searchProps }\n              className=\"custome-search-field\"\n              style={ { color: 'white' } }\n              delay={ 1000 }\n              placeholder=\"Search Something!!!\"\n            />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Input something at below input field:</h3>\n  }\n}"},null===(_DefaultCustomSearch$2=DefaultCustomSearch.parameters)||void 0===_DefaultCustomSearch$2||null===(_DefaultCustomSearch$3=_DefaultCustomSearch$2.docs)||void 0===_DefaultCustomSearch$3?void 0:_DefaultCustomSearch$3.source)})}),SearchHooks.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SearchHooks.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SearchHooks$paramete=SearchHooks.parameters)||void 0===_SearchHooks$paramete?void 0:_SearchHooks$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Search hooks\",\n  args: {\n    mode: \"hooks\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const afterSearch = (newResult) => {\n      console.log(newResult);\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search={ { afterSearch } }\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Input something at below input field:</h3>\n  }\n}"},null===(_SearchHooks$paramete2=SearchHooks.parameters)||void 0===_SearchHooks$paramete2||null===(_SearchHooks$paramete3=_SearchHooks$paramete2.docs)||void 0===_SearchHooks$paramete3?void 0:_SearchHooks$paramete3.source)})}),SearchableColumn.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SearchableColumn.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SearchableColumn$par=SearchableColumn.parameters)||void 0===_SearchableColumn$par?void 0:_SearchableColumn$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Searchable column\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      searchable: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      searchable: false\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      searchable: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      searchable: false\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Input something at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Column name and price is unsearchable</h3>\n  }\n}"},null===(_SearchableColumn$par2=SearchableColumn.parameters)||void 0===_SearchableColumn$par2||null===(_SearchableColumn$par3=_SearchableColumn$par2.docs)||void 0===_SearchableColumn$par3?void 0:_SearchableColumn$par3.source)})}),FullyCustomSearch.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},FullyCustomSearch.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_FullyCustomSearch$pa=FullyCustomSearch.parameters)||void 0===_FullyCustomSearch$pa?void 0:_FullyCustomSearch$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Fully custom search\",\n  args: {\n    mode: \"fully\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const MySearch = (props) => {\n      let input;\n      const handleClick = () => {\n        props.onSearch(input.value);\n      };\n      return (\n        <div>\n          <input\n            className=\"form-control\"\n            style={ { backgroundColor: 'pink' } }\n            ref={ n => input = n }\n            type=\"text\"\n          />\n          <button className=\"btn btn-warning\" onClick={ handleClick }>Click to Search!!</button>\n        </div>\n      );\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n            <MySearch { ...props.searchProps } />\n            <br />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_FullyCustomSearch$pa2=FullyCustomSearch.parameters)||void 0===_FullyCustomSearch$pa2||null===(_FullyCustomSearch$pa3=_FullyCustomSearch$pa2.docs)||void 0===_FullyCustomSearch$pa3?void 0:_FullyCustomSearch$pa3.source)})}),SearchFormattedValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SearchFormattedValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SearchFormattedValue=SearchFormattedValue.parameters)||void 0===_SearchFormattedValue?void 0:_SearchFormattedValue.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Search formatted value\",\n  args: {\n    mode: \"formatted\",\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      formatter: (cell: any) => `USD ${cell}`\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      formatter: cell => \\`USD \\${cell}\\`  // we will search the data after formatted\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search={ { searchFormatted: true } }\n    >\n      {\n        props => (\n          <div>\n            <h3>Try to Search USD at below input field:</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Try to Search USD at below input field:</h3>\n  }\n}"},null===(_SearchFormattedValue2=SearchFormattedValue.parameters)||void 0===_SearchFormattedValue2||null===(_SearchFormattedValue3=_SearchFormattedValue2.docs)||void 0===_SearchFormattedValue3?void 0:_SearchFormattedValue3.source)})}),CustomSearchValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomSearchValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomSearchValue$pa=CustomSearchValue.parameters)||void 0===_CustomSearchValue$pa?void 0:_CustomSearchValue$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom search value\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Job ID',\n      searchable: false,\n      hidden: true\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner',\n      formatter: (cell: any, row: any) => owners[cell],\n      filterValue: (cell: any, row: any) => owners[cell] // we will search the value after filterValue called\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      formatter: (cell: any, row: any) => types[cell],\n      filterValue: (cell: any, row: any) => types[cell] // we will search the value after filterValue called\n    }],\n\n    data: jobsGenerator1(5),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const owners = ['Allen', 'Bob', 'Cat'];\n    const types = ['Cloud Service', 'Message Service', 'Add Service', 'Edit Service', 'Money'];\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID',\n      searchable: false,\n      hidden: true\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner',\n      formatter: (cell, row) => owners[cell],\n      filterValue: (cell, row) => owners[cell] // we will search the value after filterValue called\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      formatter: (cell, row) => types[cell],\n      filterValue: (cell, row) => types[cell] // we will search the value after filterValue called\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      search\n    >\n      {\n        props => (\n          <div>\n            <h3>Try to Search Bob, Cat or Allen instead of 0, 1 or 2</h3>\n            <SearchBar { ...props.searchProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `,\n    header: <h3>Try to Search Bob, Cat or Allen instead of 0, 1 or 2</h3>\n  }\n}"},null===(_CustomSearchValue$pa2=CustomSearchValue.parameters)||void 0===_CustomSearchValue$pa2||null===(_CustomSearchValue$pa3=_CustomSearchValue$pa2.docs)||void 0===_CustomSearchValue$pa3?void 0:_CustomSearchValue$pa3.source)})}),CustomMatchFunction.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomMatchFunction.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomMatchFunction$=CustomMatchFunction.parameters)||void 0===_CustomMatchFunction$?void 0:_CustomMatchFunction$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom match function\",\n  args: {\n    mode: \"function\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { Search } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { SearchBar } = Search;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    // Implement startWith instead of contain\n    function customMatchFunc({\n      searchText,\n      value,\n      column,\n      row\n    }) {\n      if (typeof value !== 'undefined') {\n        return value.startsWith(searchText);\n      }\n      return false;\n    }\n\n    export default () => (\n      <div>\n        <ToolkitProvider\n          keyField=\"id\"\n          data={ products }\n          columns={ columns }\n          search={ { customMatchFunc } }\n        >\n          {\n            props => (\n              <div>\n                <h3>Input something at below input field:</h3>\n                <SearchBar { ...props.searchProps } />\n                <hr />\n                <BootstrapTable\n                  { ...props.baseProps }\n                />\n              </div>\n            )\n          }\n        </ToolkitProvider>\n        <Code>{ sourceCode }</Code>\n      </div>\n    );\n    `,\n    header: <h3>Input something at below input field:</h3>\n  }\n}"},null===(_CustomMatchFunction$2=CustomMatchFunction.parameters)||void 0===_CustomMatchFunction$2||null===(_CustomMatchFunction$3=_CustomMatchFunction$2.docs)||void 0===_CustomMatchFunction$3?void 0:_CustomMatchFunction$3.source)})});var __namedExportsOrder=["BasicSearchTable","ClearSearchButton","DefaultSearchButton","DefaultCustomSearch","SearchHooks","SearchableColumn","FullyCustomSearch","SearchFormattedValue","CustomSearchValue","CustomMatchFunction"]}}]);