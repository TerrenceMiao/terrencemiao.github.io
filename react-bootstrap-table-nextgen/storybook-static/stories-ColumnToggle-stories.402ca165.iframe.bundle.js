"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[84],{"./src/stories/ColumnToggle.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicColumnToggle:()=>BasicColumnToggle,ColumnToggleWithFilter:()=>ColumnToggleWithFilter,CustomColumnToggle:()=>CustomColumnToggle,DefaultVisibility:()=>DefaultVisibility,StylingColumnToggle:()=>StylingColumnToggle,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ColumnToggle_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),lib=__webpack_require__("../react-bootstrap-table-nextgen-filter/lib/index.js"),common=__webpack_require__("./src/utils/common.ts"),react_bootstrap_table_nextgen_lib=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js")),react_bootstrap_table_nextgen_toolkit_lib=__webpack_require__("../react-bootstrap-table-nextgen-toolkit/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),ToggleList=react_bootstrap_table_nextgen_toolkit_lib.m.ToggleList;try{ColumnToggle.displayName="ColumnToggle",ColumnToggle.__docgenInfo={description:"",displayName:"ColumnToggle",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/ColumnToggle.tsx#ColumnToggle"]={docgenInfo:ColumnToggle.__docgenInfo,name:"ColumnToggle",path:"src/stories/ColumnToggle.tsx#ColumnToggle"})}catch(__react_docgen_typescript_loader_error){}var _BasicColumnToggle$pa,_BasicColumnToggle$pa2,_BasicColumnToggle$pa3,_DefaultVisibility$pa,_DefaultVisibility$pa2,_DefaultVisibility$pa3,_StylingColumnToggle$,_StylingColumnToggle$2,_StylingColumnToggle$3,_CustomColumnToggle$p,_CustomColumnToggle$p2,_CustomColumnToggle$p3,_ColumnToggleWithFilt,_ColumnToggleWithFilt2,_ColumnToggleWithFilt3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const ColumnToggle_stories={title:"Column Toggle",component:function(_ref){var mode=_ref.mode,data=_ref.data,columns=_ref.columns,sourceCode=_ref.sourceCode;switch(mode){case"filter":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h3",{children:"Table will keep the filter/sort state when column toggle"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,columnToggle:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ToggleList,(0,objectSpread2.Z)({},props.columnToggleProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.baseProps),{},{filter:(0,lib.default)()}))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"custom":var CustomToggleList=function CustomToggleList(_ref2){var columns=_ref2.columns,onColumnToggle=_ref2.onColumnToggle,toggles=_ref2.toggles;return(0,jsx_runtime.jsx)("div",{className:"btn-group btn-group-toggle btn-group-vertical","data-toggle":"buttons",children:columns.map((function(column){return(0,objectSpread2.Z)((0,objectSpread2.Z)({},column),{},{toggle:toggles[column.dataField]})})).map((function(column){return(0,jsx_runtime.jsx)("button",{type:"button",className:"btn btn-warning ".concat(column.toggle?"active":""),"data-toggle":"button","aria-pressed":column.toggle?"true":"false",onClick:function onClick(){return onColumnToggle(column.dataField)},children:column.text},column.dataField)}))})};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,columnToggle:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(CustomToggleList,(0,objectSpread2.Z)({},props.columnToggleProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"styling":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,columnToggle:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ToggleList,(0,objectSpread2.Z)({contextual:"success",className:"list-custom-class",btnClassName:"list-btn-custom-class"},props.columnToggleProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});default:return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,columnToggle:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ToggleList,(0,objectSpread2.Z)({},props.columnToggleProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var BasicColumnToggle={name:"Basic column toggle",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},DefaultVisibility={name:"Default visibility",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",hidden:!0},{dataField:"price",text:"Product Price",hidden:!0}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      hidden: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      hidden: true\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},StylingColumnToggle={name:"Styling column toggle",args:{mode:"styling",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList\n              contextual=\"success\"\n              className=\"list-custom-class\"\n              btnClassName=\"list-btn-custom-class\"\n              { ...props.columnToggleProps }\n            />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},CustomColumnToggle={name:"Custom column toggle",args:{mode:"custom",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const CustomToggleList = ({\n      columns,\n      onColumnToggle,\n      toggles\n    }) => (\n      <div className=\"btn-group btn-group-toggle btn-group-vertical\" data-toggle=\"buttons\">\n        {\n          columns\n            .map(column => ({\n              ...column,\n              toggle: toggles[column.dataField]\n            }))\n            .map(column => (\n              <button\n                type=\"button\"\n                key={ column.dataField }\n                className={ `btn btn-warning ${column.toggle ? 'active' : ''}` }\n                data-toggle=\"button\"\n                aria-pressed={ column.toggle ? 'true' : 'false' }\n                onClick={ () => onColumnToggle(column.dataField) }\n              >\n                { column.text }\n              </button>\n            ))\n        }\n      </div>\n    );\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columnsdt }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <CustomToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},ColumnToggleWithFilter={name:"Column toggle with filter",args:{mode:"filter",columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",sort:!0,filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",sort:!0,filter:(0,lib.textFilter)()}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true,\n      filter: textFilter()\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n              filter={ filterFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}};BasicColumnToggle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},BasicColumnToggle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_BasicColumnToggle$pa=BasicColumnToggle.parameters)||void 0===_BasicColumnToggle$pa?void 0:_BasicColumnToggle$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Basic column toggle\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_BasicColumnToggle$pa2=BasicColumnToggle.parameters)||void 0===_BasicColumnToggle$pa2||null===(_BasicColumnToggle$pa3=_BasicColumnToggle$pa2.docs)||void 0===_BasicColumnToggle$pa3?void 0:_BasicColumnToggle$pa3.source)})}),DefaultVisibility.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DefaultVisibility.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DefaultVisibility$pa=DefaultVisibility.parameters)||void 0===_DefaultVisibility$pa?void 0:_DefaultVisibility$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Default visibility\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      hidden: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      hidden: true\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      hidden: true\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      hidden: true\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_DefaultVisibility$pa2=DefaultVisibility.parameters)||void 0===_DefaultVisibility$pa2||null===(_DefaultVisibility$pa3=_DefaultVisibility$pa2.docs)||void 0===_DefaultVisibility$pa3?void 0:_DefaultVisibility$pa3.source)})}),StylingColumnToggle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},StylingColumnToggle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_StylingColumnToggle$=StylingColumnToggle.parameters)||void 0===_StylingColumnToggle$?void 0:_StylingColumnToggle$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Styling column toggle\",\n  args: {\n    mode: \"styling\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList\n              contextual=\"success\"\n              className=\"list-custom-class\"\n              btnClassName=\"list-btn-custom-class\"\n              { ...props.columnToggleProps }\n            />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_StylingColumnToggle$2=StylingColumnToggle.parameters)||void 0===_StylingColumnToggle$2||null===(_StylingColumnToggle$3=_StylingColumnToggle$2.docs)||void 0===_StylingColumnToggle$3?void 0:_StylingColumnToggle$3.source)})}),CustomColumnToggle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomColumnToggle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomColumnToggle$p=CustomColumnToggle.parameters)||void 0===_CustomColumnToggle$p?void 0:_CustomColumnToggle$p.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom column toggle\",\n  args: {\n    mode: \"custom\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const CustomToggleList = ({\n      columns,\n      onColumnToggle,\n      toggles\n    }) => (\n      <div className=\"btn-group btn-group-toggle btn-group-vertical\" data-toggle=\"buttons\">\n        {\n          columns\n            .map(column => ({\n              ...column,\n              toggle: toggles[column.dataField]\n            }))\n            .map(column => (\n              <button\n                type=\"button\"\n                key={ column.dataField }\n                className={ \\`btn btn-warning \\${column.toggle ? 'active' : ''}\\` }\n                data-toggle=\"button\"\n                aria-pressed={ column.toggle ? 'true' : 'false' }\n                onClick={ () => onColumnToggle(column.dataField) }\n              >\n                { column.text }\n              </button>\n            ))\n        }\n      </div>\n    );\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columnsdt }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <CustomToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_CustomColumnToggle$p2=CustomColumnToggle.parameters)||void 0===_CustomColumnToggle$p2||null===(_CustomColumnToggle$p3=_CustomColumnToggle$p2.docs)||void 0===_CustomColumnToggle$p3?void 0:_CustomColumnToggle$p3.source)})}),ColumnToggleWithFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnToggleWithFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnToggleWithFilt=ColumnToggleWithFilter.parameters)||void 0===_ColumnToggleWithFilt?void 0:_ColumnToggleWithFilt.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column toggle with filter\",\n  args: {\n    mode: \"filter\",\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true,\n      filter: textFilter()\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n    import ToolkitProvider, { ColumnToggle } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ToggleList } = ColumnToggle;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      sort: true,\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      sort: true,\n      filter: textFilter()\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      columnToggle\n    >\n      {\n        props => (\n          <div>\n            <ToggleList { ...props.columnToggleProps } />\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n              filter={ filterFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_ColumnToggleWithFilt2=ColumnToggleWithFilter.parameters)||void 0===_ColumnToggleWithFilt2||null===(_ColumnToggleWithFilt3=_ColumnToggleWithFilt2.docs)||void 0===_ColumnToggleWithFilt3?void 0:_ColumnToggleWithFilt3.source)})});var __namedExportsOrder=["BasicColumnToggle","DefaultVisibility","StylingColumnToggle","CustomColumnToggle","ColumnToggleWithFilter"]}}]);