"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[994],{"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}__webpack_require__.d(__webpack_exports__,{Z:()=>_toConsumableArray})},"./src/stories/RowExpand.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicRowExpand:()=>BasicRowExpand,CustomExpandIndicator:()=>CustomExpandIndicator,CustomExpandingRowClassname:()=>CustomExpandingRowClassname,CustomParentRowClassname:()=>CustomParentRowClassname,ExpandColumnPosition:()=>ExpandColumnPosition,ExpandHooks:()=>ExpandHooks,ExpandIndicator:()=>ExpandIndicator,ExpandManagement:()=>ExpandManagement,ExpandOnlyOneRowAtTheSameTime:()=>ExpandOnlyOneRowAtTheSameTime,NoExpandableRows:()=>NoExpandableRows,OnlyExpandByIndicator:()=>OnlyExpandByIndicator,__namedExportsOrder:()=>__namedExportsOrder,default:()=>RowExpand_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),react=__webpack_require__("./node_modules/react/index.js"),common=__webpack_require__("./src/utils/common.ts"),toConsumableArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),classCallCheck=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),createClass=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createClass.js"),inherits=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/inherits.js"),createSuper=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createSuper.js"),lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),RowExpandManagement=function(_React$Component){(0,inherits.Z)(RowExpandManagement,_React$Component);var _super=(0,createSuper.Z)(RowExpandManagement);function RowExpandManagement(props){var _this;return(0,classCallCheck.Z)(this,RowExpandManagement),(_this=_super.call(this,props)).handleBtnClick=function(){_this.state.expanded.includes(2)?_this.setState((function(){return{expanded:_this.state.expanded.filter((function(x){return 2!==x}))}})):_this.setState((function(){return{expanded:[].concat((0,toConsumableArray.Z)(_this.state.expanded),[2])}}))},_this.handleOnExpand=function(row,isExpand,rowIndex,e){isExpand?_this.setState((function(){return{expanded:[].concat((0,toConsumableArray.Z)(_this.state.expanded),[row.id])}})):_this.setState((function(){return{expanded:_this.state.expanded.filter((function(x){return x!==row.id}))}}))},_this.state={expanded:[0,1]},_this}return(0,createClass.Z)(RowExpandManagement,[{key:"render",value:function render(){var _this$props=this.props,products=_this$props.products,columns=_this$props.columns,expandRow={renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},expanded:this.state.expanded,onExpand:this.handleOnExpand};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{className:"btn btn-success",onClick:this.handleBtnClick,children:"Expand/Collapse 3rd row"}),(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data:products,columns,expandRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    class RowExpandManagment extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = { expanded: [0, 1] };\n      }\n\n      handleBtnClick = () => {\n        if (!this.state.expanded.includes(2)) {\n          this.setState(() => ({\n            expanded: [...this.state.expanded, 2]\n          }));\n        } else {\n          this.setState(() => ({\n            expanded: this.state.expanded.filter(x => x !== 2)\n          }));\n        }\n      }\n\n      handleOnExpand = (row, isExpand, rowIndex, e) => {\n        if (isExpand) {\n          this.setState(() => ({\n            expanded: [...this.state.expanded, row.id]\n          }));\n        } else {\n          this.setState(() => ({\n            expanded: this.state.expanded.filter(x => x !== row.id)\n          }));\n        }\n      }\n\n      render() {\n        const expandRow = {\n          renderer: row => (\n            <div>\n              <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n              <p>You can render anything here, also you can add additional data on every row object</p>\n              <p>expandRow.renderer callback will pass the origin row object to you</p>\n            </div>\n          ),\n          expanded: this.state.expanded,\n          onExpand: this.handleOnExpand\n        };\n        return (\n          <div>\n            <button className=\"btn btn-success\" onClick={ this.handleBtnClick }>Expand/Collapse 3rd row</button>\n            <BootstrapTable keyField=\"id\" data={ products } columns={ columns } expandRow={ expandRow } />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    "})]})}}]),RowExpandManagement}(react.Component);try{RowExpand.displayName="RowExpand",RowExpand.__docgenInfo={description:"",displayName:"RowExpand",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},sourceCode1:{defaultValue:null,description:"",name:"sourceCode1",required:!0,type:{name:"any"}},sourceCode2:{defaultValue:null,description:"",name:"sourceCode2",required:!0,type:{name:"any"}},expandRow:{defaultValue:null,description:"",name:"expandRow",required:!0,type:{name:"any"}},expandRow1:{defaultValue:null,description:"",name:"expandRow1",required:!0,type:{name:"any"}},expandRow2:{defaultValue:null,description:"",name:"expandRow2",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/RowExpand.tsx#RowExpand"]={docgenInfo:RowExpand.__docgenInfo,name:"RowExpand",path:"src/stories/RowExpand.tsx#RowExpand"})}catch(__react_docgen_typescript_loader_error){}var _BasicRowExpand$param,_BasicRowExpand$param2,_BasicRowExpand$param3,_ExpandManagement$par,_ExpandManagement$par2,_ExpandManagement$par3,_NoExpandableRows$par,_NoExpandableRows$par2,_NoExpandableRows$par3,_ExpandIndicator$para,_ExpandIndicator$para2,_ExpandIndicator$para3,_OnlyExpandByIndicato,_OnlyExpandByIndicato2,_OnlyExpandByIndicato3,_ExpandOnlyOneRowAtTh,_ExpandOnlyOneRowAtTh2,_ExpandOnlyOneRowAtTh3,_CustomExpandIndicato,_CustomExpandIndicato2,_CustomExpandIndicato3,_ExpandColumnPosition,_ExpandColumnPosition2,_ExpandColumnPosition3,_ExpandHooks$paramete,_ExpandHooks$paramete2,_ExpandHooks$paramete3,_CustomParentRowClass,_CustomParentRowClass2,_CustomParentRowClass3,_CustomExpandingRowCl,_CustomExpandingRowCl2,_CustomExpandingRowCl3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const RowExpand_stories={title:"Row Expand",component:function(_ref){var mode=_ref.mode,header=_ref.header,data=_ref.data,columns=_ref.columns,sourceCode=_ref.sourceCode,sourceCode1=_ref.sourceCode1,sourceCode2=_ref.sourceCode2,expandRow=_ref.expandRow,expandRow1=_ref.expandRow1,expandRow2=_ref.expandRow2;switch(mode){case"management":return(0,jsx_runtime.jsx)(RowExpandManagement,{products:data,columns});case"style":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,expandRow:expandRow1}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode1}),(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,expandRow:expandRow2}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode2})]});default:return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(lib.default,{keyField:"id",data,columns,expandRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"},sourceCode1:{control:"text",description:"source code of the table"},sourceCode2:{control:"text",description:"source code of the table"},expandRow:{control:"array",description:"row list"},expandRow1:{control:"array",description:"row list"},expandRow2:{control:"array",description:"row list"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var BasicRowExpand={name:"Basic row expand",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{renderer:function renderer(row,rowIndex){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id," and index: ").concat(rowIndex)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})}}}},ExpandManagement={name:"Expand management",args:{columns:common.zF,mode:"management",data:(0,common.qK)()}},NoExpandableRows={name:"No expandable rows",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      nonExpandable: [1, 3]\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0,nonExpandable:[1,3]}}},ExpandIndicator={name:"Expand indicator",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0}}},OnlyExpandByIndicator={name:"Only expand by indicator",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      expandByColumnOnly: true\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0,expandByColumnOnly:!0},header:(0,jsx_runtime.jsx)("h3",{children:"Only able to expand row via clicking expand column (indicator)"})}},ExpandOnlyOneRowAtTheSameTime={name:"Expand only one row at the same time",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      onlyOneExpanding: true,\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{onlyOneExpanding:!0,renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})}}}},CustomExpandIndicator={name:"Custom expand indicator",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      expandHeaderColumnRenderer: ({ isAnyExpands }) => {\n        if (isAnyExpands) {\n          return <b>-</b>;\n        }\n        return <b>+</b>;\n      },\n      expandColumnRenderer: ({ expanded }) => {\n        if (expanded) {\n          return (\n            <b>-</b>\n          );\n        }\n        return (\n          <b>...</b>\n        );\n      }\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0,expandHeaderColumnRenderer:function expandHeaderColumnRenderer(_ref){return _ref.isAnyExpands?(0,jsx_runtime.jsx)("b",{children:"-"}):(0,jsx_runtime.jsx)("b",{children:"+"})},expandColumnRenderer:function expandColumnRenderer(_ref2){var expanded=_ref2.expanded;_ref2.rowKey,_ref2.expandable;return expanded?(0,jsx_runtime.jsx)("b",{children:"-"}):(0,jsx_runtime.jsx)("b",{children:"..."})}}}},ExpandColumnPosition={name:"Expand column position",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      expandColumnPosition: 'right'\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0,expandColumnPosition:"right"}}},ExpandHooks={name:"Expand hooks",args:{columns:common.zF,data:(0,common.qK)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ `This Expand row is belong to rowKey ${row.id}` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      onExpand: (row, isExpand, rowIndex, e) => {\n        console.log(row.id);\n        console.log(isExpand);\n        console.log(rowIndex);\n        console.log(e);\n      },\n      onExpandAll: (isExpandAll, rows, e) => {\n        console.log(isExpandAll);\n        console.log(rows);\n        console.log(e);\n      }\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0,onExpand:function onExpand(row,isExpand,rowIndex,e){console.log(row.id),console.log(isExpand),console.log(rowIndex),console.log(e)},onExpandAll:function onExpandAll(isExpandAll,rows,e){console.log(isExpandAll),console.log(rows),console.log(e)}}}},CustomParentRowClassname={name:"Custom parent row classname",args:{mode:"style",columns:common.zF,data:(0,common.qK)(),sourceCode1:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      parentClassName: 'parent-expand-foo',\n      renderer: row => (\n        <div>.....</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",sourceCode2:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      parentClassName: (isExpanded, row, rowIndex) => {\n        if (rowIndex > 2) return 'parent-expand-foo';\n        return 'parent-expand-bar';\n      },\n      renderer: row => (\n        <div>...</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow1:{parentClassName:"parent-expand-foo",renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})}},expandRow2:{parentClassName:function parentClassName(isExpanded,row,rowIndex){return rowIndex>2?"parent-expand-foo":"parent-expand-bar"},renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})}}}},CustomExpandingRowClassname={name:"Custom expanding row classname",args:{mode:"style",columns:common.zF,data:(0,common.qK)(),sourceCode1:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      className: 'expanding-foo',\n      renderer: row => (\n        <div>.....</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",sourceCode2:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      className: (isExpanded, row, rowIndex) => {\n        if (rowIndex > 2) return 'expanding-foo';\n        return 'expanding-bar';\n      },\n      renderer: row => (\n        <div>...</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    ",expandRow1:{className:"expanding-foo",renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})}},expandRow2:{className:function className(isExpanded,row,rowIndex){return rowIndex>2?"expanding-foo":"expanding-bar"},renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})}}}};BasicRowExpand.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},BasicRowExpand.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_BasicRowExpand$param=BasicRowExpand.parameters)||void 0===_BasicRowExpand$param?void 0:_BasicRowExpand$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Basic row expand\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      renderer: (row: any, rowIndex: number) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id} and index: ${rowIndex}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n    }\n  }\n}"},null===(_BasicRowExpand$param2=BasicRowExpand.parameters)||void 0===_BasicRowExpand$param2||null===(_BasicRowExpand$param3=_BasicRowExpand$param2.docs)||void 0===_BasicRowExpand$param3?void 0:_BasicRowExpand$param3.source)})}),ExpandManagement.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExpandManagement.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExpandManagement$par=ExpandManagement.parameters)||void 0===_ExpandManagement$par?void 0:_ExpandManagement$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:'{\n  name: "Expand management",\n  args: {\n    columns: columns,\n    mode: "management",\n    data: productsExpandRowsGenerator()\n  }\n}'},null===(_ExpandManagement$par2=ExpandManagement.parameters)||void 0===_ExpandManagement$par2||null===(_ExpandManagement$par3=_ExpandManagement$par2.docs)||void 0===_ExpandManagement$par3?void 0:_ExpandManagement$par3.source)})}),NoExpandableRows.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},NoExpandableRows.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_NoExpandableRows$par=NoExpandableRows.parameters)||void 0===_NoExpandableRows$par?void 0:_NoExpandableRows$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"No expandable rows\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      nonExpandable: [1, 3]\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>,\n      showExpandColumn: true,\n      nonExpandable: [1, 3]\n    }\n  }\n}"},null===(_NoExpandableRows$par2=NoExpandableRows.parameters)||void 0===_NoExpandableRows$par2||null===(_NoExpandableRows$par3=_NoExpandableRows$par2.docs)||void 0===_NoExpandableRows$par3?void 0:_NoExpandableRows$par3.source)})}),ExpandIndicator.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExpandIndicator.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExpandIndicator$para=ExpandIndicator.parameters)||void 0===_ExpandIndicator$para?void 0:_ExpandIndicator$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Expand indicator\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>,\n      showExpandColumn: true\n    }\n  }\n}"},null===(_ExpandIndicator$para2=ExpandIndicator.parameters)||void 0===_ExpandIndicator$para2||null===(_ExpandIndicator$para3=_ExpandIndicator$para2.docs)||void 0===_ExpandIndicator$para3?void 0:_ExpandIndicator$para3.source)})}),OnlyExpandByIndicator.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},OnlyExpandByIndicator.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_OnlyExpandByIndicato=OnlyExpandByIndicator.parameters)||void 0===_OnlyExpandByIndicato?void 0:_OnlyExpandByIndicato.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Only expand by indicator\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      expandByColumnOnly: true\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>,\n      showExpandColumn: true,\n      expandByColumnOnly: true\n    },\n    header: <h3>Only able to expand row via clicking expand column (indicator)</h3>\n  }\n}"},null===(_OnlyExpandByIndicato2=OnlyExpandByIndicator.parameters)||void 0===_OnlyExpandByIndicato2||null===(_OnlyExpandByIndicato3=_OnlyExpandByIndicato2.docs)||void 0===_OnlyExpandByIndicato3?void 0:_OnlyExpandByIndicato3.source)})}),ExpandOnlyOneRowAtTheSameTime.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExpandOnlyOneRowAtTheSameTime.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExpandOnlyOneRowAtTh=ExpandOnlyOneRowAtTheSameTime.parameters)||void 0===_ExpandOnlyOneRowAtTh?void 0:_ExpandOnlyOneRowAtTh.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Expand only one row at the same time\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      onlyOneExpanding: true,\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      onlyOneExpanding: true,\n      renderer: row => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n    }\n  }\n}"},null===(_ExpandOnlyOneRowAtTh2=ExpandOnlyOneRowAtTheSameTime.parameters)||void 0===_ExpandOnlyOneRowAtTh2||null===(_ExpandOnlyOneRowAtTh3=_ExpandOnlyOneRowAtTh2.docs)||void 0===_ExpandOnlyOneRowAtTh3?void 0:_ExpandOnlyOneRowAtTh3.source)})}),CustomExpandIndicator.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomExpandIndicator.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomExpandIndicato=CustomExpandIndicator.parameters)||void 0===_CustomExpandIndicato?void 0:_CustomExpandIndicato.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom expand indicator\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      expandHeaderColumnRenderer: ({ isAnyExpands }) => {\n        if (isAnyExpands) {\n          return <b>-</b>;\n        }\n        return <b>+</b>;\n      },\n      expandColumnRenderer: ({ expanded }) => {\n        if (expanded) {\n          return (\n            <b>-</b>\n          );\n        }\n        return (\n          <b>...</b>\n        );\n      }\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>,\n      showExpandColumn: true,\n      expandHeaderColumnRenderer: ({\n        isAnyExpands\n      }) => {\n        if (isAnyExpands) {\n          return <b>-</b>;\n        }\n        return <b>+</b>;\n      },\n      expandColumnRenderer: ({\n        expanded,\n        rowKey,\n        expandable\n      }) => {\n        if (expanded) {\n          return <b>-</b>;\n        }\n        return <b>...</b>;\n      }\n    }\n  }\n}"},null===(_CustomExpandIndicato2=CustomExpandIndicator.parameters)||void 0===_CustomExpandIndicato2||null===(_CustomExpandIndicato3=_CustomExpandIndicato2.docs)||void 0===_CustomExpandIndicato3?void 0:_CustomExpandIndicato3.source)})}),ExpandColumnPosition.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExpandColumnPosition.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExpandColumnPosition=ExpandColumnPosition.parameters)||void 0===_ExpandColumnPosition?void 0:_ExpandColumnPosition.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Expand column position\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      expandColumnPosition: 'right'\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>,\n      showExpandColumn: true,\n      expandColumnPosition: 'right'\n    }\n  }\n}"},null===(_ExpandColumnPosition2=ExpandColumnPosition.parameters)||void 0===_ExpandColumnPosition2||null===(_ExpandColumnPosition3=_ExpandColumnPosition2.docs)||void 0===_ExpandColumnPosition3?void 0:_ExpandColumnPosition3.source)})}),ExpandHooks.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExpandHooks.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExpandHooks$paramete=ExpandHooks.parameters)||void 0===_ExpandHooks$paramete?void 0:_ExpandHooks$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Expand hooks\",\n  args: {\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const expandRow = {\n      renderer: row => (\n        <div>\n          <p>{ \\`This Expand row is belong to rowKey $\\{row.id}\\` }</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n      ),\n      showExpandColumn: true,\n      onExpand: (row, isExpand, rowIndex, e) => {\n        console.log(row.id);\n        console.log(isExpand);\n        console.log(rowIndex);\n        console.log(e);\n      },\n      onExpandAll: (isExpandAll, rows, e) => {\n        console.log(isExpandAll);\n        console.log(rows);\n        console.log(e);\n      }\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>,\n      showExpandColumn: true,\n      onExpand: (row: any, isExpand: boolean, rowIndex: number, e: any) => {\n        console.log(row.id);\n        console.log(isExpand);\n        console.log(rowIndex);\n        console.log(e);\n      },\n      onExpandAll: (isExpandAll: boolean, rows: any, e: any) => {\n        console.log(isExpandAll);\n        console.log(rows);\n        console.log(e);\n      }\n    }\n  }\n}"},null===(_ExpandHooks$paramete2=ExpandHooks.parameters)||void 0===_ExpandHooks$paramete2||null===(_ExpandHooks$paramete3=_ExpandHooks$paramete2.docs)||void 0===_ExpandHooks$paramete3?void 0:_ExpandHooks$paramete3.source)})}),CustomParentRowClassname.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomParentRowClassname.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomParentRowClass=CustomParentRowClassname.parameters)||void 0===_CustomParentRowClass?void 0:_CustomParentRowClass.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom parent row classname\",\n  args: {\n    mode: \"style\",\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode1: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      parentClassName: 'parent-expand-foo',\n      renderer: row => (\n        <div>.....</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    sourceCode2: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      parentClassName: (isExpanded, row, rowIndex) => {\n        if (rowIndex > 2) return 'parent-expand-foo';\n        return 'parent-expand-bar';\n      },\n      renderer: row => (\n        <div>...</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow1: {\n      parentClassName: 'parent-expand-foo',\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n    },\n    expandRow2: {\n      parentClassName: (isExpanded: boolean, row: any, rowIndex: number) => {\n        if (rowIndex > 2) return 'parent-expand-foo';\n        return 'parent-expand-bar';\n      },\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n    }\n  }\n}"},null===(_CustomParentRowClass2=CustomParentRowClassname.parameters)||void 0===_CustomParentRowClass2||null===(_CustomParentRowClass3=_CustomParentRowClass2.docs)||void 0===_CustomParentRowClass3?void 0:_CustomParentRowClass3.source)})}),CustomExpandingRowClassname.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomExpandingRowClassname.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomExpandingRowCl=CustomExpandingRowClassname.parameters)||void 0===_CustomExpandingRowCl?void 0:_CustomExpandingRowCl.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom expanding row classname\",\n  args: {\n    mode: \"style\",\n    columns: columns,\n    data: productsExpandRowsGenerator(),\n    sourceCode1: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      className: 'expanding-foo',\n      renderer: row => (\n        <div>.....</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    sourceCode2: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const columns = // omit...\n\n    const expandRow = {\n      className: (isExpanded, row, rowIndex) => {\n        if (rowIndex > 2) return 'expanding-foo';\n        return 'expanding-bar';\n      },\n      renderer: row => (\n        <div>...</div>\n      )\n    };\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      expandRow={ expandRow }\n    />\n    `,\n    expandRow1: {\n      className: 'expanding-foo',\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n    },\n    expandRow2: {\n      className: (isExpanded: boolean, row: any, rowIndex: number) => {\n        if (rowIndex > 2) return 'expanding-foo';\n        return 'expanding-bar';\n      },\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>\n    }\n  }\n}"},null===(_CustomExpandingRowCl2=CustomExpandingRowClassname.parameters)||void 0===_CustomExpandingRowCl2||null===(_CustomExpandingRowCl3=_CustomExpandingRowCl2.docs)||void 0===_CustomExpandingRowCl3?void 0:_CustomExpandingRowCl3.source)})});var __namedExportsOrder=["BasicRowExpand","ExpandManagement","NoExpandableRows","ExpandIndicator","OnlyExpandByIndicator","ExpandOnlyOneRowAtTheSameTime","CustomExpandIndicator","ExpandColumnPosition","ExpandHooks","CustomParentRowClassname","CustomExpandingRowClassname"]}}]);