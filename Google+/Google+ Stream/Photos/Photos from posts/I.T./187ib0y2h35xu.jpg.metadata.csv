"title","description","url","license","image_views","creation_time.formatted","modification_time.formatted","geo_data.latitude","geo_data.longitude","geo_data_exif.latitude","geo_data_exif.longitude","tags","people.name","people.email","comments.comment","comments.user_id","comments.email","media_key","hex_photo_id","upload_ip","status","liking_user_ids","album_id","exif.camera_make","exif.camera_model","exif.cell_width","exif.cell_length"
"hudson_pipelineview2-1024x534.jpg","Continues Delivery - Build true pipelines with Jenkins

Last few days, I built a pipeline delivery solution for the project, based on open source Jenkins and its vast plugins arsenal.

The goal is after developers checked in their codes, the rest of work in development cycle is ALL in automatic fashion, or out-source to someone else rather than developers themselves.

Using Subversion, Jenkins checks out codes soon after developers commit. Five pipelins show the progress - build, unit test, integration and functional test, code quality insurance wih Sonar, till the last stage deployment which is the only manual step involve human being, no need to be super intelligent, involve in.

At the start of each pipeline build shows SVN revision number. Any test failed, developers can trace down which revision causes the failure, and who did it. This prevents blaming game or dog-fighting among developers.

Both developers and testers watch the pipelines screen. When the drop time or hot fix come in, testers just need to find out which SVN revision they care about, check the pipeline matches this revision number has passed ALL the test, then trigger the deployment button, last stage of the pipeline of each successfully build, input ONLY environment testers want to deploy, the automatic deployment script will grab the already build artifaces and deploy them to DEV, SIT, SVT, PRE-PROD, whatever you could name ...","https://lh3.googleusercontent.com/-bmSk06vQ92w/UMCOYIMOWdI/AAAAAAAAFEw/x5YBZJaNC2IeaaqBBSKYXvaTl_GVdMd1wCLABGAYYCw/s0-d/hudson_pipelineview2-1024x534.jpg","","995","Dec 6, 2012, 12:24:00 PM UTC","Feb 5, 2019, 8:51:47 PM UTC","0.0","0.0","0.0","0.0","","","","Subversion!? When is our industry going to use a real SCM :p; I&#39;d like to see moving from Subversion to pro Git, but this doesn&#39;t likely till a strong argument. Mind you, some projects hosted in JIRA&#39;s Subversion - <a href=""http://www.atlassian.com/software/ondemand/overview"" class=""ot-anchor"">http://www.atlassian.com/software/ondemand/overview</a>. Integrated with Atlassian&#39;s wiki and issue management, basically you can do your work at any place, not only in office.; You&#39;d have a easier time moving to Hg. Git&#39;s command are too obtuse compared to Hg&#39;s intuitive syntax. Hg is also integrated with all the Atlassian tools.; Wow! Hudson has come a long way! ; <span class=""proflinkWrapper""><span class=""proflinkPrefix"">+</span><a class=""proflink"" href=""https://plus.google.com/117411118917273581736"" oid=""117411118917273581736"">Dean Budd</a></span> Choose Jenkins because of run out license number of Teamcity. Bamboo is another option which integrated with Atlassian&#39;s JIRA and Wiki but I haven&#39;t seen any project using it.<br /><br />Like Jenkins&#39; master and slave design, distributing build and test tasks to any slave node when it&#39;s available. Basically, you can created unlimited slave nodes, in virtual machine environment, as your project grows.<br /><br />CI is the only reliable source I could trust the codes. And it&#39;s the infrastructure of development super highway should be built at ever first before starting test and production codes.; <span class=""proflinkWrapper""><span class=""proflinkPrefix"">+</span><a class=""proflink"" href=""https://plus.google.com/112201754385215382872"" oid=""112201754385215382872"">Terrence Miao</a></span> We&#39;re using Bamboo. Very good.; <span class=""proflinkWrapper""><span class=""proflinkPrefix"">+</span><a class=""proflink"" href=""https://plus.google.com/112201754385215382872"" oid=""112201754385215382872"">Terrence Miao</a></span> How do you manage your auto-deployment? Currently we are able to do it, but it&#39;s a really clunky mechanism, using <i>sshexec</i> to stop and start remote servers and <i>scp</i> to copy artifacts. I remember Tomcat having an HTTP API allowing you to auto-deploy via that, but JBoss (5.1) has nothing of the sort.; <span class=""proflinkWrapper""><span class=""proflinkPrefix"">+</span><a class=""proflink"" href=""https://plus.google.com/117411118917273581736"" oid=""117411118917273581736"">Dean Budd</a></span> lucky we have Tomcat in dev, sit, svt environment, except production in big O&#39;s weblogic. <br /><br />plink, pscp tool on windows, calling startup and shutdown scripts in Tomcat (have to, to keep copy of old release). ; <span class=""proflinkWrapper""><span class=""proflinkPrefix"">+</span><a class=""proflink"" href=""https://plus.google.com/117411118917273581736"" oid=""117411118917273581736"">Dean Budd</a></span> Have you tried Cargo? It has support for deployments, start, stop, etc. to most app servers via ant and maven.; <span class=""proflinkWrapper""><span class=""proflinkPrefix"">+</span><a class=""proflink"" href=""https://plus.google.com/104947156656943348622"" oid=""104947156656943348622"">James Gemmell</a></span> Actually, yeah, I used Cargo a while back. Forgot all about it! It was pretty rough around the edges back then, but I&#39;ll check it out again!; Have Cargo plugin for Maven, replacing Tomcat plugin, used to start / stop Tomcat in Selenium test. Cargo is a good tool, but patchy documentation. Took a while to make it work as way I want.","; ; ; ; ; ; ; ; ; ; ","; ; ; ; ; ; ; ; ; ; ","","","","","","","","","0","0"
