/*! For license information please see stories-ExportCSV-stories.7b80a9ba.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[702],{"../../node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./src/stories/ExportCSV.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicExportCSV:()=>BasicExportCSV,CSVColumnType:()=>CSVColumnType,CustomCSV:()=>CustomCSV,CustomCSVButton:()=>CustomCSVButton,CustomCSVHeader:()=>CustomCSVHeader,ExportCustomData:()=>ExportCustomData,ExportTableFooter:()=>ExportTableFooter,FormatCSVColumn:()=>FormatCSVColumn,HideSVColumn:()=>HideSVColumn,OnlyExportFilteredSearchedRows:()=>OnlyExportFilteredSearchedRows,OnlyExportSelectedRows:()=>OnlyExportSelectedRows,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ExportCSV_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),lib=__webpack_require__("../react-bootstrap-table-nextgen-filter/lib/index.js"),common=__webpack_require__("./src/utils/common.ts"),react_bootstrap_table_nextgen_lib=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js")),react_bootstrap_table_nextgen_paginator_lib=__webpack_require__("../react-bootstrap-table-nextgen-paginator/lib/index.js"),react_bootstrap_table_nextgen_toolkit_lib=__webpack_require__("../react-bootstrap-table-nextgen-toolkit/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),ExportCSVButton=react_bootstrap_table_nextgen_toolkit_lib.ZZ.ExportCSVButton,SearchBar=react_bootstrap_table_nextgen_toolkit_lib.ol.SearchBar;try{ExportCSV.displayName="ExportCSV",ExportCSV.__docgenInfo={description:"",displayName:"ExportCSV",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},data1:{defaultValue:null,description:"",name:"data1",required:!0,type:{name:"any"}},data2:{defaultValue:null,description:"",name:"data2",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/ExportCSV.tsx#ExportCSV"]={docgenInfo:ExportCSV.__docgenInfo,name:"ExportCSV",path:"src/stories/ExportCSV.tsx#ExportCSV"})}catch(__react_docgen_typescript_loader_error){}var _BasicExportCSV$param,_BasicExportCSV$param2,_BasicExportCSV$param3,_FormatCSVColumn$para,_FormatCSVColumn$para2,_FormatCSVColumn$para3,_CustomCSVHeader$para,_CustomCSVHeader$para2,_CustomCSVHeader$para3,_HideSVColumn$paramet,_HideSVColumn$paramet2,_HideSVColumn$paramet3,_OnlyExportSelectedRo,_OnlyExportSelectedRo2,_OnlyExportSelectedRo3,_OnlyExportFilteredSe,_OnlyExportFilteredSe2,_OnlyExportFilteredSe3,_CSVColumnType$parame,_CSVColumnType$parame2,_CSVColumnType$parame3,_CustomCSVButton$para,_CustomCSVButton$para2,_CustomCSVButton$para3,_ExportCustomData$par,_ExportCustomData$par2,_ExportCustomData$par3,_CustomCSV$parameters,_CustomCSV$parameters2,_CustomCSV$parameters3,_ExportTableFooter$pa,_ExportTableFooter$pa2,_ExportTableFooter$pa3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const ExportCSV_stories={title:"Export CSV",component:function(_ref){var mode=_ref.mode,data=_ref.data,data1=_ref.data1,data2=_ref.data2,columns=_ref.columns,sourceCode=_ref.sourceCode;switch(mode){case"button":var MyExportCSVButton=function MyExportCSVButton(props){return(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)("button",{className:"btn btn-success",onClick:function handleClick(){props.onExport()},children:"Export to CSV"})})};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,exportCSV:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(MyExportCSVButton,(0,objectSpread2.Z)({},props.csvProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"custom":var products=(0,common.bG)(),MyExportCSVData=function MyExportCSVData(props){return(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)("button",{className:"btn btn-success",onClick:function handleClick(){props.onExport(products.filter((function(r){return r.id>2})))},children:"Only export Product ID bigger than 2"})})};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data:products,columns,exportCSV:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps)),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(MyExportCSVData,(0,objectSpread2.Z)({},props.csvProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"filtered":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h3",{children:"Export all the filtered/searched rows"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,exportCSV:{onlyExportFiltered:!0,exportAll:!1},search:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ExportCSVButton,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.csvProps),{},{children:"Export CSV!!"})),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(SearchBar,(0,objectSpread2.Z)({},props.searchProps)),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.baseProps),{},{pagination:(0,react_bootstrap_table_nextgen_paginator_lib.ZP)(),filter:(0,lib.default)()}))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"csv":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,exportCSV:{fileName:"custom.csv",separator:"|",ignoreHeader:!0,noAutoBOM:!1,blobType:"text/csv;charset=ansi"},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ExportCSVButton,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.csvProps),{},{children:"Export CSV!!"})),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"footer":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,exportCSV:{ignoreFooter:!1},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ExportCSVButton,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.csvProps),{},{children:"Export CSV!!"})),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"selected":var selectRow={mode:"checkbox",clickToSelect:!0};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h3",{children:"Export all selected row"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data:data1,columns,exportCSV:{onlyExportSelection:!0,exportAll:!0},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ExportCSVButton,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.csvProps),{},{children:"Export CSV!!"})),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.baseProps),{},{selectRow,pagination:(0,react_bootstrap_table_nextgen_paginator_lib.ZP)()}))]})}}),(0,jsx_runtime.jsx)("h3",{children:"Export all selected rows in currect visible rows"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data:data2,columns,exportCSV:{onlyExportSelection:!0,exportAll:!1},children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ExportCSVButton,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.csvProps),{},{children:"Export CSV!!"})),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.baseProps),{},{selectRow,pagination:(0,react_bootstrap_table_nextgen_paginator_lib.ZP)()}))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});default:return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_toolkit_lib.ZP,{keyField:"id",data,columns,exportCSV:!0,children:function children(props){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(ExportCSVButton,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props.csvProps),{},{children:"Export CSV!!"})),(0,jsx_runtime.jsx)("hr",{}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,(0,objectSpread2.Z)({},props.baseProps))]})}}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},data1:{control:"object",description:"table data"},data2:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var BasicExportCSV={name:"Basic export CSV",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},FormatCSVColumn={name:"Format CSV columns",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",csvFormatter:function csvFormatter(cell,row,rowIndex){return"$ ".concat(cell,"NTD")}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvFormatter: (cell, row, rowIndex) => `$ ${cell}NTD`\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},CustomCSVHeader={name:"Custom CSV header",args:{columns:[{dataField:"id",text:"Product ID",csvText:"CSV Product ID"},{dataField:"name",text:"Product Name",csvText:"CSV Product Name"},{dataField:"price",text:"Product Price",csvText:"CSV Product price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      csvText: 'CSV Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      csvText: 'CSV Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvText: 'CSV Product price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},HideSVColumn={name:"Hide CSV column",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",csvExport:!1},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      csvExport: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},OnlyExportSelectedRows={name:"Only export selected rows",args:{mode:"selected",columns:common.zF,data1:(0,common.bG)(15),data2:(0,common.bG)(15),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const selectRow = {\n      mode: 'checkbox',\n      clickToSelect: true\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products1 }\n      columns={ columns }\n      exportCSV={ { onlyExportSelection: true, exportAll: true } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n              selectRow={ selectRow }\n              pagination={ paginationFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products2 }\n      columns={ columns }\n      exportCSV={ { onlyExportSelection: true, exportAll: false } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n              selectRow={ selectRow }\n              pagination={ paginationFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},OnlyExportFilteredSearchedRows={name:"Only export filtered/searched rows",args:{mode:"filtered",columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(150),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport, Search } from 'react-bootstrap-table-nextgen-toolkit';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const { SearchBar } = Search;\n    const { ExportCSVButton } = CSVExport;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const selectRow = {\n      mode: 'checkbox',\n      clickToSelect: true\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV={ { onlyExportFiltered: true, exportAll: false } }\n      search\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <SearchBar { ...props.searchProps } />\n            <BootstrapTable\n              { ...props.baseProps }\n              pagination={ paginationFactory() }\n              filter={ filterFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},CSVColumnType={name:"CSV column type",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",csvType:Number}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvType: Number\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},CustomCSVButton={name:"Custom CSV button",args:{mode:"button",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const MyExportCSV = (props) => {\n      const handleClick = () => {\n        props.onExport();\n      };\n      return (\n        <div>\n          <button className=\"btn btn-success\" onClick={ handleClick }>Export to CSV</button>\n        </div>\n      );\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <BootstrapTable { ...props.baseProps } />\n            <hr />\n            <MyExportCSV { ...props.csvProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},ExportCustomData={name:"Export custom data",args:{mode:"custom",columns:common.zF,sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const MyExportCSV = (props) => {\n      const handleClick = () => {\n        // passing my custom data\n        props.onExport(products.filter(r => r.id > 2));\n      };\n      return (\n        <div>\n          <button className=\"btn btn-success\" onClick={ handleClick }>Only export Product ID bigger than 2</button>\n        </div>\n      );\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <BootstrapTable { ...props.baseProps } />\n            <hr />\n            <MyExportCSV { ...props.csvProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},CustomCSV={name:"Custom CSV attributes",args:{mode:"csv",columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV={ {\n        fileName: 'custom.csv',\n        separator: '|',\n        ignoreHeader: true,\n        noAutoBOM: false,\n        blobType: 'text/csv;charset=ansi'\n      } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}},ExportTableFooter={name:"Export table footer",args:{mode:"footer",columns:[{dataField:"id",text:"Product ID",footer:"Footer 1"},{dataField:"name",text:"Product Name",footer:"",footerFormatter:function footerFormatter(column){return column.text}},{dataField:"price",text:"Product Price",footer:function footer(columnData){return columnData.reduce((function(acc,item){return acc+item}),0)}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV={ {\n        ignoreFooter: false\n      } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    "}};BasicExportCSV.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},BasicExportCSV.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_BasicExportCSV$param=BasicExportCSV.parameters)||void 0===_BasicExportCSV$param?void 0:_BasicExportCSV$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Basic export CSV\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_BasicExportCSV$param2=BasicExportCSV.parameters)||void 0===_BasicExportCSV$param2||null===(_BasicExportCSV$param3=_BasicExportCSV$param2.docs)||void 0===_BasicExportCSV$param3?void 0:_BasicExportCSV$param3.source)})}),FormatCSVColumn.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},FormatCSVColumn.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_FormatCSVColumn$para=FormatCSVColumn.parameters)||void 0===_FormatCSVColumn$para?void 0:_FormatCSVColumn$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Format CSV columns\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvFormatter: (cell: any, row: any, rowIndex: number) => `$ ${cell}NTD`\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvFormatter: (cell, row, rowIndex) => \\`$ \\${cell}NTD\\`\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_FormatCSVColumn$para2=FormatCSVColumn.parameters)||void 0===_FormatCSVColumn$para2||null===(_FormatCSVColumn$para3=_FormatCSVColumn$para2.docs)||void 0===_FormatCSVColumn$para3?void 0:_FormatCSVColumn$para3.source)})}),CustomCSVHeader.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomCSVHeader.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomCSVHeader$para=CustomCSVHeader.parameters)||void 0===_CustomCSVHeader$para?void 0:_CustomCSVHeader$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom CSV header\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      csvText: 'CSV Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      csvText: 'CSV Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvText: 'CSV Product price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      csvText: 'CSV Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      csvText: 'CSV Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvText: 'CSV Product price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_CustomCSVHeader$para2=CustomCSVHeader.parameters)||void 0===_CustomCSVHeader$para2||null===(_CustomCSVHeader$para3=_CustomCSVHeader$para2.docs)||void 0===_CustomCSVHeader$para3?void 0:_CustomCSVHeader$para3.source)})}),HideSVColumn.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},HideSVColumn.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_HideSVColumn$paramet=HideSVColumn.parameters)||void 0===_HideSVColumn$paramet?void 0:_HideSVColumn$paramet.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Hide CSV column\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      csvExport: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      csvExport: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_HideSVColumn$paramet2=HideSVColumn.parameters)||void 0===_HideSVColumn$paramet2||null===(_HideSVColumn$paramet3=_HideSVColumn$paramet2.docs)||void 0===_HideSVColumn$paramet3?void 0:_HideSVColumn$paramet3.source)})}),OnlyExportSelectedRows.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},OnlyExportSelectedRows.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_OnlyExportSelectedRo=OnlyExportSelectedRows.parameters)||void 0===_OnlyExportSelectedRo?void 0:_OnlyExportSelectedRo.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Only export selected rows\",\n  args: {\n    mode: \"selected\",\n    columns: columns,\n    data1: productsGenerator(15),\n    data2: productsGenerator(15),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const selectRow = {\n      mode: 'checkbox',\n      clickToSelect: true\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products1 }\n      columns={ columns }\n      exportCSV={ { onlyExportSelection: true, exportAll: true } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n              selectRow={ selectRow }\n              pagination={ paginationFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products2 }\n      columns={ columns }\n      exportCSV={ { onlyExportSelection: true, exportAll: false } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable\n              { ...props.baseProps }\n              selectRow={ selectRow }\n              pagination={ paginationFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_OnlyExportSelectedRo2=OnlyExportSelectedRows.parameters)||void 0===_OnlyExportSelectedRo2||null===(_OnlyExportSelectedRo3=_OnlyExportSelectedRo2.docs)||void 0===_OnlyExportSelectedRo3?void 0:_OnlyExportSelectedRo3.source)})}),OnlyExportFilteredSearchedRows.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},OnlyExportFilteredSearchedRows.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_OnlyExportFilteredSe=OnlyExportFilteredSearchedRows.parameters)||void 0===_OnlyExportFilteredSe?void 0:_OnlyExportFilteredSe.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Only export filtered/searched rows\",\n  args: {\n    mode: \"filtered\",\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(150),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport, Search } from 'react-bootstrap-table-nextgen-toolkit';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const { SearchBar } = Search;\n    const { ExportCSVButton } = CSVExport;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const selectRow = {\n      mode: 'checkbox',\n      clickToSelect: true\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV={ { onlyExportFiltered: true, exportAll: false } }\n      search\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <SearchBar { ...props.searchProps } />\n            <BootstrapTable\n              { ...props.baseProps }\n              pagination={ paginationFactory() }\n              filter={ filterFactory() }\n            />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_OnlyExportFilteredSe2=OnlyExportFilteredSearchedRows.parameters)||void 0===_OnlyExportFilteredSe2||null===(_OnlyExportFilteredSe3=_OnlyExportFilteredSe2.docs)||void 0===_OnlyExportFilteredSe3?void 0:_OnlyExportFilteredSe3.source)})}),CSVColumnType.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CSVColumnType.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CSVColumnType$parame=CSVColumnType.parameters)||void 0===_CSVColumnType$parame?void 0:_CSVColumnType$parame.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"CSV column type\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvType: Number\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      csvType: Number\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_CSVColumnType$parame2=CSVColumnType.parameters)||void 0===_CSVColumnType$parame2||null===(_CSVColumnType$parame3=_CSVColumnType$parame2.docs)||void 0===_CSVColumnType$parame3?void 0:_CSVColumnType$parame3.source)})}),CustomCSVButton.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomCSVButton.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomCSVButton$para=CustomCSVButton.parameters)||void 0===_CustomCSVButton$para?void 0:_CustomCSVButton$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom CSV button\",\n  args: {\n    mode: \"button\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const MyExportCSV = (props) => {\n      const handleClick = () => {\n        props.onExport();\n      };\n      return (\n        <div>\n          <button className=\"btn btn-success\" onClick={ handleClick }>Export to CSV</button>\n        </div>\n      );\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <BootstrapTable { ...props.baseProps } />\n            <hr />\n            <MyExportCSV { ...props.csvProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_CustomCSVButton$para2=CustomCSVButton.parameters)||void 0===_CustomCSVButton$para2||null===(_CustomCSVButton$para3=_CustomCSVButton$para2.docs)||void 0===_CustomCSVButton$para3?void 0:_CustomCSVButton$para3.source)})}),ExportCustomData.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExportCustomData.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExportCustomData$par=ExportCustomData.parameters)||void 0===_ExportCustomData$par?void 0:_ExportCustomData$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Export custom data\",\n  args: {\n    mode: \"custom\",\n    columns: columns,\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider from 'react-bootstrap-table-nextgen-toolkit';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const MyExportCSV = (props) => {\n      const handleClick = () => {\n        // passing my custom data\n        props.onExport(products.filter(r => r.id > 2));\n      };\n      return (\n        <div>\n          <button className=\"btn btn-success\" onClick={ handleClick }>Only export Product ID bigger than 2</button>\n        </div>\n      );\n    };\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV\n    >\n      {\n        props => (\n          <div>\n            <BootstrapTable { ...props.baseProps } />\n            <hr />\n            <MyExportCSV { ...props.csvProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_ExportCustomData$par2=ExportCustomData.parameters)||void 0===_ExportCustomData$par2||null===(_ExportCustomData$par3=_ExportCustomData$par2.docs)||void 0===_ExportCustomData$par3?void 0:_ExportCustomData$par3.source)})}),CustomCSV.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomCSV.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomCSV$parameters=CustomCSV.parameters)||void 0===_CustomCSV$parameters?void 0:_CustomCSV$parameters.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom CSV attributes\",\n  args: {\n    mode: \"csv\",\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV={ {\n        fileName: 'custom.csv',\n        separator: '|',\n        ignoreHeader: true,\n        noAutoBOM: false,\n        blobType: 'text/csv;charset=ansi'\n      } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_CustomCSV$parameters2=CustomCSV.parameters)||void 0===_CustomCSV$parameters2||null===(_CustomCSV$parameters3=_CustomCSV$parameters2.docs)||void 0===_CustomCSV$parameters3?void 0:_CustomCSV$parameters3.source)})}),ExportTableFooter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ExportTableFooter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ExportTableFooter$pa=ExportTableFooter.parameters)||void 0===_ExportTableFooter$pa?void 0:_ExportTableFooter$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Export table footer\",\n  args: {\n    mode: \"footer\",\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: '',\n      footerFormatter: (column: any) => column.text\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: (columnData: any) => columnData.reduce((acc: any, item: any) => acc + item, 0)\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import ToolkitProvider, { CSVExport } from 'react-bootstrap-table-nextgen-toolkit';\n\n    const { ExportCSVButton } = CSVExport;\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'Footer 1'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'Footer 2'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'Footer 3'\n    }];\n\n    <ToolkitProvider\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      exportCSV={ {\n        ignoreFooter: false\n      } }\n    >\n      {\n        props => (\n          <div>\n            <ExportCSVButton { ...props.csvProps }>Export CSV!!</ExportCSVButton>\n            <hr />\n            <BootstrapTable { ...props.baseProps } />\n          </div>\n        )\n      }\n    </ToolkitProvider>\n    `\n  }\n}"},null===(_ExportTableFooter$pa2=ExportTableFooter.parameters)||void 0===_ExportTableFooter$pa2||null===(_ExportTableFooter$pa3=_ExportTableFooter$pa2.docs)||void 0===_ExportTableFooter$pa3?void 0:_ExportTableFooter$pa3.source)})});var __namedExportsOrder=["BasicExportCSV","FormatCSVColumn","CustomCSVHeader","HideSVColumn","OnlyExportSelectedRows","OnlyExportFilteredSearchedRows","CSVColumnType","CustomCSVButton","ExportCustomData","CustomCSV","ExportTableFooter"]}}]);