"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[705],{"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}__webpack_require__.d(__webpack_exports__,{Z:()=>_objectWithoutProperties})},"./src/stories/CellEditing.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AsyncHookFunctions:()=>AsyncHookFunctions,AsyncValidation:()=>AsyncValidation,AutoSelectTextInput:()=>AutoSelectTextInput,BlurToSaveCell:()=>BlurToSaveCell,CellEditorWithDataType:()=>CellEditorWithDataType,CellLevelEditable:()=>CellLevelEditable,CheckboxEditor:()=>CheckboxEditor,ClickToEdit:()=>ClickToEdit,ColumnLevelEditable:()=>ColumnLevelEditable,CustomCellClasses:()=>CustomCellClasses,CustomCellStyle:()=>CustomCellStyle,CustomEditor:()=>CustomEditor,CustomEditorClasses:()=>CustomEditorClasses,CustomEditorStyle:()=>CustomEditorStyle,DateEditor:()=>DateEditor,DoubleClickToEdit:()=>DoubleClickToEdit,DoubleClickToEditWithSelection:()=>DoubleClickToEditWithSelection,DropdownEditor:()=>DropdownEditor,DropdownEditorWithDynamicOptions:()=>DropdownEditorWithDynamicOptions,RichHookFunctions:()=>RichHookFunctions,RowLevelEditable:()=>RowLevelEditable,TextareaEditor:()=>TextareaEditor,Validation:()=>Validation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>CellEditing_stories});var objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),classCallCheck=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),createClass=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createClass.js"),inherits=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/inherits.js"),createSuper=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createSuper.js"),objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("../react-bootstrap-table-nextgen-editor/lib/index.js"),common=__webpack_require__("./src/utils/common.ts"),react_bootstrap_table_nextgen_lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js")),SortManagement=function(_Component){(0,inherits.Z)(SortManagement,_Component);var _super=(0,createSuper.Z)(SortManagement);function SortManagement(props){var _this;return(0,classCallCheck.Z)(this,SortManagement),(_this=_super.call(this,props)).handleSort=function(field,order){_this.setState({field,order})},_this.handleSortById=function(){_this.setState({field:"id",order:"desc"})},_this.state={field:null,order:null},_this}return(0,createClass.Z)(SortManagement,[{key:"render",value:function render(){var columns=[{dataField:"id",text:"Product ID",sort:!0,onSort:this.handleSort},{dataField:"name",text:"Product Name",sort:!0,onSort:this.handleSort},{dataField:"price",text:"Product Price"}],data=(0,common.bG)();return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{className:"btn btn-danger",onClick:this.handleSortById,children:"Sort By ID"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns,sort:{dataField:this.state.field,order:this.state.order}}),(0,jsx_runtime.jsx)(code_block.Z,{children:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    class SortManagement extends React.Component {\n      state = {\n        field: null,\n        order: null\n      }\n\n      handleSort = (field, order) => {\n        this.setState({\n          field,\n          order\n        });\n      }\n\n      handleSortById = () => {\n        this.setState({\n          field: 'id',\n          order: 'desc'\n        });\n      }\n\n      render() {\n        const columns = [{\n          dataField: 'id',\n          text: 'Product ID',\n          sort: true,\n          onSort: this.handleSort\n        }, {\n          dataField: 'name',\n          text: 'Product Name',\n          sort: true,\n          onSort: this.handleSort\n        }, {\n          dataField: 'price',\n          text: 'Product Price'\n        }];\n        return (\n          <div>\n            <button className=\"btn btn-danger\" onClick={ this.handleSortById }>Sort By ID</button>\n            <BootstrapTable\n              keyField=\"id\"\n              data={ products }\n              columns={ columns }\n              sort={ {\n                dataField: this.state.field,\n                order: this.state.order\n              } }\n            />\n            <Code>{ sourceCode }</Code>\n          </div>\n        );\n      }\n    }\n    "})]})}}]),SortManagement}(react.Component),CustomSortValue=function(_Component2){(0,inherits.Z)(CustomSortValue,_Component2);var _super2=(0,createSuper.Z)(CustomSortValue);function CustomSortValue(props){var _this2;return(0,classCallCheck.Z)(this,CustomSortValue),(_this2=_super2.call(this,props)).handleClick=function(){_this2.setState((function(){return{data:(0,common.A9)(21)}}))},_this2.state={data:(0,common.A9)(8)},_this2}return(0,createClass.Z)(CustomSortValue,[{key:"render",value:function render(){var types=["Cloud Service","Message Service","Add Service","Edit Service","Money"],columns=[{dataField:"id",text:"Job ID"},{dataField:"name",text:"Job Name"},{dataField:"owner",text:"Job Owner"},{dataField:"type",text:"Job Type",sort:!0,formatter:function formatter(cell,row){return types[cell]},sortValue:function sortValue(cell,row){return types[cell]}}];return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:this.handleClick,children:"Change Data"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data:this.state.data,columns}),(0,jsx_runtime.jsx)(code_block.Z,{children:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n\n    const types = ['Cloud Service', 'Message Service', 'Add Service', 'Edit Service', 'Money'];\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      sort: true,\n      formatter: (cell, row) => types[cell],\n      sortValue: (cell, row) => types[cell]\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } />\n    "})]})}}]),CustomSortValue}(react.Component);try{CellEditing.displayName="CellEditing",CellEditing.__docgenInfo={description:"",displayName:"CellEditing",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},sort:{defaultValue:null,description:"",name:"sort",required:!0,type:{name:"any"}},cellEdit:{defaultValue:null,description:"",name:"cellEdit",required:!0,type:{name:"any"}},selectRow:{defaultValue:null,description:"",name:"selectRow",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/CellEditing.tsx#CellEditing"]={docgenInfo:CellEditing.__docgenInfo,name:"CellEditing",path:"src/stories/CellEditing.tsx#CellEditing"})}catch(__react_docgen_typescript_loader_error){}var _ClickToEdit$paramete,_ClickToEdit$paramete2,_ClickToEdit$paramete3,_DoubleClickToEdit$pa,_DoubleClickToEdit$pa2,_DoubleClickToEdit$pa3,_BlurToSaveCell$param,_BlurToSaveCell$param2,_BlurToSaveCell$param3,_RowLevelEditable$par,_RowLevelEditable$par2,_RowLevelEditable$par3,_ColumnLevelEditable$,_ColumnLevelEditable$2,_ColumnLevelEditable$3,_CellLevelEditable$pa,_CellLevelEditable$pa2,_CellLevelEditable$pa3,_RichHookFunctions$pa,_RichHookFunctions$pa2,_RichHookFunctions$pa3,_AsyncHookFunctions$p,_AsyncHookFunctions$p2,_AsyncHookFunctions$p3,_Validation$parameter,_Validation$parameter2,_Validation$parameter3,_AsyncValidation$para,_AsyncValidation$para2,_AsyncValidation$para3,_AutoSelectTextInput$,_AutoSelectTextInput$2,_AutoSelectTextInput$3,_CustomCellStyle$para,_CustomCellStyle$para2,_CustomCellStyle$para3,_CustomCellClasses$pa,_CustomCellClasses$pa2,_CustomCellClasses$pa3,_CustomEditorClasses$,_CustomEditorClasses$2,_CustomEditorClasses$3,_CustomEditorStyle$pa,_CustomEditorStyle$pa2,_CustomEditorStyle$pa3,_DoubleClickToEditWit,_DoubleClickToEditWit2,_DoubleClickToEditWit3,_DropdownEditor$param,_DropdownEditor$param2,_DropdownEditor$param3,_DropdownEditorWithDy,_DropdownEditorWithDy2,_DropdownEditorWithDy3,_TextareaEditor$param,_TextareaEditor$param2,_TextareaEditor$param3,_CheckboxEditor$param,_CheckboxEditor$param2,_CheckboxEditor$param3,_DateEditor$parameter,_DateEditor$parameter2,_DateEditor$parameter3,_CustomEditor$paramet,_CustomEditor$paramet2,_CustomEditor$paramet3,_CellEditorWithDataTy,_CellEditorWithDataTy2,_CellEditorWithDataTy3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx"),_excluded=["value","onUpdate"];const CellEditing_stories={title:"Cell Editing",component:function(_ref){var mode=_ref.mode,header=_ref.header,data=_ref.data,columns=_ref.columns,sourceCode=_ref.sourceCode,sort=_ref.sort,cellEdit=_ref.cellEdit,selectRow=_ref.selectRow;switch(mode){case"management":return(0,jsx_runtime.jsx)(SortManagement,{});case"configuration":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h3",{children:"Reverse Sorting Table"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns,sort}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"custom":return(0,jsx_runtime.jsx)(CustomSortValue,{});default:return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns,cellEdit,selectRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"},sort:{control:"text",description:"sort"},cellEdit:{control:"object",description:"cell edit object"},selectRow:{control:"array",description:"row list"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var ClickToEdit={name:"Click to edit",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click"})}},DoubleClickToEdit={name:"Double click to edit",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'dbclick' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"dbclick"})}},BlurToSaveCell={name:"Blur to save cell",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0})}},RowLevelEditable={name:"Row level editable",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true,\n        nonEditableRows: () => [0, 3]\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0,nonEditableRows:function nonEditableRows(){return[0,3]}})}},ColumnLevelEditable={name:"Column level editable",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",editable:!1},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n      // Product Name column can't be edit anymore\n      editable: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0})}},CellLevelEditable={name:"Cell level editable",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",editable:function editable(content,row,rowIndex,columnIndex){return content>2101}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editable: (content, row, rowIndex, columnIndex) => content > 2101\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click"})}},RichHookFunctions={name:"Rich hook functions",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        onStartEdit: (row, column, rowIndex, columnIndex) => { console.log('start to edit!!!'); },\n        beforeSaveCell: (oldValue, newValue, row, column) => { console.log('Before Saving Cell!!'); },\n        afterSaveCell: (oldValue, newValue, row, column) => { console.log('After Saving Cell!!'); }\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",onStartEdit:function onStartEdit(row,column,rowIndex,columnIndex){console.log("Start to edit!!!")},beforeSaveCell:function beforeSaveCell(oldValue,newValue,row,column){console.log("Before Saving Cell!!")},afterSaveCell:function afterSaveCell(oldValue,newValue,row,column){console.log("After Saving Cell!!")}})}};var AsyncHookFunctions={name:"Async hook functions",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    function beforeSaveCell(oldValue, newValue, row, column, done) {\n      setTimeout(() => {\n        if (confirm('Do you want to accep this change?')) {\n          done(true);\n        } else {\n          done(false);\n        }\n      }, 0);\n      return { async: true };\n    }\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        beforeSaveCell\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",beforeSaveCell:function beforeSaveCell(oldValue,newValue,row,column,done){return setTimeout((function(){confirm("Do you want to accep this change?")?done(!0):done(!1)}),0),{async:!0}}})}},Validation={name:"Validation ",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",validator:function validator(newValue,row,column){return isNaN(newValue)?{valid:!1,message:"Price should be numeric"}:!(newValue<2e3)||{valid:!1,message:"Price should bigger than 2000"}}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      validator: (newValue, row, column) => {\n        if (isNaN(newValue)) {\n          return {\n            valid: false,\n            message: 'Price should be numeric'\n          };\n        }\n        if (newValue < 2000) {\n          return {\n            valid: false,\n            message: 'Price should bigger than 2000'\n          };\n        }\n        return true;\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0}),header:(0,jsx_runtime.jsx)("h3",{children:"Product Price should bigger than $2000"})}},AsyncValidation={name:"Async validation",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",validator:function validator(newValue,row,column,done){return setTimeout((function(){return isNaN(newValue)?done({valid:!1,message:"Price should be numeric"}):newValue<2e3?done({valid:!1,message:"Price should bigger than 2000"}):done()}),2e3),{async:!0}}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      validator: (newValue, row, column, done) => {\n        setTimeout(() => {\n          if (isNaN(newValue)) {\n            return done({\n              valid: false,\n              message: 'Price should be numeric'\n            });\n          }\n          if (newValue < 2000) {\n            return done({\n              valid: false,\n              message: 'Price should bigger than 2000'\n            });\n          }\n          return done();\n        }, 2000);\n        return {\n          async: true\n        };\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0}),header:(0,jsx_runtime.jsx)("h3",{children:"Product Price should bigger than $2000"})}},AutoSelectTextInput={name:"Auto select text input",args:{columns:[{dataField:"id",text:"Job ID"},{dataField:"name",text:"Job Name"},{dataField:"owner",text:"Job Owner"},{dataField:"type",text:"Job Type",editor:{type:lib.Type.TEXTAREA}}],data:(0,common.qq)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.TEXTAREA\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={\n        cellEditFactory({\n          mode: 'click',\n          autoSelectText: true\n        })\n      }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",autoSelectText:!0}),header:(0,jsx_runtime.jsx)("h3",{children:"Auto Select Text Input Field When Editing"})}},CustomCellStyle={name:"Custom cell style",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",editCellStyle:{backgroundColor:"#20B2AA"}},{dataField:"price",text:"Product Price",editCellStyle:function editCellStyle(cell,row,rowIndex,colIndex){return{backgroundColor:cell>2101?"#00BFFF":"#00FFFF"}}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editCellStyle: {\n        backgroundColor: '#20B2AA'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editCellStyle: (cell, row, rowIndex, colIndex) => {\n        const backgroundColor = cell > 2101 ? '#00BFFF' : '#00FFFF';\n        return { backgroundColor };\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click"})}},CustomCellClasses={name:"Custom cell classes",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",editCellClasses:"editing-name"},{dataField:"price",text:"Product Price",editCellClasses:function editCellClasses(cell,row,rowIndex,colIndex){return cell>2101?"editing-price-bigger-than-2101":"editing-price-small-than-2101"}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editCellClasses: 'editing-name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editCellClasses: (cell, row, rowIndex, colIndex) =>\n        (cell > 2101 ? 'editing-price-bigger-than-2101' : 'editing-price-small-than-2101')\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click"})}},CustomEditorClasses={name:"Custom editor classes",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",editorClasses:"editing-name"},{dataField:"price",text:"Product Price",editorClasses:function editorClasses(cell,row,rowIndex,colIndex){return cell>2101?"editing-price-bigger-than-2101":"editing-price-small-than-2101"}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editorClasses: 'editing-name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editorClasses: (cell, row, rowIndex, colIndex) =>\n        (cell > 2101 ? 'editing-price-bigger-than-2101' : 'editing-price-small-than-2101')\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click"})}},CustomEditorStyle={name:"Custom editor style",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",editorStyle:{backgroundColor:"#20B2AA"}},{dataField:"price",text:"Product Price",editorStyle:function editorStyle(cell,row,rowIndex,colIndex){return{backgroundColor:cell>2101?"#00BFFF":"#00FFFF"}}}],data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editorStyle: {\n        backgroundColor: '#20B2AA'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editorStyle: (cell, row, rowIndex, colIndex) => {\n        const backgroundColor = cell > 2101 ? '#00BFFF' : '#00FFFF';\n        return { backgroundColor };\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click"})}},DoubleClickToEditWithSelection={name:"Double click to edit with selection",args:{columns:common.zF,data:(0,common.bG)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const selectRow = {\n      mode: 'checkbox',\n      clickToSelect: true,\n      clickToEdit: true\n    };\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      selectRow={ selectRow }\n      cellEdit={ cellEditFactory({ mode: 'dbclick' }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"dbclick"}),selectRow:{mode:"checkbox",clickToSelect:!0,clickToEdit:!0},header:(0,jsx_runtime.jsx)("h3",{children:"Double click to edit cell"})}},DropdownEditor={name:"Dropdown editor",args:{columns:[{dataField:"id",text:"Job ID"},{dataField:"name",text:"Job Name"},{dataField:"owner",text:"Job Owner"},{dataField:"type",text:"Job Type",editor:{type:lib.Type.SELECT,options:[{value:"A",label:"A"},{value:"B",label:"B"},{value:"C",label:"C"},{value:"D",label:"D"},{value:"E",label:"E"}]}}],data:(0,common.qq)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.SELECT,\n        options: [{\n          value: 'A',\n          label: 'A'\n        }, {\n          value: 'B',\n          label: 'B'\n        }, {\n          value: 'C',\n          label: 'C'\n        }, {\n          value: 'D',\n          label: 'D'\n        }, {\n          value: 'E',\n          label: 'E'\n        }]\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0}),header:(0,jsx_runtime.jsx)("h3",{children:"Dropdown Editor"})}},DropdownEditorWithDynamicOptions={name:"Dropdown editor with dynamic options",args:{columns:[{dataField:"id",text:"Job ID"},{dataField:"name",text:"Job Name"},{dataField:"owner",text:"Job Owner"},{dataField:"type",text:"Job Type1",editor:{type:lib.Type.SELECT,getOptions:function getOptions(setOptions,_ref){var row=_ref.row,column=_ref.column;return console.log("current editing row id: ".concat(row.id)),console.log("current editing column: ".concat(column.dataField)),[{value:"A",label:"A"},{value:"B",label:"B"},{value:"C",label:"C"},{value:"D",label:"D"},{value:"E",label:"E"}]}}},{dataField:"type2",text:"Job Type2",editor:{type:lib.Type.SELECT,getOptions:function getOptions(setOptions){setTimeout((function(){setOptions([{value:"A",label:"A"},{value:"B",label:"B"},{value:"C",label:"C"},{value:"D",label:"D"},{value:"E",label:"E"}])}),2e3)}}}],data:(0,common.qq)().map((function(j){return(0,objectSpread2.Z)((0,objectSpread2.Z)({},j),{},{type2:j.type})})),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type1',\n      editor: {\n        type: Type.SELECT,\n        getOptions: (setOptions, { row, column }) => {\n          console.log(`current editing row id: ${row.id}`);\n          console.log(`current editing column: ${column.dataField}`);\n          return [{\n            value: 'A',\n            label: 'A'\n          }, {\n            value: 'B',\n            label: 'B'\n          }, {\n            value: 'C',\n            label: 'C'\n          }, {\n            value: 'D',\n            label: 'D'\n          }, {\n            value: 'E',\n            label: 'E'\n          }];\n        }\n      }\n    }, {\n      dataField: 'type2',\n      text: 'Job Type2',\n      editor: {\n        type: Type.SELECT,\n        getOptions: (setOptions) => {\n          setTimeout(() => {\n            setOptions([{\n              value: 'A',\n              label: 'A'\n            }, {\n              value: 'B',\n              label: 'B'\n            }, {\n              value: 'C',\n              label: 'C'\n            }, {\n              value: 'D',\n              label: 'D'\n            }, {\n              value: 'E',\n              label: 'E'\n            }]);\n          }, 2000);\n        }\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0}),header:(0,jsx_runtime.jsx)("h3",{children:"Dropdown Editor with Dynamic Options"})}},TextareaEditor={name:"Textarea editor",args:{columns:[{dataField:"id",text:"Job ID"},{dataField:"name",text:"Job Name"},{dataField:"owner",text:"Job Owner"},{dataField:"type",text:"Job Type",editor:{type:lib.Type.TEXTAREA}}],data:(0,common.qq)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.TEXTAREA\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0})}},CheckboxEditor={name:"Textarea editor",args:{columns:[{dataField:"id",text:"Todo ID"},{dataField:"todo",text:"Todo Name"},{dataField:"done",text:"Done",editor:{type:lib.Type.CHECKBOX,value:"Y:N"}}],data:(0,common.cs)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Todo ID'\n    }, {\n      dataField: 'todo',\n      text: 'Todo Name'\n    }, {\n      dataField: 'done',\n      text: 'Done',\n      editor: {\n        type: Type.CHECKBOX,\n        value: 'Y:N'\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ todos }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0}),header:(0,jsx_runtime.jsx)("h3",{children:"Checkbox Editor"})}},DateEditor={name:"Date editor",args:{columns:[{dataField:"id",text:"ID"},{dataField:"name",text:"Name"},{dataField:"inStockDate",text:"Stock Date",formatter:function formatter(cell){var dateObj=cell;return"object"!=typeof cell&&(dateObj=new Date(cell)),"".concat(("0"+dateObj.getUTCDate()).slice(-2),"/").concat(("0"+(dateObj.getUTCMonth()+1)).slice(-2),"/").concat(dateObj.getUTCFullYear())},editor:{type:lib.Type.DATE}}],data:(0,common.tO)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'ID'\n    }, {\n      dataField: 'name',\n      text: 'Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'Stock Date',\n      formatter: (cell) => {\n        let dateObj = cell;\n        if (typeof cell !== 'object') {\n          dateObj = new Date(cell);\n        }\n        return `${('0' + dateObj.getUTCDate()).slice(-2)}/${('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/${dateObj.getUTCFullYear()}`;\n      },\n      editor: {\n        type: Type.DATE\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0}),header:(0,jsx_runtime.jsx)("h3",{children:"Date Editor"})}},QualityRanger=function(_React$Component){(0,inherits.Z)(QualityRanger,_React$Component);var _super=(0,createSuper.Z)(QualityRanger);function QualityRanger(){var _this;(0,classCallCheck.Z)(this,QualityRanger);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=_super.call.apply(_super,[this].concat(args))).range=null,_this}return(0,createClass.Z)(QualityRanger,[{key:"componentDidMount",value:function componentDidMount(){this.range&&this.range.focus()}},{key:"getValue",value:function getValue(){var _this$range;return parseInt((null===(_this$range=this.range)||void 0===_this$range?void 0:_this$range.value)||"0",10)}},{key:"render",value:function render(){var _this2=this,_this$props=this.props,onUpdate=(_this$props.value,_this$props.onUpdate),rest=(0,objectWithoutProperties.Z)(_this$props,_excluded);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,react.createElement)("input",(0,objectSpread2.Z)((0,objectSpread2.Z)({},rest),{},{key:"range",ref:function ref(node){return _this2.range=node},type:"range",min:"0",max:"100"})),(0,jsx_runtime.jsx)("button",{className:"btn btn-default",onClick:function onClick(){return onUpdate(_this2.getValue())},children:"done"},"submit")]})}}]),QualityRanger}(react.Component);QualityRanger.defaultProps={value:0};var CustomEditor={name:"Custom editor",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quality",editorRenderer:function editorRenderer(editorProps,value,row,column,rowIndex,columnIndex){return(0,jsx_runtime.jsx)(QualityRanger,(0,objectSpread2.Z)((0,objectSpread2.Z)({},editorProps),{},{value}))}}],data:(0,common.qB)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    class QualityRanger extends React.Component {\n      static propTypes = {\n        value: PropTypes.number,\n        onUpdate: PropTypes.func.isRequired\n      }\n      static defaultProps = {\n        value: 0\n      }\n      getValue() {\n        return parseInt(this.range.value, 10);\n      }\n      render() {\n        const { value, onUpdate, ...rest } = this.props;\n        return [\n          <input\n            { ...rest }\n            key=\"range\"\n            ref={ node => this.range = node }\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n          />,\n          <button\n            key=\"submit\"\n            className=\"btn btn-default\"\n            onClick={ () => onUpdate(this.getValue()) }\n          >\n            done\n          </button>\n        ];\n      }\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\n        <QualityRanger { ...editorProps } value={ value } />\n      )\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0})}};var CellEditorWithDataType={name:"Cell editor with data type",args:{columns:[{dataField:"id",text:"Stock ID"},{dataField:"name",text:"Stock Name"},{dataField:"price",text:"Price",type:"number"},{dataField:"visible",text:"Visible?",type:"bool",editor:{type:lib.Type.CHECKBOX,value:"true:false"}},{dataField:"inStockDate",text:"Stock Date",type:"date",formatter:function formatter(cell){var dateObj=cell;return"object"!=typeof cell&&(dateObj=new Date(cell)),"".concat(("0"+dateObj.getUTCDate()).slice(-2),"/").concat(("0"+(dateObj.getUTCMonth()+1)).slice(-2),"/").concat(dateObj.getUTCFullYear())},editor:{type:lib.Type.DATE}}],data:(0,common.tO)(),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Stock ID'\n    }, {\n      dataField: 'name',\n      text: 'Stock Name'\n    }, {\n      dataField: 'price',\n      text: 'Price',\n      type: 'number'\n    }, {\n      dataField: 'visible',\n      text: 'Visible?',\n      type: 'bool',\n      editor: {\n        type: Type.CHECKBOX,\n        value: 'true:false'\n      }\n    }, {\n      dataField: 'inStockDate',\n      text: 'Stock Date',\n      type: 'date',\n      formatter: (cell) => {\n        let dateObj = cell;\n        if (typeof cell !== 'object') {\n          dateObj = new Date(cell);\n        }\n        return `${('0' + dateObj.getUTCDate()).slice(-2)}/${('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/${dateObj.getUTCFullYear()}`;\n      },\n      editor: {\n        type: Type.DATE\n      }\n    }];\n\n    function afterSaveCell(oldValue, newValue) {\n      console.log('--after save cell--');\n      console.log('New Value was apply as');\n      console.log(newValue);\n      console.log(`and the type is ${typeof newValue}`);\n    }\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true,\n        afterSaveCell\n      }) }\n    />\n    ",cellEdit:(0,lib.default)({mode:"click",blurToSave:!0,afterSaveCell:function afterSaveCell(oldValue,newValue){console.log("--after save cell--"),console.log("New Value was apply as"),console.log(newValue),console.log("and the type is ".concat(typeof newValue))}})}};ClickToEdit.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ClickToEdit.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ClickToEdit$paramete=ClickToEdit.parameters)||void 0===_ClickToEdit$paramete?void 0:_ClickToEdit$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Click to edit\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click'\n    })\n  }\n}"},null===(_ClickToEdit$paramete2=ClickToEdit.parameters)||void 0===_ClickToEdit$paramete2||null===(_ClickToEdit$paramete3=_ClickToEdit$paramete2.docs)||void 0===_ClickToEdit$paramete3?void 0:_ClickToEdit$paramete3.source)})}),DoubleClickToEdit.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DoubleClickToEdit.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DoubleClickToEdit$pa=DoubleClickToEdit.parameters)||void 0===_DoubleClickToEdit$pa?void 0:_DoubleClickToEdit$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Double click to edit\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'dbclick' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'dbclick'\n    })\n  }\n}"},null===(_DoubleClickToEdit$pa2=DoubleClickToEdit.parameters)||void 0===_DoubleClickToEdit$pa2||null===(_DoubleClickToEdit$pa3=_DoubleClickToEdit$pa2.docs)||void 0===_DoubleClickToEdit$pa3?void 0:_DoubleClickToEdit$pa3.source)})}),BlurToSaveCell.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},BlurToSaveCell.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_BlurToSaveCell$param=BlurToSaveCell.parameters)||void 0===_BlurToSaveCell$param?void 0:_BlurToSaveCell$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Blur to save cell\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    })\n  }\n}"},null===(_BlurToSaveCell$param2=BlurToSaveCell.parameters)||void 0===_BlurToSaveCell$param2||null===(_BlurToSaveCell$param3=_BlurToSaveCell$param2.docs)||void 0===_BlurToSaveCell$param3?void 0:_BlurToSaveCell$param3.source)})}),RowLevelEditable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},RowLevelEditable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_RowLevelEditable$par=RowLevelEditable.parameters)||void 0===_RowLevelEditable$par?void 0:_RowLevelEditable$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Row level editable\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true,\n        nonEditableRows: () => [0, 3]\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true,\n      nonEditableRows: () => [0, 3]\n    })\n  }\n}"},null===(_RowLevelEditable$par2=RowLevelEditable.parameters)||void 0===_RowLevelEditable$par2||null===(_RowLevelEditable$par3=_RowLevelEditable$par2.docs)||void 0===_RowLevelEditable$par3?void 0:_RowLevelEditable$par3.source)})}),ColumnLevelEditable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ColumnLevelEditable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ColumnLevelEditable$=ColumnLevelEditable.parameters)||void 0===_ColumnLevelEditable$?void 0:_ColumnLevelEditable$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Column level editable\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editable: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n      // Product Name column can't be edit anymore\n      editable: false\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    })\n  }\n}"},null===(_ColumnLevelEditable$2=ColumnLevelEditable.parameters)||void 0===_ColumnLevelEditable$2||null===(_ColumnLevelEditable$3=_ColumnLevelEditable$2.docs)||void 0===_ColumnLevelEditable$3?void 0:_ColumnLevelEditable$3.source)})}),CellLevelEditable.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CellLevelEditable.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CellLevelEditable$pa=CellLevelEditable.parameters)||void 0===_CellLevelEditable$pa?void 0:_CellLevelEditable$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Cell level editable\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editable: (content: any, row: any, rowIndex: number, columnIndex: number) => content > 2101\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editable: (content, row, rowIndex, columnIndex) => content > 2101\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click'\n    })\n  }\n}"},null===(_CellLevelEditable$pa2=CellLevelEditable.parameters)||void 0===_CellLevelEditable$pa2||null===(_CellLevelEditable$pa3=_CellLevelEditable$pa2.docs)||void 0===_CellLevelEditable$pa3?void 0:_CellLevelEditable$pa3.source)})}),RichHookFunctions.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},RichHookFunctions.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_RichHookFunctions$pa=RichHookFunctions.parameters)||void 0===_RichHookFunctions$pa?void 0:_RichHookFunctions$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Rich hook functions\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        onStartEdit: (row, column, rowIndex, columnIndex) => { console.log('start to edit!!!'); },\n        beforeSaveCell: (oldValue, newValue, row, column) => { console.log('Before Saving Cell!!'); },\n        afterSaveCell: (oldValue, newValue, row, column) => { console.log('After Saving Cell!!'); }\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      onStartEdit: (row: any, column: any, rowIndex: any, columnIndex: any) => {\n        console.log('Start to edit!!!');\n      },\n      beforeSaveCell: (oldValue: any, newValue: any, row: any, column: any) => {\n        console.log('Before Saving Cell!!');\n      },\n      afterSaveCell: (oldValue: any, newValue: any, row: any, column: any) => {\n        console.log('After Saving Cell!!');\n      }\n    })\n  }\n}"},null===(_RichHookFunctions$pa2=RichHookFunctions.parameters)||void 0===_RichHookFunctions$pa2||null===(_RichHookFunctions$pa3=_RichHookFunctions$pa2.docs)||void 0===_RichHookFunctions$pa3?void 0:_RichHookFunctions$pa3.source)})}),AsyncHookFunctions.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},AsyncHookFunctions.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_AsyncHookFunctions$p=AsyncHookFunctions.parameters)||void 0===_AsyncHookFunctions$p?void 0:_AsyncHookFunctions$p.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Async hook functions\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    function beforeSaveCell(oldValue, newValue, row, column, done) {\n      setTimeout(() => {\n        if (confirm('Do you want to accep this change?')) {\n          done(true);\n        } else {\n          done(false);\n        }\n      }, 0);\n      return { async: true };\n    }\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        beforeSaveCell\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      beforeSaveCell\n    })\n  }\n}"},null===(_AsyncHookFunctions$p2=AsyncHookFunctions.parameters)||void 0===_AsyncHookFunctions$p2||null===(_AsyncHookFunctions$p3=_AsyncHookFunctions$p2.docs)||void 0===_AsyncHookFunctions$p3?void 0:_AsyncHookFunctions$p3.source)})}),Validation.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},Validation.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_Validation$parameter=Validation.parameters)||void 0===_Validation$parameter?void 0:_Validation$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Validation \",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      validator: (newValue, row, column) => {\n        if (isNaN(newValue)) {\n          return {\n            valid: false,\n            message: 'Price should be numeric'\n          };\n        }\n        if (newValue < 2000) {\n          return {\n            valid: false,\n            message: 'Price should bigger than 2000'\n          };\n        }\n        return true;\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      validator: (newValue, row, column) => {\n        if (isNaN(newValue)) {\n          return {\n            valid: false,\n            message: 'Price should be numeric'\n          };\n        }\n        if (newValue < 2000) {\n          return {\n            valid: false,\n            message: 'Price should bigger than 2000'\n          };\n        }\n        return true;\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    }),\n    header: <h3>Product Price should bigger than $2000</h3>\n  }\n}"},null===(_Validation$parameter2=Validation.parameters)||void 0===_Validation$parameter2||null===(_Validation$parameter3=_Validation$parameter2.docs)||void 0===_Validation$parameter3?void 0:_Validation$parameter3.source)})}),AsyncValidation.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},AsyncValidation.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_AsyncValidation$para=AsyncValidation.parameters)||void 0===_AsyncValidation$para?void 0:_AsyncValidation$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Async validation\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      validator: (newValue: any, row: any, column: any, done: any) => {\n        setTimeout(() => {\n          if (isNaN(newValue)) {\n            return done({\n              valid: false,\n              message: 'Price should be numeric'\n            });\n          }\n          if (newValue < 2000) {\n            return done({\n              valid: false,\n              message: 'Price should bigger than 2000'\n            });\n          }\n          return done();\n        }, 2000);\n        return {\n          async: true\n        };\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      validator: (newValue, row, column, done) => {\n        setTimeout(() => {\n          if (isNaN(newValue)) {\n            return done({\n              valid: false,\n              message: 'Price should be numeric'\n            });\n          }\n          if (newValue < 2000) {\n            return done({\n              valid: false,\n              message: 'Price should bigger than 2000'\n            });\n          }\n          return done();\n        }, 2000);\n        return {\n          async: true\n        };\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    }),\n    header: <h3>Product Price should bigger than $2000</h3>\n  }\n}"},null===(_AsyncValidation$para2=AsyncValidation.parameters)||void 0===_AsyncValidation$para2||null===(_AsyncValidation$para3=_AsyncValidation$para2.docs)||void 0===_AsyncValidation$para3?void 0:_AsyncValidation$para3.source)})}),AutoSelectTextInput.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},AutoSelectTextInput.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_AutoSelectTextInput$=AutoSelectTextInput.parameters)||void 0===_AutoSelectTextInput$?void 0:_AutoSelectTextInput$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Auto select text input\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.TEXTAREA\n      }\n    }],\n    data: jobsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.TEXTAREA\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={\n        cellEditFactory({\n          mode: 'click',\n          autoSelectText: true\n        })\n      }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      autoSelectText: true\n    }),\n    header: <h3>Auto Select Text Input Field When Editing</h3>\n  }\n}"},null===(_AutoSelectTextInput$2=AutoSelectTextInput.parameters)||void 0===_AutoSelectTextInput$2||null===(_AutoSelectTextInput$3=_AutoSelectTextInput$2.docs)||void 0===_AutoSelectTextInput$3?void 0:_AutoSelectTextInput$3.source)})}),CustomCellStyle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomCellStyle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomCellStyle$para=CustomCellStyle.parameters)||void 0===_CustomCellStyle$para?void 0:_CustomCellStyle$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom cell style\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editCellStyle: {\n        backgroundColor: '#20B2AA'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editCellStyle: (cell: any, row: any, rowIndex: any, colIndex: any) => {\n        const backgroundColor = cell > 2101 ? '#00BFFF' : '#00FFFF';\n        return {\n          backgroundColor\n        };\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editCellStyle: {\n        backgroundColor: '#20B2AA'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editCellStyle: (cell, row, rowIndex, colIndex) => {\n        const backgroundColor = cell > 2101 ? '#00BFFF' : '#00FFFF';\n        return { backgroundColor };\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click'\n    })\n  }\n}"},null===(_CustomCellStyle$para2=CustomCellStyle.parameters)||void 0===_CustomCellStyle$para2||null===(_CustomCellStyle$para3=_CustomCellStyle$para2.docs)||void 0===_CustomCellStyle$para3?void 0:_CustomCellStyle$para3.source)})}),CustomCellClasses.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomCellClasses.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomCellClasses$pa=CustomCellClasses.parameters)||void 0===_CustomCellClasses$pa?void 0:_CustomCellClasses$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom cell classes\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editCellClasses: 'editing-name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editCellClasses: (cell: any, row: any, rowIndex: any, colIndex: any) => cell > 2101 ? 'editing-price-bigger-than-2101' : 'editing-price-small-than-2101'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editCellClasses: 'editing-name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editCellClasses: (cell, row, rowIndex, colIndex) =>\n        (cell > 2101 ? 'editing-price-bigger-than-2101' : 'editing-price-small-than-2101')\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click'\n    })\n  }\n}"},null===(_CustomCellClasses$pa2=CustomCellClasses.parameters)||void 0===_CustomCellClasses$pa2||null===(_CustomCellClasses$pa3=_CustomCellClasses$pa2.docs)||void 0===_CustomCellClasses$pa3?void 0:_CustomCellClasses$pa3.source)})}),CustomEditorClasses.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomEditorClasses.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomEditorClasses$=CustomEditorClasses.parameters)||void 0===_CustomEditorClasses$?void 0:_CustomEditorClasses$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom editor classes\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editorClasses: 'editing-name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editorClasses: (cell: any, row: any, rowIndex: any, colIndex: any) => cell > 2101 ? 'editing-price-bigger-than-2101' : 'editing-price-small-than-2101'\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editorClasses: 'editing-name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editorClasses: (cell, row, rowIndex, colIndex) =>\n        (cell > 2101 ? 'editing-price-bigger-than-2101' : 'editing-price-small-than-2101')\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click'\n    })\n  }\n}"},null===(_CustomEditorClasses$2=CustomEditorClasses.parameters)||void 0===_CustomEditorClasses$2||null===(_CustomEditorClasses$3=_CustomEditorClasses$2.docs)||void 0===_CustomEditorClasses$3?void 0:_CustomEditorClasses$3.source)})}),CustomEditorStyle.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomEditorStyle.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomEditorStyle$pa=CustomEditorStyle.parameters)||void 0===_CustomEditorStyle$pa?void 0:_CustomEditorStyle$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom editor style\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editorStyle: {\n        backgroundColor: '#20B2AA'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editorStyle: (cell: any, row: any, rowIndex: any, colIndex: any) => {\n        const backgroundColor = cell > 2101 ? '#00BFFF' : '#00FFFF';\n        return {\n          backgroundColor\n        };\n      }\n    }],\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      editorStyle: {\n        backgroundColor: '#20B2AA'\n      }\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      editorStyle: (cell, row, rowIndex, colIndex) => {\n        const backgroundColor = cell > 2101 ? '#00BFFF' : '#00FFFF';\n        return { backgroundColor };\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click'\n    })\n  }\n}"},null===(_CustomEditorStyle$pa2=CustomEditorStyle.parameters)||void 0===_CustomEditorStyle$pa2||null===(_CustomEditorStyle$pa3=_CustomEditorStyle$pa2.docs)||void 0===_CustomEditorStyle$pa3?void 0:_CustomEditorStyle$pa3.source)})}),DoubleClickToEditWithSelection.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DoubleClickToEditWithSelection.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DoubleClickToEditWit=DoubleClickToEditWithSelection.parameters)||void 0===_DoubleClickToEditWit?void 0:_DoubleClickToEditWit.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Double click to edit with selection\",\n  args: {\n    columns: columns,\n    data: productsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    const selectRow = {\n      mode: 'checkbox',\n      clickToSelect: true,\n      clickToEdit: true\n    };\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      selectRow={ selectRow }\n      cellEdit={ cellEditFactory({ mode: 'dbclick' }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'dbclick'\n    }),\n    selectRow: {\n      mode: 'checkbox',\n      clickToSelect: true,\n      clickToEdit: true\n    },\n    header: <h3>Double click to edit cell</h3>\n  }\n}"},null===(_DoubleClickToEditWit2=DoubleClickToEditWithSelection.parameters)||void 0===_DoubleClickToEditWit2||null===(_DoubleClickToEditWit3=_DoubleClickToEditWit2.docs)||void 0===_DoubleClickToEditWit3?void 0:_DoubleClickToEditWit3.source)})}),DropdownEditor.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DropdownEditor.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DropdownEditor$param=DropdownEditor.parameters)||void 0===_DropdownEditor$param?void 0:_DropdownEditor$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Dropdown editor\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.SELECT,\n        options: [{\n          value: 'A',\n          label: 'A'\n        }, {\n          value: 'B',\n          label: 'B'\n        }, {\n          value: 'C',\n          label: 'C'\n        }, {\n          value: 'D',\n          label: 'D'\n        }, {\n          value: 'E',\n          label: 'E'\n        }]\n      }\n    }],\n    data: jobsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.SELECT,\n        options: [{\n          value: 'A',\n          label: 'A'\n        }, {\n          value: 'B',\n          label: 'B'\n        }, {\n          value: 'C',\n          label: 'C'\n        }, {\n          value: 'D',\n          label: 'D'\n        }, {\n          value: 'E',\n          label: 'E'\n        }]\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    }),\n    header: <h3>Dropdown Editor</h3>\n  }\n}"},null===(_DropdownEditor$param2=DropdownEditor.parameters)||void 0===_DropdownEditor$param2||null===(_DropdownEditor$param3=_DropdownEditor$param2.docs)||void 0===_DropdownEditor$param3?void 0:_DropdownEditor$param3.source)})}),DropdownEditorWithDynamicOptions.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DropdownEditorWithDynamicOptions.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DropdownEditorWithDy=DropdownEditorWithDynamicOptions.parameters)||void 0===_DropdownEditorWithDy?void 0:_DropdownEditorWithDy.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Dropdown editor with dynamic options\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type1',\n      editor: {\n        type: Type.SELECT,\n        getOptions: (setOptions: any, {\n          row,\n          column\n        }) => {\n          console.log(`current editing row id: ${row.id}`);\n          console.log(`current editing column: ${column.dataField}`);\n          return [{\n            value: 'A',\n            label: 'A'\n          }, {\n            value: 'B',\n            label: 'B'\n          }, {\n            value: 'C',\n            label: 'C'\n          }, {\n            value: 'D',\n            label: 'D'\n          }, {\n            value: 'E',\n            label: 'E'\n          }];\n        }\n      }\n    }, {\n      dataField: 'type2',\n      text: 'Job Type2',\n      editor: {\n        type: Type.SELECT,\n        getOptions: (setOptions: any) => {\n          setTimeout(() => {\n            setOptions([{\n              value: 'A',\n              label: 'A'\n            }, {\n              value: 'B',\n              label: 'B'\n            }, {\n              value: 'C',\n              label: 'C'\n            }, {\n              value: 'D',\n              label: 'D'\n            }, {\n              value: 'E',\n              label: 'E'\n            }]);\n          }, 2000);\n        }\n      }\n    }],\n    data: jobsGenerator().map(j => ({\n      ...j,\n      type2: j.type\n    })),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type1',\n      editor: {\n        type: Type.SELECT,\n        getOptions: (setOptions, { row, column }) => {\n          console.log(\\`current editing row id: $\\{row.id}\\`);\n          console.log(\\`current editing column: $\\{column.dataField}\\`);\n          return [{\n            value: 'A',\n            label: 'A'\n          }, {\n            value: 'B',\n            label: 'B'\n          }, {\n            value: 'C',\n            label: 'C'\n          }, {\n            value: 'D',\n            label: 'D'\n          }, {\n            value: 'E',\n            label: 'E'\n          }];\n        }\n      }\n    }, {\n      dataField: 'type2',\n      text: 'Job Type2',\n      editor: {\n        type: Type.SELECT,\n        getOptions: (setOptions) => {\n          setTimeout(() => {\n            setOptions([{\n              value: 'A',\n              label: 'A'\n            }, {\n              value: 'B',\n              label: 'B'\n            }, {\n              value: 'C',\n              label: 'C'\n            }, {\n              value: 'D',\n              label: 'D'\n            }, {\n              value: 'E',\n              label: 'E'\n            }]);\n          }, 2000);\n        }\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    }),\n    header: <h3>Dropdown Editor with Dynamic Options</h3>\n  }\n}"},null===(_DropdownEditorWithDy2=DropdownEditorWithDynamicOptions.parameters)||void 0===_DropdownEditorWithDy2||null===(_DropdownEditorWithDy3=_DropdownEditorWithDy2.docs)||void 0===_DropdownEditorWithDy3?void 0:_DropdownEditorWithDy3.source)})}),TextareaEditor.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TextareaEditor.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_TextareaEditor$param=TextareaEditor.parameters)||void 0===_TextareaEditor$param?void 0:_TextareaEditor$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Textarea editor\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.TEXTAREA\n      }\n    }],\n    data: jobsGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name'\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner'\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      editor: {\n        type: Type.TEXTAREA\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ jobs }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    })\n  }\n}"},null===(_TextareaEditor$param2=TextareaEditor.parameters)||void 0===_TextareaEditor$param2||null===(_TextareaEditor$param3=_TextareaEditor$param2.docs)||void 0===_TextareaEditor$param3?void 0:_TextareaEditor$param3.source)})}),CheckboxEditor.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CheckboxEditor.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CheckboxEditor$param=CheckboxEditor.parameters)||void 0===_CheckboxEditor$param?void 0:_CheckboxEditor$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Textarea editor\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Todo ID'\n    }, {\n      dataField: 'todo',\n      text: 'Todo Name'\n    }, {\n      dataField: 'done',\n      text: 'Done',\n      editor: {\n        type: Type.CHECKBOX,\n        value: 'Y:N'\n      }\n    }],\n    data: todosGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Todo ID'\n    }, {\n      dataField: 'todo',\n      text: 'Todo Name'\n    }, {\n      dataField: 'done',\n      text: 'Done',\n      editor: {\n        type: Type.CHECKBOX,\n        value: 'Y:N'\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ todos }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    }),\n    header: <h3>Checkbox Editor</h3>\n  }\n}"},null===(_CheckboxEditor$param2=CheckboxEditor.parameters)||void 0===_CheckboxEditor$param2||null===(_CheckboxEditor$param3=_CheckboxEditor$param2.docs)||void 0===_CheckboxEditor$param3?void 0:_CheckboxEditor$param3.source)})}),DateEditor.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DateEditor.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DateEditor$parameter=DateEditor.parameters)||void 0===_DateEditor$parameter?void 0:_DateEditor$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Date editor\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'ID'\n    }, {\n      dataField: 'name',\n      text: 'Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'Stock Date',\n      formatter: cell => {\n        let dateObj = cell;\n        if (typeof cell !== 'object') {\n          dateObj = new Date(cell);\n        }\n        return `${('0' + dateObj.getUTCDate()).slice(-2)}/${('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/${dateObj.getUTCFullYear()}`;\n      },\n      editor: {\n        type: Type.DATE\n      }\n    }],\n    data: stockGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory, { Type } from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'ID'\n    }, {\n      dataField: 'name',\n      text: 'Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'Stock Date',\n      formatter: (cell) => {\n        let dateObj = cell;\n        if (typeof cell !== 'object') {\n          dateObj = new Date(cell);\n        }\n        return \\`$\\{('0' + dateObj.getUTCDate()).slice(-2)}/$\\{('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/$\\{dateObj.getUTCFullYear()}\\`;\n      },\n      editor: {\n        type: Type.DATE\n      }\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    }),\n    header: <h3>Date Editor</h3>\n  }\n}"},null===(_DateEditor$parameter2=DateEditor.parameters)||void 0===_DateEditor$parameter2||null===(_DateEditor$parameter3=_DateEditor$parameter2.docs)||void 0===_DateEditor$parameter3?void 0:_DateEditor$parameter3.source)})}),CustomEditor.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomEditor.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomEditor$paramet=CustomEditor.parameters)||void 0===_CustomEditor$paramet?void 0:_CustomEditor$paramet.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom editor\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      editorRenderer: (editorProps: any, value: any, row: any, column: any, rowIndex: any, columnIndex: any) => <QualityRanger {...editorProps} value={value} />\n    }],\n    data: productsQualityGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    class QualityRanger extends React.Component {\n      static propTypes = {\n        value: PropTypes.number,\n        onUpdate: PropTypes.func.isRequired\n      }\n      static defaultProps = {\n        value: 0\n      }\n      getValue() {\n        return parseInt(this.range.value, 10);\n      }\n      render() {\n        const { value, onUpdate, ...rest } = this.props;\n        return [\n          <input\n            { ...rest }\n            key=\"range\"\n            ref={ node => this.range = node }\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n          />,\n          <button\n            key=\"submit\"\n            className=\"btn btn-default\"\n            onClick={ () => onUpdate(this.getValue()) }\n          >\n            done\n          </button>\n        ];\n      }\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\n        <QualityRanger { ...editorProps } value={ value } />\n      )\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true\n    })\n  }\n}"},null===(_CustomEditor$paramet2=CustomEditor.parameters)||void 0===_CustomEditor$paramet2||null===(_CustomEditor$paramet3=_CustomEditor$paramet2.docs)||void 0===_CustomEditor$paramet3?void 0:_CustomEditor$paramet3.source)})}),CellEditorWithDataType.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CellEditorWithDataType.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CellEditorWithDataTy=CellEditorWithDataType.parameters)||void 0===_CellEditorWithDataTy?void 0:_CellEditorWithDataTy.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Cell editor with data type\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Stock ID'\n    }, {\n      dataField: 'name',\n      text: 'Stock Name'\n    }, {\n      dataField: 'price',\n      text: 'Price',\n      type: 'number'\n    }, {\n      dataField: 'visible',\n      text: 'Visible?',\n      type: 'bool',\n      editor: {\n        type: Type.CHECKBOX,\n        value: 'true:false'\n      }\n    }, {\n      dataField: 'inStockDate',\n      text: 'Stock Date',\n      type: 'date',\n      formatter: (cell: any) => {\n        let dateObj = cell;\n        if (typeof cell !== 'object') {\n          dateObj = new Date(cell);\n        }\n        return `${('0' + dateObj.getUTCDate()).slice(-2)}/${('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/${dateObj.getUTCFullYear()}`;\n      },\n      editor: {\n        type: Type.DATE\n      }\n    }],\n    data: stockGenerator(),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import cellEditFactory from 'react-bootstrap-table-nextgen-editor';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Stock ID'\n    }, {\n      dataField: 'name',\n      text: 'Stock Name'\n    }, {\n      dataField: 'price',\n      text: 'Price',\n      type: 'number'\n    }, {\n      dataField: 'visible',\n      text: 'Visible?',\n      type: 'bool',\n      editor: {\n        type: Type.CHECKBOX,\n        value: 'true:false'\n      }\n    }, {\n      dataField: 'inStockDate',\n      text: 'Stock Date',\n      type: 'date',\n      formatter: (cell) => {\n        let dateObj = cell;\n        if (typeof cell !== 'object') {\n          dateObj = new Date(cell);\n        }\n        return \\`$\\{('0' + dateObj.getUTCDate()).slice(-2)}/$\\{('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/$\\{dateObj.getUTCFullYear()}\\`;\n      },\n      editor: {\n        type: Type.DATE\n      }\n    }];\n\n    function afterSaveCell(oldValue, newValue) {\n      console.log('--after save cell--');\n      console.log('New Value was apply as');\n      console.log(newValue);\n      console.log(\\`and the type is $\\{typeof newValue}\\`);\n    }\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ products }\n      columns={ columns }\n      cellEdit={ cellEditFactory({\n        mode: 'click',\n        blurToSave: true,\n        afterSaveCell\n      }) }\n    />\n    `,\n    cellEdit: cellEditFactory({\n      mode: 'click',\n      blurToSave: true,\n      afterSaveCell\n    })\n  }\n}"},null===(_CellEditorWithDataTy2=CellEditorWithDataType.parameters)||void 0===_CellEditorWithDataTy2||null===(_CellEditorWithDataTy3=_CellEditorWithDataTy2.docs)||void 0===_CellEditorWithDataTy3?void 0:_CellEditorWithDataTy3.source)})});var __namedExportsOrder=["ClickToEdit","DoubleClickToEdit","BlurToSaveCell","RowLevelEditable","ColumnLevelEditable","CellLevelEditable","RichHookFunctions","AsyncHookFunctions","Validation","AsyncValidation","AutoSelectTextInput","CustomCellStyle","CustomCellClasses","CustomEditorClasses","CustomEditorStyle","DoubleClickToEditWithSelection","DropdownEditor","DropdownEditorWithDynamicOptions","TextareaEditor","CheckboxEditor","DateEditor","CustomEditor","CellEditorWithDataType"]}}]);