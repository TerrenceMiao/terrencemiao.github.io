"use strict";(self.webpackChunkreact_bootstrap_table_nextgen_example=self.webpackChunkreact_bootstrap_table_nextgen_example||[]).push([[894],{"./src/stories/ColumnFilter.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AdvanceCustomFilter:()=>AdvanceCustomFilter,ClearAllFilters:()=>ClearAllFilters,ConfigureSelectFilterOptions:()=>ConfigureSelectFilterOptions,CustomDateFilter:()=>CustomDateFilter,CustomFilter:()=>CustomFilter,CustomFilterValue:()=>CustomFilterValue,CustomMultiSelectFilter:()=>CustomMultiSelectFilter,CustomNumberFilter:()=>CustomNumberFilter,CustomSelectFilter:()=>CustomSelectFilter,CustomTextFilter:()=>CustomTextFilter,DateFilter:()=>DateFilter,DateFilterWithDefaultValue:()=>DateFilterWithDefaultValue,FilterHooks:()=>FilterHooks,FilterPosition:()=>FilterPosition,ImplementCustomFilterLogic:()=>ImplementCustomFilterLogic,MultiSelectFilter:()=>MultiSelectFilter,MultiSelectFilterWithDefaultValue:()=>MultiSelectFilterWithDefaultValue,NumberFilter:()=>NumberFilter,NumberFilterWithDefaultValue:()=>NumberFilterWithDefaultValue,PreservedOptionOrderOnSelectFilter:()=>PreservedOptionOrderOnSelectFilter,ProgrammaticallyDateFilter:()=>ProgrammaticallyDateFilter,ProgrammaticallyMultiSelectFilter:()=>ProgrammaticallyMultiSelectFilter,ProgrammaticallyNumberFilter:()=>ProgrammaticallyNumberFilter,ProgrammaticallySelectFilter:()=>ProgrammaticallySelectFilter,ProgrammaticallyTextFilter:()=>ProgrammaticallyTextFilter,SelectFilter:()=>SelectFilter,SelectFilterWithComparator:()=>SelectFilterWithComparator,SelectFilterWithDefaultValue:()=>SelectFilterWithDefaultValue,TextFilter:()=>TextFilter,TextFilterWithCaseSensitive:()=>TextFilterWithCaseSensitive,TextFilterWithComparator:()=>TextFilterWithComparator,TextFilterWithDefaultValue:()=>TextFilterWithDefaultValue,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ColumnFilter_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),classCallCheck=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),createClass=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createClass.js"),assertThisInitialized=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),inherits=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/inherits.js"),createSuper=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/createSuper.js"),react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("../react-bootstrap-table-nextgen-filter/lib/index.js"),common=__webpack_require__("./src/utils/common.ts"),react_bootstrap_table_nextgen_lib=__webpack_require__("../react-bootstrap-table-nextgen/lib/index.js"),code_block=__webpack_require__("./src/components/common/code-block.tsx"),jsx_runtime=(__webpack_require__("../react-bootstrap-table-nextgen-filter/style/react-bootstrap-table-nextgen-filter.scss"),__webpack_require__("../react-bootstrap-table-nextgen-paginator/style/react-bootstrap-table-nextgen-paginator.scss"),__webpack_require__("../react-bootstrap-table-nextgen-toolkit/style/react-bootstrap-table-nextgen-toolkit.scss"),__webpack_require__("../react-bootstrap-table-nextgen/style/react-bootstrap-table-nextgen.scss"),__webpack_require__("./src/stories/stylesheet/storybook.scss"),__webpack_require__("./src/stories/stylesheet/tomorrow.min.css"),__webpack_require__("./node_modules/react/jsx-runtime.js"));try{ColumnFilter.displayName="ColumnFilter",ColumnFilter.__docgenInfo={description:"",displayName:"ColumnFilter",props:{mode:{defaultValue:null,description:"",name:"mode",required:!0,type:{name:"any"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"any"}},columns1:{defaultValue:null,description:"",name:"columns1",required:!0,type:{name:"any"}},columns2:{defaultValue:null,description:"",name:"columns2",required:!0,type:{name:"any"}},columns3:{defaultValue:null,description:"",name:"columns3",required:!0,type:{name:"any"}},sourceCode:{defaultValue:null,description:"",name:"sourceCode",required:!0,type:{name:"any"}},sourceCode1:{defaultValue:null,description:"",name:"sourceCode1",required:!0,type:{name:"any"}},sourceCode2:{defaultValue:null,description:"",name:"sourceCode2",required:!0,type:{name:"any"}},filter:{defaultValue:null,description:"",name:"filter",required:!0,type:{name:"any"}},expandRow:{defaultValue:null,description:"",name:"expandRow",required:!0,type:{name:"any"}},selectRow:{defaultValue:null,description:"",name:"selectRow",required:!0,type:{name:"any"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/ColumnFilter.tsx#ColumnFilter"]={docgenInfo:ColumnFilter.__docgenInfo,name:"ColumnFilter",path:"src/stories/ColumnFilter.tsx#ColumnFilter"})}catch(__react_docgen_typescript_loader_error){}var _TextFilter$parameter,_TextFilter$parameter2,_TextFilter$parameter3,_TextFilterWithDefaul,_TextFilterWithDefaul2,_TextFilterWithDefaul3,_TextFilterWithCompar,_TextFilterWithCompar2,_TextFilterWithCompar3,_TextFilterWithCaseSe,_TextFilterWithCaseSe2,_TextFilterWithCaseSe3,_SelectFilter$paramet,_SelectFilter$paramet2,_SelectFilter$paramet3,_ConfigureSelectFilte,_ConfigureSelectFilte2,_ConfigureSelectFilte3,_SelectFilterWithDefa,_SelectFilterWithDefa2,_SelectFilterWithDefa3,_SelectFilterWithComp,_SelectFilterWithComp2,_SelectFilterWithComp3,_MultiSelectFilter$pa,_MultiSelectFilter$pa2,_MultiSelectFilter$pa3,_MultiSelectFilterWit,_MultiSelectFilterWit2,_MultiSelectFilterWit3,_NumberFilter$paramet,_NumberFilter$paramet2,_NumberFilter$paramet3,_NumberFilterWithDefa,_NumberFilterWithDefa2,_NumberFilterWithDefa3,_DateFilter$parameter,_DateFilter$parameter2,_DateFilter$parameter3,_DateFilterWithDefaul,_DateFilterWithDefaul2,_DateFilterWithDefaul3,_FilterPosition$param,_FilterPosition$param2,_FilterPosition$param3,_CustomTextFilter$par,_CustomTextFilter$par2,_CustomTextFilter$par3,_CustomSelectFilter$p,_CustomSelectFilter$p2,_CustomSelectFilter$p3,_CustomNumberFilter$p,_CustomNumberFilter$p2,_CustomNumberFilter$p3,_CustomDateFilter$par,_CustomDateFilter$par2,_CustomDateFilter$par3,_CustomMultiSelectFil,_CustomMultiSelectFil2,_CustomMultiSelectFil3,_CustomFilterValue$pa,_CustomFilterValue$pa2,_CustomFilterValue$pa3,_ProgrammaticallyText,_ProgrammaticallyText2,_ProgrammaticallyText3,_ProgrammaticallySele,_ProgrammaticallySele2,_ProgrammaticallySele3,_ProgrammaticallyNumb,_ProgrammaticallyNumb2,_ProgrammaticallyNumb3,_ProgrammaticallyDate,_ProgrammaticallyDate2,_ProgrammaticallyDate3,_ProgrammaticallyMult,_ProgrammaticallyMult2,_ProgrammaticallyMult3,_CustomFilter$paramet,_CustomFilter$paramet2,_CustomFilter$paramet3,_AdvanceCustomFilter$,_AdvanceCustomFilter$2,_AdvanceCustomFilter$3,_PreservedOptionOrder,_PreservedOptionOrder2,_PreservedOptionOrder3,_ClearAllFilters$para,_ClearAllFilters$para2,_ClearAllFilters$para3,_FilterHooks$paramete,_FilterHooks$paramete2,_FilterHooks$paramete3,_ImplementCustomFilte,_ImplementCustomFilte2,_ImplementCustomFilte3,bootstrap_style=__webpack_require__("./src/stories/bootstrap-style.tsx");const ColumnFilter_stories={title:"Column Filter",component:function(_ref){var mode=_ref.mode,data=_ref.data,columns=_ref.columns,columns1=_ref.columns1,columns2=_ref.columns2,columns3=_ref.columns3,sourceCode=_ref.sourceCode,sourceCode1=_ref.sourceCode1,sourceCode2=_ref.sourceCode2,filter=_ref.filter,expandRow=_ref.expandRow,selectRow=_ref.selectRow,header=_ref.header;switch(mode){case"options":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h2",{children:"Options as an object"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns:columns1,filter}),(0,jsx_runtime.jsx)("h2",{children:"Options as an array"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns:columns2,filter}),(0,jsx_runtime.jsx)("h2",{children:"Options as a function which return an array"}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns:columns3,filter}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]});case"position":return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns,filter,filterPosition:"top",expandRow,selectRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode1}),(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns,filter,filterPosition:"bottom",expandRow,selectRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode2})]});default:return(0,jsx_runtime.jsxs)("div",{children:[header,(0,jsx_runtime.jsx)(react_bootstrap_table_nextgen_lib.default,{keyField:"id",data,columns,filter,selectRow}),(0,jsx_runtime.jsx)(code_block.Z,{children:sourceCode})]})}},parameters:{layout:"centered"},tags:["autodocs"],argTypes:{mode:{control:"text",description:"mode"},data:{control:"object",description:"table data"},columns:{control:"object",description:"table columns"},sourceCode:{control:"text",description:"source code of the table"},header:{control:"text",description:"header of the table"}},decorators:[function(Story){return(0,bootstrap_style.Z)()(Story)}]};var nameFilter,qualityFilter,priceFilter,inStockDateFilter,qualityMultiSelectFilter,clearNameFilter,clearQualityFilter,clearPriceFilter,clearStockDateFilter,TextFilter={name:"Text filter",args:{columns:[{dataField:"id",text:"Product ID",footer:"hello"},{dataField:"name",text:"Product Name",footer:"hello",filter:(0,lib.textFilter)({id:"identify"})},{dataField:"price",text:"Product Price",footer:"hello",filter:(0,lib.textFilter)()}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)(),selectRow:{mode:"checkbox",clickToSelect:!0}}},TextFilterWithDefaultValue={name:"Text filter with default value",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",filter:(0,lib.textFilter)({defaultValue:"2103"})}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        defaultValue: '2103'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},TextFilterWithComparator={name:"Text filter with comparator",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)({comparator:lib.EQ})},{dataField:"price",text:"Product Price",filter:(0,lib.textFilter)()}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        comparator: Comparator.EQ\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},TextFilterWithCaseSensitive={name:"Text filter with case sensitive",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)({caseSensitive:!0})},{dataField:"price",text:"Product Price"}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({ caseSensitive: true })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},selectOptions={0:"good",1:"Bad",2:"unknown"},SelectFilter={name:"Select filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.selectFilter)({options:selectOptions})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},selectOptionsArr=[{value:0,label:"good"},{value:1,label:"Bad"},{value:2,label:"unknown"}],ConfigureSelectFilterOptions={name:"Configure select filter options",args:{mode:"options",data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    // Object map options\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    // Array options\n    const selectOptionsArr = [{\n      value: 0,\n      label: 'good'\n    }, {\n      value: 1,\n      label: 'Bad'\n    }, {\n      value: 2,\n      label: 'unknown'\n    }];\n\n    const columns1 = [..., {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }];\n    <BootstrapTable keyField='id' data={ products } columns={ columns1 } filter={ filterFactory() } />\n\n    const columns2 = [..., {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptionsArr.filter(opt => opt.value === cell)[0].label || '',\n      filter: selectFilter({\n        options: selectOptionsArr\n      })\n    }];\n    <BootstrapTable keyField='id' data={ products } columns={ columns2 } filter={ filterFactory() } />\n\n    const columns3 = [..., {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptionsArr.filter(opt => opt.value === cell)[0].label || '',\n      filter: selectFilter({\n        options: () => selectOptionsArr\n      })\n    }];\n    <BootstrapTable keyField='id' data={ products } columns={ columns3 } filter={ filterFactory() } />\n    ",filter:(0,lib.default)(),columns1:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.selectFilter)({options:selectOptions})}],columns2:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptionsArr.filter((function(opt){return opt.value===cell}))[0].label||""},filter:(0,lib.selectFilter)({options:selectOptionsArr})}],columns3:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptionsArr.filter((function(opt){return opt.value===cell}))[0].label||""},filter:(0,lib.selectFilter)({options:function options(){return selectOptionsArr}})}]}},SelectFilterWithDefaultValue={name:"Select filter with default value",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.selectFilter)({options:selectOptions,defaultValue:2})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        defaultValue: 2\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},SelectFilterWithComparator={name:"Select filter with comparator",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",filter:(0,lib.selectFilter)({options:{"03":"03","04":"04","01":"01"},comparator:lib.LIKE})}],data:(0,common.bG)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      '03': '03',\n      '04': '04',\n      '01': '01'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: selectFilter({\n        options: selectOptions,\n        comparator: Comparator.LIKE // default is Comparator.EQ\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},MultiSelectFilter={name:"MultiSelect filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.multiSelectFilter)({options:selectOptions})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},MultiSelectFilterWithDefaultValue={name:"MultiSelect filter with default value",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.multiSelectFilter)({options:selectOptions,defaultValue:[0,2]})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        defaultValue: [0, 2]\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},NumberFilter={name:"Number filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",filter:(0,lib.numberFilter)()}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter()\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},NumberFilterWithDefaultValue={name:"Number filter with default value",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",filter:(0,lib.numberFilter)({defaultValue:{number:2103,comparator:lib.GT}})}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        defaultValue: { number: 2103, comparator: Comparator.GT }\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},DateFilter={name:"Date filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"inStockDate",text:"InStock Date",formatter:function formatter(cell){return cell.toString()},filter:(0,lib.dateFilter)()}],data:(0,common.tO)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter()\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      filter={ filterFactory() }\n    />\n    ",filter:(0,lib.default)()}},DateFilterWithDefaultValue={name:"Date filter with default value",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"inStockDate",text:"InStock Date",formatter:function formatter(cell){return cell.toString()},filter:(0,lib.dateFilter)({defaultValue:{date:new Date(2018,0,1),comparator:lib.GT}})}],data:(0,common.tO)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter({\n        defaultValue: { date: new Date(2018, 0, 1), comparator: Comparator.GT }\n      })\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      filter={ filterFactory() }\n    />\n    ",filter:(0,lib.default)()}},FilterPosition={name:"Filter position",args:{mode:"position",columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",filter:(0,lib.textFilter)()}],data:(0,common.bG)(8),sourceCode1:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      filter={ filterFactory() }\n      filterPosition=\"top\"\n    />\n    ",sourceCode2:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      filter={ filterFactory() }\n      filterPosition=\"bottom\"\n    />\n    ",filter:(0,lib.default)(),selectRow:{mode:"checkbox",clickToSelect:!0},expandRow:{renderer:function renderer(row){return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("p",{children:"This Expand row is belong to rowKey ".concat(row.id)}),(0,jsx_runtime.jsx)("p",{children:"You can render anything here, also you can add additional data on every row object"}),(0,jsx_runtime.jsx)("p",{children:"expandRow.renderer callback will pass the origin row object to you"})]})},showExpandColumn:!0,expandColumnPosition:"right"}}},CustomTextFilter={name:"Custom text filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",filter:(0,lib.textFilter)({delay:1e3,style:{backgroundColor:"yellow"},className:"test-classname",placeholder:"Custom PlaceHolder",onClick:function onClick(e){return console.log(e)}})}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        delay: 1000, // default is 500ms\n        style: {\n          backgroundColor: 'yellow'\n        },\n        className: 'test-classname',\n        placeholder: 'Custom PlaceHolder',\n        onClick: e => console.log(e)\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},CustomSelectFilter={name:"Custom select filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.selectFilter)({options:selectOptions,withoutEmptyOption:!0,style:{backgroundColor:"pink"},className:"test-classname"})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        withoutEmptyOption: true,\n        style: {\n          backgroundColor: 'pink'\n        },\n        className: 'test-classname',\n        datamycustomattr: 'datamycustomattr'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},CustomNumberFilter={name:"Custom number filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",filter:(0,lib.numberFilter)({options:[2100,2103,2105],delay:600,placeholder:"custom placeholder",withoutEmptyComparatorOption:!0,comparators:[lib.EQ,lib.GT,lib.LT],style:{display:"inline-grid"},className:"custom-numberfilter-class",comparatorStyle:{backgroundColor:"antiquewhite"},comparatorClassName:"custom-comparator-class",numberStyle:{backgroundColor:"cadetblue",margin:"0px"},numberClassName:"custom-number-class"})}],data:(0,common.bG)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        options: [2100, 2103, 2105],\n        delay: 600,\n        placeholder: 'custom placeholder',\n        withoutEmptyComparatorOption: true,\n        comparators: [Comparator.EQ, Comparator.GT, Comparator.LT],\n        style: { display: 'inline-grid' },\n        className: 'custom-numberfilter-class',\n        comparatorStyle: { backgroundColor: 'antiquewhite' },\n        comparatorClassName: 'custom-comparator-class',\n        numberStyle: { backgroundColor: 'cadetblue', margin: '0px' },\n        numberClassName: 'custom-number-class'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},CustomDateFilter={name:"Custom date filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"inStockDate",text:"InStock Date",formatter:function formatter(cell){return cell.toString()},filter:(0,lib.dateFilter)({delay:400,placeholder:"custom placeholder",withoutEmptyComparatorOption:!0,comparators:[lib.EQ,lib.GT,lib.LT],style:{display:"inline-grid"},className:"custom-datefilter-class",comparatorStyle:{backgroundColor:"antiquewhite"},comparatorClassName:"custom-comparator-class",dateStyle:{backgroundColor:"cadetblue",margin:"0px"},dateClassName:"custom-date-class"})}],data:(0,common.tO)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter({\n        delay: 400,\n        placeholder: 'custom placeholder',\n        withoutEmptyComparatorOption: true,\n        comparators: [Comparator.EQ, Comparator.GT, Comparator.LT],\n        style: { display: 'inline-grid' },\n        className: 'custom-datefilter-class',\n        comparatorStyle: { backgroundColor: 'antiquewhite' },\n        comparatorClassName: 'custom-comparator-class',\n        dateStyle: { backgroundColor: 'cadetblue', margin: '0px' },\n        dateClassName: 'custom-date-class'\n      })\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      filter={ filterFactory() }\n    />\n    ",filter:(0,lib.default)()}},CustomMultiSelectFilter={name:"Custom multi select filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.multiSelectFilter)({options:selectOptions,withoutEmptyOption:!0,style:{backgroundColor:"pink"},className:"test-classname"})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        withoutEmptyOption: true,\n        style: {\n          backgroundColor: 'pink'\n        },\n        className: 'test-classname',\n        datamycustomattr: 'datamycustomattr'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},owners=["Allen","Bob","Cat"],types=["Cloud Service","Message Service","Add Service","Edit Service","Money"],CustomFilterValue={name:"Custom filter value",args:{columns:[{dataField:"id",text:"Job ID"},{dataField:"name",text:"Job Name",filter:(0,lib.textFilter)()},{dataField:"owner",text:"Job Owner",filter:(0,lib.textFilter)(),formatter:function formatter(cell,row){return owners[cell]},filterValue:function filterValue(cell,row){return owners[cell]}},{dataField:"type",text:"Job Type",filter:(0,lib.textFilter)(),formatter:function formatter(cell,row){return types[cell]},filterValue:function filterValue(cell,row){return types[cell]}}],data:(0,common.A9)(5),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const owners = ['Allen', 'Bob', 'Cat'];\n    const types = ['Cloud Service', 'Message Service', 'Add Service', 'Edit Service', 'Money'];\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name',\n      filter: textFilter()\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner',\n      filter: textFilter(),\n      formatter: (cell, row) => owners[cell],\n      filterValue: (cell, row) => owners[cell]\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      filter: textFilter(),\n      filterValue: (cell, row) => types[cell]\n    }];\n\n    // shape of job: { id: 0, name: 'Job name 0', owner: 1, type: 3 }\n\n    <BootstrapTable keyField='id' data={ jobs } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},ProgrammaticallyTextFilter={name:"Programmatically text filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)({getFilter:function getFilter(filter){nameFilter=filter}})},{dataField:"price",text:"Product Price",filter:(0,lib.textFilter)()}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let nameFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        getFilter: (filter) => {\n          // nameFilter was assigned once the component has been mounted.\n          nameFilter = filter;\n        }\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    const handleClick = () => {\n      nameFilter(0);\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> filter columns by 0 </button>\n\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    ",filter:(0,lib.default)(),header:(0,jsx_runtime.jsx)("button",{className:"btn btn-lg btn-primary",onClick:function handleNameFilterClick(){nameFilter(0)},children:" filter columns by 0 "})}},ProgrammaticallySelectFilter={name:"Programmatically select filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quality",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.selectFilter)({options:selectOptions,getFilter:function getFilter(filter){qualityFilter=filter}})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let qualityFilter;\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        getFilter: (filter) => {\n          // qualityFilter was assigned once the component has been mounted.\n          qualityFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      qualityFilter(0);\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }>{' filter columns by option \"good\" '}</button>\n\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    ",filter:(0,lib.default)(),header:(0,jsx_runtime.jsx)("button",{className:"btn btn-lg btn-primary",onClick:function handleQualityFilterClick(){qualityFilter(0)},children:' filter columns by option "good" '})}},ProgrammaticallyNumberFilter={name:"Programmatically number filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"price",text:"Product Price",filter:(0,lib.numberFilter)({getFilter:function getFilter(filter){priceFilter=filter}})}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let priceFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        getFilter: (filter) => {\n          // pricerFilter was assigned once the component has been mounted.\n          priceFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      priceFilter({\n        number: 2103,\n        comparator: Comparator.GT\n      });\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> filter all columns which is greater than 2103 </button>\n\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    ",filter:(0,lib.default)(),header:(0,jsx_runtime.jsx)("button",{className:"btn btn-lg btn-primary",onClick:function handlePriceFilterClick(){priceFilter({number:2103,comparator:lib.GT})},children:" filter all columns which is greater than 2103 "})}},ProgrammaticallyDateFilter={name:"Programmatically date filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"inStockDate",text:"InStock Date",formatter:function formatter(cell){return cell.toString()},filter:(0,lib.dateFilter)({getFilter:function getFilter(filter){inStockDateFilter=filter}})}],data:(0,common.tO)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    let inStockDateFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter({\n        getFilter: (filter) => {\n          // inStockDateFilter was assigned once the component has been mounted.\n          inStockDateFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      inStockDateFilter({\n        date: new Date(2018, 0, 1),\n        comparator: Comparator.GT\n      });\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> filter InStock Date columns which is greater than 2018.01.01 </button>\n\n        <BootstrapTable keyField='id' data={ stocks } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    ",filter:(0,lib.default)(),header:(0,jsx_runtime.jsx)("button",{className:"btn btn-lg btn-primary",onClick:function handleDateFilterClick(){inStockDateFilter({date:new Date(2018,0,1),comparator:lib.GT})},children:" filter InStock Date columns which is greater than 2018.01.01 "})}},ProgrammaticallyMultiSelectFilter={name:"Programmatically multi select filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quality",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.multiSelectFilter)({options:selectOptions,getFilter:function getFilter(filter){qualityMultiSelectFilter=filter}})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let qualityFilter;\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        getFilter: (filter) => {\n          // qualityFilter was assigned once the component has been mounted.\n          qualityFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      qualityFilter([0, 2]);\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }>{' filter columns by option \"good\" and \"unknow\" '}</button>\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    ",filter:(0,lib.default)(),header:(0,jsx_runtime.jsx)("button",{className:"btn btn-lg btn-primary",onClick:function handleQualityMultiSelectFilterClick(){qualityMultiSelectFilter([0,2])},children:' filter columns by option "good" and "unknow" '})}},PriceFilter=function(_React$Component){(0,inherits.Z)(PriceFilter,_React$Component);var _super=(0,createSuper.Z)(PriceFilter);function PriceFilter(props){var _this;return(0,classCallCheck.Z)(this,PriceFilter),(_this=_super.call(this,props)).input=void 0,_this.filter=_this.filter.bind((0,assertThisInitialized.Z)(_this)),_this.getValue=_this.getValue.bind((0,assertThisInitialized.Z)(_this)),_this.input=null,_this}return(0,createClass.Z)(PriceFilter,[{key:"getValue",value:function getValue(){return this.input?this.input.value:""}},{key:"filter",value:function filter(){this.input&&this.props.onFilter(this.getValue())}},{key:"render",value:function render(){var _this2=this;return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("input",{ref:function ref(node){return _this2.input=node},type:"text",placeholder:"Input price"}),(0,jsx_runtime.jsx)("button",{className:"btn btn-warning",onClick:this.filter,children:"Find ".concat(this.props.column.text)})]})}}]),PriceFilter}(react.Component),CustomFilter={name:"Custom filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",filter:(0,lib.customFilter)(),filterRenderer:function filterRenderer(onFilter,column){return(0,jsx_runtime.jsx)(PriceFilter,{onFilter,column})}}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, customFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    class PriceFilter extends React.Component {\n      static propTypes = {\n        column: PropTypes.object.isRequired,\n        onFilter: PropTypes.func.isRequired\n      }\n      constructor(props) {\n        super(props);\n        this.filter = this.filter.bind(this);\n        this.getValue = this.getValue.bind(this);\n      }\n      getValue() {\n        return this.input.value;\n      }\n      filter() {\n        this.props.onFilter(this.getValue());\n      }\n      render() {\n        return [\n          <input\n            key=\"input\"\n            ref={ node => this.input = node }\n            type=\"text\"\n            placeholder=\"Input price\"\n          />,\n          <button\n            key=\"submit\"\n            className=\"btn btn-warning\"\n            onClick={ this.filter }\n          >\n            { `Filter ${this.props.column.text}` }\n          </button>\n        ];\n      }\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: customFilter(),\n      filterRenderer: (onFilter, column) =>\n        <PriceFilter onFilter={ onFilter } column={ column } />\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},AdvancePriceFilter=function(_React$Component2){(0,inherits.Z)(AdvancePriceFilter,_React$Component2);var _super2=(0,createSuper.Z)(AdvancePriceFilter);function AdvancePriceFilter(props){var _this3;return(0,classCallCheck.Z)(this,AdvancePriceFilter),(_this3=_super2.call(this,props)).range=void 0,_this3.showValue=void 0,_this3.select=void 0,_this3.filter=_this3.filter.bind((0,assertThisInitialized.Z)(_this3)),_this3.getValue=_this3.getValue.bind((0,assertThisInitialized.Z)(_this3)),_this3.onChange=_this3.onChange.bind((0,assertThisInitialized.Z)(_this3)),_this3.state={value:2100},_this3.range=null,_this3.showValue=null,_this3.select=null,_this3}return(0,createClass.Z)(AdvancePriceFilter,[{key:"onChange",value:function onChange(e){this.setState({value:parseInt(e.target.value,10)})}},{key:"getValue",value:function getValue(){return this.range?parseInt(this.range.value,10):0}},{key:"filter",value:function filter(){this.select&&this.props.onFilter({number:this.getValue(),comparator:this.select.value})}},{key:"render",value:function render(){var _this4=this;return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("input",{ref:function ref(node){return _this4.range=node},type:"range",min:"2100",max:"2110",onChange:this.onChange},"range"),(0,jsx_runtime.jsx)("p",{ref:function ref(node){return _this4.showValue=node},style:{textAlign:"center"},children:this.state.value},"show"),(0,jsx_runtime.jsxs)("select",{ref:function ref(node){return _this4.select=node},className:"form-control",children:[(0,jsx_runtime.jsx)("option",{value:lib.GT,children:">"}),(0,jsx_runtime.jsx)("option",{value:lib.EQ,children:"="}),(0,jsx_runtime.jsx)("option",{value:lib.LT,children:"<"})]},"select"),(0,jsx_runtime.jsx)("button",{className:"btn btn-warning",onClick:this.filter,children:"Filter ".concat(this.props.column.text)},"submit")]})}}]),AdvancePriceFilter}(react.Component),AdvanceCustomFilter={name:"Advance custom filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",filter:(0,lib.customFilter)({type:lib.FILTER_TYPES.NUMBER}),filterRenderer:function filterRenderer(onFilter,column){return(0,jsx_runtime.jsx)(AdvancePriceFilter,{onFilter,column})}}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, customFilter, Comparator, FILTER_TYPES } from 'react-bootstrap-table-nextgen-filter';\n\n    class PriceFilter extends React.Component {\n      static propTypes = {\n        column: PropTypes.object.isRequired,\n        onFilter: PropTypes.func.isRequired\n      }\n      constructor(props) {\n        super(props);\n        this.filter = this.filter.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.state = { value: 2100 };\n      }\n      onChange(e) {\n        this.setState({ value: e.target.value });\n      }\n      getValue() {\n        return parseInt(this.range.value, 10);\n      }\n      filter() {\n        this.props.onFilter({\n          number: this.getValue(),\n          comparator: this.select.value\n        });\n      }\n      render() {\n        return [\n          <input\n            key=\"range\"\n            ref={ node => this.range = node }\n            type=\"range\"\n            min=\"2100\"\n            max=\"2110\"\n            onChange={ this.onChange }\n          />,\n          <p\n            key=\"show\"\n            ref={ node => this.showValue = node }\n            style={ { textAlign: 'center' } }\n          >\n            { this.state.value }\n          </p>,\n          <select\n            key=\"select\"\n            ref={ node => this.select = node }\n            className=\"form-control\"\n          >\n            <option value={ Comparator.GT }>&gt;</option>\n            <option value={ Comparator.EQ }>=</option>\n            <option value={ Comparator.LT }>&lt;</option>\n          </select>,\n          <button\n            key=\"submit\"\n            className=\"btn btn-warning\"\n            onClick={ this.filter }\n          >\n            { `Filter ${this.props.column.text}` }\n          </button>\n        ];\n      }\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: customFilter({\n        type: FILTER_TYPES.NUMBER // ask react-bootstrap-table to filter data as number\n      }),\n      filterRenderer: (onFilter, column) =>\n        <PriceFilter onFilter={ onFilter } column={ column } />\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)()}},selectFilterOptions=[{value:0,label:"good"},{value:1,label:"Bad"},{value:2,label:"unknown"}],PreservedOptionOrderOnSelectFilter={name:"Preserved option order on select filter",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name"},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){var foundOption=selectFilterOptions.find((function(opt){return opt.value===cell}));return foundOption?foundOption.label:""},filter:(0,lib.selectFilter)({options:selectFilterOptions})}],data:(0,common.qB)(6),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = [\n      { value: 0, label: 'good' },\n      { value: 1, label: 'Bad' },\n      { value: 2, label: 'unknown' }\n    ];\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions.find(opt => opt.value === cell).label,\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    ",filter:(0,lib.default)(),header:(0,jsx_runtime.jsxs)("h3",{children:[(0,jsx_runtime.jsx)("code",{children:"selectFilter.options"})," accept an Array and we keep that order when rendering the options"]})}},ClearAllFilters={name:"Clear all filters",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)({getFilter:function getFilter(filter){clearNameFilter=filter},onFilter:function onFilter(filterVal){return console.log("Filter product name ".concat(filterVal))}})},{dataField:"quality",text:"Product Quailty",formatter:function formatter(cell){return selectOptions[cell]},filter:(0,lib.selectFilter)({options:selectOptions,getFilter:function getFilter(filter){clearQualityFilter=filter},onFilter:function onFilter(filterVal){return console.log("Filter quality ".concat(filterVal))}})},{dataField:"price",text:"Price",filter:(0,lib.textFilter)({getFilter:function getFilter(filter){clearPriceFilter=filter},onFilter:function onFilter(filterVal){return console.log("Filter Price: ".concat(filterVal))}})},{dataField:"inStockDate",text:"InStock Date",formatter:function formatter(cell){return cell.toString()},filter:(0,lib.dateFilter)({getFilter:function getFilter(filter){clearStockDateFilter=filter},onFilter:function onFilter(filterVal){return console.log("Filter date: ".concat(filterVal))}})}],data:(0,common.tO)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let nameFilter;\n    let priceFilter;\n    let stockDateFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        getFilter: (filter) => {\n          nameFilter = filter;\n        }\n      })\n    }, {\n      dataField: 'price',\n      text: 'Price',\n      filter: textFilter({\n        getFilter: (filter) => {\n          priceFilter = filter;\n        }\n      })\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      formatter: cell => cell.toString(),\n      filter: dateFilter({\n        getFilter: (filter) => {\n          stockDateFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      nameFilter('');\n      priceFilter('');\n      stockDateFilter();\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> Clear all filters </button>\n        <BootstrapTable\n          keyField=\"id\"\n          data={ products }\n          columns={ columns }\n          filter={ filterFactory() }\n        />\n      </div>\n    );\n    ",filter:(0,lib.default)(),header:(0,jsx_runtime.jsx)("button",{className:"btn btn-lg btn-primary",onClick:function handleAllFiltersClick(){clearNameFilter(""),clearQualityFilter(""),clearPriceFilter(""),clearStockDateFilter()},children:" Clear all filters "})}};function afterFilter(newResult,newFilters){console.log(newResult),console.log(newFilters)}var FilterHooks={name:"Filter hooks",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",filter:(0,lib.textFilter)({onFilter:function onFilter(filterVal){return console.log("Filter Value: ".concat(filterVal))}})}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        onFilter: filterVal => console.log(`Filter Value: ${filterVal}`)\n      })\n    }];\n\n    function afterFilter(newResult, newFilters) {\n      console.log(newResult);\n      console.log(newFilters);\n    }\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory({ afterFilter }) } />\n    ",filter:(0,lib.default)({afterFilter})}},ImplementCustomFilterLogic={name:"Implement custom filter logic",args:{columns:[{dataField:"id",text:"Product ID"},{dataField:"name",text:"Product Name",filter:(0,lib.textFilter)()},{dataField:"price",text:"Product Price",filter:(0,lib.textFilter)({onFilter:function filterByPrice(filterVal,data){return filterVal?data.filter((function(product){return product.price===filterVal})):data}})}],data:(0,common.bG)(8),sourceCode:"    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    class Table extends React.Component {\n      filterByPrice = (filterVal, data) => {\n        if (filterVal) {\n          return data.filter(product => product.price == filterVal);\n        }\n        return data;\n      }\n\n      render() {\n        const columns = [{\n          dataField: 'id',\n          text: 'Product ID'\n        }, {\n          dataField: 'name',\n          text: 'Product Name',\n          filter: textFilter()\n        }, {\n          dataField: 'price',\n          text: 'Product Price',\n          filter: textFilter({\n            onFilter: this.filterByPrice\n          })\n        }];\n\n        return (\n          <div>\n            <BootstrapTable\n              keyField=\"id\"\n              data={ products }\n              columns={ columns }\n              filter={ filterFactory() }\n            />\n          </div>\n        );\n      }\n    }\n    ",filter:(0,lib.default)({afterFilter}),header:(0,jsx_runtime.jsx)("h2",{children:"Implement a eq price filter"})}};TextFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TextFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_TextFilter$parameter=TextFilter.parameters)||void 0===_TextFilter$parameter?void 0:_TextFilter$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Text filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID',\n      footer: 'hello'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      footer: 'hello',\n      filter: textFilter({\n        id: 'identify'\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      footer: 'hello',\n      filter: textFilter()\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory(),\n    selectRow: {\n      mode: 'checkbox',\n      clickToSelect: true\n    }\n  }\n}"},null===(_TextFilter$parameter2=TextFilter.parameters)||void 0===_TextFilter$parameter2||null===(_TextFilter$parameter3=_TextFilter$parameter2.docs)||void 0===_TextFilter$parameter3?void 0:_TextFilter$parameter3.source)})}),TextFilterWithDefaultValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TextFilterWithDefaultValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_TextFilterWithDefaul=TextFilterWithDefaultValue.parameters)||void 0===_TextFilterWithDefaul?void 0:_TextFilterWithDefaul.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Text filter with default value\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        defaultValue: '2103'\n      })\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        defaultValue: '2103'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_TextFilterWithDefaul2=TextFilterWithDefaultValue.parameters)||void 0===_TextFilterWithDefaul2||null===(_TextFilterWithDefaul3=_TextFilterWithDefaul2.docs)||void 0===_TextFilterWithDefaul3?void 0:_TextFilterWithDefaul3.source)})}),TextFilterWithComparator.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TextFilterWithComparator.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_TextFilterWithCompar=TextFilterWithComparator.parameters)||void 0===_TextFilterWithCompar?void 0:_TextFilterWithCompar.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Text filter with comparator\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        comparator: EQ // default is Comparator.LIKE\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        comparator: Comparator.EQ\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_TextFilterWithCompar2=TextFilterWithComparator.parameters)||void 0===_TextFilterWithCompar2||null===(_TextFilterWithCompar3=_TextFilterWithCompar2.docs)||void 0===_TextFilterWithCompar3?void 0:_TextFilterWithCompar3.source)})}),TextFilterWithCaseSensitive.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TextFilterWithCaseSensitive.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_TextFilterWithCaseSe=TextFilterWithCaseSensitive.parameters)||void 0===_TextFilterWithCaseSe?void 0:_TextFilterWithCaseSe.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Text filter with case sensitive\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        caseSensitive: true\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({ caseSensitive: true })\n    }, {\n      dataField: 'price',\n      text: 'Product Price'\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_TextFilterWithCaseSe2=TextFilterWithCaseSensitive.parameters)||void 0===_TextFilterWithCaseSe2||null===(_TextFilterWithCaseSe3=_TextFilterWithCaseSe2.docs)||void 0===_TextFilterWithCaseSe3?void 0:_TextFilterWithCaseSe3.source)})}),SelectFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SelectFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SelectFilter$paramet=SelectFilter.parameters)||void 0===_SelectFilter$paramet?void 0:_SelectFilter$paramet.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Select filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }],\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_SelectFilter$paramet2=SelectFilter.parameters)||void 0===_SelectFilter$paramet2||null===(_SelectFilter$paramet3=_SelectFilter$paramet2.docs)||void 0===_SelectFilter$paramet3?void 0:_SelectFilter$paramet3.source)})}),ConfigureSelectFilterOptions.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ConfigureSelectFilterOptions.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ConfigureSelectFilte=ConfigureSelectFilterOptions.parameters)||void 0===_ConfigureSelectFilte?void 0:_ConfigureSelectFilte.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Configure select filter options\",\n  args: {\n    mode: \"options\",\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    // Object map options\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    // Array options\n    const selectOptionsArr = [{\n      value: 0,\n      label: 'good'\n    }, {\n      value: 1,\n      label: 'Bad'\n    }, {\n      value: 2,\n      label: 'unknown'\n    }];\n\n    const columns1 = [..., {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }];\n    <BootstrapTable keyField='id' data={ products } columns={ columns1 } filter={ filterFactory() } />\n\n    const columns2 = [..., {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptionsArr.filter(opt => opt.value === cell)[0].label || '',\n      filter: selectFilter({\n        options: selectOptionsArr\n      })\n    }];\n    <BootstrapTable keyField='id' data={ products } columns={ columns2 } filter={ filterFactory() } />\n\n    const columns3 = [..., {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptionsArr.filter(opt => opt.value === cell)[0].label || '',\n      filter: selectFilter({\n        options: () => selectOptionsArr\n      })\n    }];\n    <BootstrapTable keyField='id' data={ products } columns={ columns3 } filter={ filterFactory() } />\n    `,\n    filter: filterFactory(),\n    columns1: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }],\n    columns2: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptionsArr.filter(opt => opt.value === cell)[0].label || '',\n      filter: selectFilter({\n        options: selectOptionsArr\n      })\n    }],\n    columns3: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptionsArr.filter(opt => opt.value === cell)[0].label || '',\n      filter: selectFilter({\n        options: () => selectOptionsArr\n      })\n    }]\n  }\n}"},null===(_ConfigureSelectFilte2=ConfigureSelectFilterOptions.parameters)||void 0===_ConfigureSelectFilte2||null===(_ConfigureSelectFilte3=_ConfigureSelectFilte2.docs)||void 0===_ConfigureSelectFilte3?void 0:_ConfigureSelectFilte3.source)})}),SelectFilterWithDefaultValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SelectFilterWithDefaultValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SelectFilterWithDefa=SelectFilterWithDefaultValue.parameters)||void 0===_SelectFilterWithDefa?void 0:_SelectFilterWithDefa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Select filter with default value\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        defaultValue: 2\n      })\n    }],\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        defaultValue: 2\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_SelectFilterWithDefa2=SelectFilterWithDefaultValue.parameters)||void 0===_SelectFilterWithDefa2||null===(_SelectFilterWithDefa3=_SelectFilterWithDefa2.docs)||void 0===_SelectFilterWithDefa3?void 0:_SelectFilterWithDefa3.source)})}),SelectFilterWithComparator.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},SelectFilterWithComparator.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_SelectFilterWithComp=SelectFilterWithComparator.parameters)||void 0===_SelectFilterWithComp?void 0:_SelectFilterWithComp.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Select filter with comparator\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: selectFilter({\n        options: {\n          '03': '03',\n          '04': '04',\n          '01': '01'\n        },\n        comparator: LIKE // default is Comparator.EQ\n      })\n    }],\n\n    data: productsGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      '03': '03',\n      '04': '04',\n      '01': '01'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: selectFilter({\n        options: selectOptions,\n        comparator: Comparator.LIKE // default is Comparator.EQ\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_SelectFilterWithComp2=SelectFilterWithComparator.parameters)||void 0===_SelectFilterWithComp2||null===(_SelectFilterWithComp3=_SelectFilterWithComp2.docs)||void 0===_SelectFilterWithComp3?void 0:_SelectFilterWithComp3.source)})}),MultiSelectFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},MultiSelectFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_MultiSelectFilter$pa=MultiSelectFilter.parameters)||void 0===_MultiSelectFilter$pa?void 0:_MultiSelectFilter$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"MultiSelect filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions\n      })\n    }],\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_MultiSelectFilter$pa2=MultiSelectFilter.parameters)||void 0===_MultiSelectFilter$pa2||null===(_MultiSelectFilter$pa3=_MultiSelectFilter$pa2.docs)||void 0===_MultiSelectFilter$pa3?void 0:_MultiSelectFilter$pa3.source)})}),MultiSelectFilterWithDefaultValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},MultiSelectFilterWithDefaultValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_MultiSelectFilterWit=MultiSelectFilterWithDefaultValue.parameters)||void 0===_MultiSelectFilterWit?void 0:_MultiSelectFilterWit.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"MultiSelect filter with default value\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        defaultValue: [0, 2]\n      })\n    }],\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        defaultValue: [0, 2]\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_MultiSelectFilterWit2=MultiSelectFilterWithDefaultValue.parameters)||void 0===_MultiSelectFilterWit2||null===(_MultiSelectFilterWit3=_MultiSelectFilterWit2.docs)||void 0===_MultiSelectFilterWit3?void 0:_MultiSelectFilterWit3.source)})}),NumberFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},NumberFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_NumberFilter$paramet=NumberFilter.parameters)||void 0===_NumberFilter$paramet?void 0:_NumberFilter$paramet.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Number filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter()\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter()\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_NumberFilter$paramet2=NumberFilter.parameters)||void 0===_NumberFilter$paramet2||null===(_NumberFilter$paramet3=_NumberFilter$paramet2.docs)||void 0===_NumberFilter$paramet3?void 0:_NumberFilter$paramet3.source)})}),NumberFilterWithDefaultValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},NumberFilterWithDefaultValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_NumberFilterWithDefa=NumberFilterWithDefaultValue.parameters)||void 0===_NumberFilterWithDefa?void 0:_NumberFilterWithDefa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Number filter with default value\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        defaultValue: {\n          number: 2103,\n          comparator: GT\n        }\n      })\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        defaultValue: { number: 2103, comparator: Comparator.GT }\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_NumberFilterWithDefa2=NumberFilterWithDefaultValue.parameters)||void 0===_NumberFilterWithDefa2||null===(_NumberFilterWithDefa3=_NumberFilterWithDefa2.docs)||void 0===_NumberFilterWithDefa3?void 0:_NumberFilterWithDefa3.source)})}),DateFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DateFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DateFilter$parameter=DateFilter.parameters)||void 0===_DateFilter$parameter?void 0:_DateFilter$parameter.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Date filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      formatter: (cell: any) => cell.toString(),\n      filter: dateFilter()\n    }],\n    data: stockGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter()\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      filter={ filterFactory() }\n    />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_DateFilter$parameter2=DateFilter.parameters)||void 0===_DateFilter$parameter2||null===(_DateFilter$parameter3=_DateFilter$parameter2.docs)||void 0===_DateFilter$parameter3?void 0:_DateFilter$parameter3.source)})}),DateFilterWithDefaultValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},DateFilterWithDefaultValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_DateFilterWithDefaul=DateFilterWithDefaultValue.parameters)||void 0===_DateFilterWithDefaul?void 0:_DateFilterWithDefaul.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Date filter with default value\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      formatter: (cell: any) => cell.toString(),\n      filter: dateFilter({\n        defaultValue: {\n          date: new Date(2018, 0, 1),\n          comparator: GT\n        }\n      })\n    }],\n    data: stockGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter({\n        defaultValue: { date: new Date(2018, 0, 1), comparator: Comparator.GT }\n      })\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      filter={ filterFactory() }\n    />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_DateFilterWithDefaul2=DateFilterWithDefaultValue.parameters)||void 0===_DateFilterWithDefaul2||null===(_DateFilterWithDefaul3=_DateFilterWithDefaul2.docs)||void 0===_DateFilterWithDefaul3?void 0:_DateFilterWithDefaul3.source)})}),FilterPosition.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},FilterPosition.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_FilterPosition$param=FilterPosition.parameters)||void 0===_FilterPosition$param?void 0:_FilterPosition$param.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Filter position\",\n  args: {\n    mode: \"position\",\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }],\n    data: productsGenerator(8),\n    sourceCode1: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      filter={ filterFactory() }\n      filterPosition=\"top\"\n    />\n    `,\n    sourceCode2: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID',\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    <BootstrapTable\n      keyField='id'\n      data={ products }\n      columns={ columns }\n      filter={ filterFactory() }\n      filterPosition=\"bottom\"\n    />\n    `,\n    filter: filterFactory(),\n    selectRow: {\n      mode: 'checkbox',\n      clickToSelect: true\n    },\n    expandRow: {\n      renderer: (row: any) => <div>\n          <p>{`This Expand row is belong to rowKey ${row.id}`}</p>\n          <p>You can render anything here, also you can add additional data on every row object</p>\n          <p>expandRow.renderer callback will pass the origin row object to you</p>\n        </div>,\n      showExpandColumn: true,\n      expandColumnPosition: 'right'\n    }\n  }\n}"},null===(_FilterPosition$param2=FilterPosition.parameters)||void 0===_FilterPosition$param2||null===(_FilterPosition$param3=_FilterPosition$param2.docs)||void 0===_FilterPosition$param3?void 0:_FilterPosition$param3.source)})}),CustomTextFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomTextFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomTextFilter$par=CustomTextFilter.parameters)||void 0===_CustomTextFilter$par?void 0:_CustomTextFilter$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom text filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        delay: 1000,\n        // default is 500ms\n        style: {\n          backgroundColor: 'yellow'\n        },\n        className: 'test-classname',\n        placeholder: 'Custom PlaceHolder',\n        onClick: e => console.log(e)\n      })\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        delay: 1000, // default is 500ms\n        style: {\n          backgroundColor: 'yellow'\n        },\n        className: 'test-classname',\n        placeholder: 'Custom PlaceHolder',\n        onClick: e => console.log(e)\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_CustomTextFilter$par2=CustomTextFilter.parameters)||void 0===_CustomTextFilter$par2||null===(_CustomTextFilter$par3=_CustomTextFilter$par2.docs)||void 0===_CustomTextFilter$par3?void 0:_CustomTextFilter$par3.source)})}),CustomSelectFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomSelectFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomSelectFilter$p=CustomSelectFilter.parameters)||void 0===_CustomSelectFilter$p?void 0:_CustomSelectFilter$p.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom select filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        withoutEmptyOption: true,\n        style: {\n          backgroundColor: 'pink'\n        },\n        className: 'test-classname'\n        // datamycustomattr: 'datamycustomattr'\n      })\n    }],\n\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        withoutEmptyOption: true,\n        style: {\n          backgroundColor: 'pink'\n        },\n        className: 'test-classname',\n        datamycustomattr: 'datamycustomattr'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_CustomSelectFilter$p2=CustomSelectFilter.parameters)||void 0===_CustomSelectFilter$p2||null===(_CustomSelectFilter$p3=_CustomSelectFilter$p2.docs)||void 0===_CustomSelectFilter$p3?void 0:_CustomSelectFilter$p3.source)})}),CustomNumberFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomNumberFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomNumberFilter$p=CustomNumberFilter.parameters)||void 0===_CustomNumberFilter$p?void 0:_CustomNumberFilter$p.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom number filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        options: [2100, 2103, 2105],\n        delay: 600,\n        placeholder: 'custom placeholder',\n        withoutEmptyComparatorOption: true,\n        comparators: [EQ, GT, LT],\n        style: {\n          display: 'inline-grid'\n        },\n        className: 'custom-numberfilter-class',\n        comparatorStyle: {\n          backgroundColor: 'antiquewhite'\n        },\n        comparatorClassName: 'custom-comparator-class',\n        numberStyle: {\n          backgroundColor: 'cadetblue',\n          margin: '0px'\n        },\n        numberClassName: 'custom-number-class'\n      })\n    }],\n    data: productsGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        options: [2100, 2103, 2105],\n        delay: 600,\n        placeholder: 'custom placeholder',\n        withoutEmptyComparatorOption: true,\n        comparators: [Comparator.EQ, Comparator.GT, Comparator.LT],\n        style: { display: 'inline-grid' },\n        className: 'custom-numberfilter-class',\n        comparatorStyle: { backgroundColor: 'antiquewhite' },\n        comparatorClassName: 'custom-comparator-class',\n        numberStyle: { backgroundColor: 'cadetblue', margin: '0px' },\n        numberClassName: 'custom-number-class'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_CustomNumberFilter$p2=CustomNumberFilter.parameters)||void 0===_CustomNumberFilter$p2||null===(_CustomNumberFilter$p3=_CustomNumberFilter$p2.docs)||void 0===_CustomNumberFilter$p3?void 0:_CustomNumberFilter$p3.source)})}),CustomDateFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomDateFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomDateFilter$par=CustomDateFilter.parameters)||void 0===_CustomDateFilter$par?void 0:_CustomDateFilter$par.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom date filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      formatter: (cell: any) => cell.toString(),\n      filter: dateFilter({\n        delay: 400,\n        placeholder: 'custom placeholder',\n        withoutEmptyComparatorOption: true,\n        comparators: [EQ, GT, LT],\n        style: {\n          display: 'inline-grid'\n        },\n        className: 'custom-datefilter-class',\n        comparatorStyle: {\n          backgroundColor: 'antiquewhite'\n        },\n        comparatorClassName: 'custom-comparator-class',\n        dateStyle: {\n          backgroundColor: 'cadetblue',\n          margin: '0px'\n        },\n        dateClassName: 'custom-date-class'\n      })\n    }],\n    data: stockGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter({\n        delay: 400,\n        placeholder: 'custom placeholder',\n        withoutEmptyComparatorOption: true,\n        comparators: [Comparator.EQ, Comparator.GT, Comparator.LT],\n        style: { display: 'inline-grid' },\n        className: 'custom-datefilter-class',\n        comparatorStyle: { backgroundColor: 'antiquewhite' },\n        comparatorClassName: 'custom-comparator-class',\n        dateStyle: { backgroundColor: 'cadetblue', margin: '0px' },\n        dateClassName: 'custom-date-class'\n      })\n    }];\n\n    <BootstrapTable\n      keyField=\"id\"\n      data={ stocks }\n      columns={ columns }\n      filter={ filterFactory() }\n    />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_CustomDateFilter$par2=CustomDateFilter.parameters)||void 0===_CustomDateFilter$par2||null===(_CustomDateFilter$par3=_CustomDateFilter$par2.docs)||void 0===_CustomDateFilter$par3?void 0:_CustomDateFilter$par3.source)})}),CustomMultiSelectFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomMultiSelectFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomMultiSelectFil=CustomMultiSelectFilter.parameters)||void 0===_CustomMultiSelectFil?void 0:_CustomMultiSelectFil.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom multi select filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: any) => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        withoutEmptyOption: true,\n        style: {\n          backgroundColor: 'pink'\n        },\n        className: 'test-classname'\n        // datamycustomattr: 'datamycustomattr'\n      })\n    }],\n\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        withoutEmptyOption: true,\n        style: {\n          backgroundColor: 'pink'\n        },\n        className: 'test-classname',\n        datamycustomattr: 'datamycustomattr'\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_CustomMultiSelectFil2=CustomMultiSelectFilter.parameters)||void 0===_CustomMultiSelectFil2||null===(_CustomMultiSelectFil3=_CustomMultiSelectFil2.docs)||void 0===_CustomMultiSelectFil3?void 0:_CustomMultiSelectFil3.source)})}),CustomFilterValue.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomFilterValue.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomFilterValue$pa=CustomFilterValue.parameters)||void 0===_CustomFilterValue$pa?void 0:_CustomFilterValue$pa.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom filter value\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name',\n      filter: textFilter()\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner',\n      filter: textFilter(),\n      formatter: (cell: number, row: any) => owners[cell],\n      filterValue: (cell: number, row: any) => owners[cell]\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      filter: textFilter(),\n      formatter: (cell: number, row: any) => types[cell],\n      filterValue: (cell: number, row: any) => types[cell]\n    }],\n    data: jobsGenerator1(5),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const owners = ['Allen', 'Bob', 'Cat'];\n    const types = ['Cloud Service', 'Message Service', 'Add Service', 'Edit Service', 'Money'];\n    const columns = [{\n      dataField: 'id',\n      text: 'Job ID'\n    }, {\n      dataField: 'name',\n      text: 'Job Name',\n      filter: textFilter()\n    }, {\n      dataField: 'owner',\n      text: 'Job Owner',\n      filter: textFilter(),\n      formatter: (cell, row) => owners[cell],\n      filterValue: (cell, row) => owners[cell]\n    }, {\n      dataField: 'type',\n      text: 'Job Type',\n      filter: textFilter(),\n      filterValue: (cell, row) => types[cell]\n    }];\n\n    // shape of job: { id: 0, name: 'Job name 0', owner: 1, type: 3 }\n\n    <BootstrapTable keyField='id' data={ jobs } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_CustomFilterValue$pa2=CustomFilterValue.parameters)||void 0===_CustomFilterValue$pa2||null===(_CustomFilterValue$pa3=_CustomFilterValue$pa2.docs)||void 0===_CustomFilterValue$pa3?void 0:_CustomFilterValue$pa3.source)})}),ProgrammaticallyTextFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ProgrammaticallyTextFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ProgrammaticallyText=ProgrammaticallyTextFilter.parameters)||void 0===_ProgrammaticallyText?void 0:_ProgrammaticallyText.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Programmatically text filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        getFilter: filter => {\n          // nameFilter was assigned once the component has been mounted.\n          nameFilter = filter;\n        }\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let nameFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        getFilter: (filter) => {\n          // nameFilter was assigned once the component has been mounted.\n          nameFilter = filter;\n        }\n      })\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter()\n    }];\n\n    const handleClick = () => {\n      nameFilter(0);\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> filter columns by 0 </button>\n\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    `,\n    filter: filterFactory(),\n    header: <button className=\"btn btn-lg btn-primary\" onClick={handleNameFilterClick}> filter columns by 0 </button>\n  }\n}"},null===(_ProgrammaticallyText2=ProgrammaticallyTextFilter.parameters)||void 0===_ProgrammaticallyText2||null===(_ProgrammaticallyText3=_ProgrammaticallyText2.docs)||void 0===_ProgrammaticallyText3?void 0:_ProgrammaticallyText3.source)})}),ProgrammaticallySelectFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ProgrammaticallySelectFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ProgrammaticallySele=ProgrammaticallySelectFilter.parameters)||void 0===_ProgrammaticallySele?void 0:_ProgrammaticallySele.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Programmatically select filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      formatter: (cell: any) => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        getFilter: filter => {\n          // qualityFilter was assigned once the component has been mounted.\n          qualityFilter = filter;\n        }\n      })\n    }],\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let qualityFilter;\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      formatter: cell => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        getFilter: (filter) => {\n          // qualityFilter was assigned once the component has been mounted.\n          qualityFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      qualityFilter(0);\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }>{' filter columns by option \"good\" '}</button>\n\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    `,\n    filter: filterFactory(),\n    header: <button className=\"btn btn-lg btn-primary\" onClick={handleQualityFilterClick}>{' filter columns by option \"good\" '}</button>\n  }\n}"},null===(_ProgrammaticallySele2=ProgrammaticallySelectFilter.parameters)||void 0===_ProgrammaticallySele2||null===(_ProgrammaticallySele3=_ProgrammaticallySele2.docs)||void 0===_ProgrammaticallySele3?void 0:_ProgrammaticallySele3.source)})}),ProgrammaticallyNumberFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ProgrammaticallyNumberFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ProgrammaticallyNumb=ProgrammaticallyNumberFilter.parameters)||void 0===_ProgrammaticallyNumb?void 0:_ProgrammaticallyNumb.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Programmatically number filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        getFilter: filter => {\n          // pricerFilter was assigned once the component has been mounted.\n          priceFilter = filter;\n        }\n      })\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { numberFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let priceFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: numberFilter({\n        getFilter: (filter) => {\n          // pricerFilter was assigned once the component has been mounted.\n          priceFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      priceFilter({\n        number: 2103,\n        comparator: Comparator.GT\n      });\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> filter all columns which is greater than 2103 </button>\n\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    `,\n    filter: filterFactory(),\n    header: <button className=\"btn btn-lg btn-primary\" onClick={handlePriceFilterClick}> filter all columns which is greater than 2103 </button>\n  }\n}"},null===(_ProgrammaticallyNumb2=ProgrammaticallyNumberFilter.parameters)||void 0===_ProgrammaticallyNumb2||null===(_ProgrammaticallyNumb3=_ProgrammaticallyNumb2.docs)||void 0===_ProgrammaticallyNumb3?void 0:_ProgrammaticallyNumb3.source)})}),ProgrammaticallyDateFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ProgrammaticallyDateFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ProgrammaticallyDate=ProgrammaticallyDateFilter.parameters)||void 0===_ProgrammaticallyDate?void 0:_ProgrammaticallyDate.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Programmatically date filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      formatter: (cell: any) => cell.toString(),\n      filter: dateFilter({\n        getFilter: filter => {\n          // inStockDateFilter was assigned once the component has been mounted.\n          inStockDateFilter = filter;\n        }\n      })\n    }],\n    data: stockGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { dateFilter, Comparator } from 'react-bootstrap-table-nextgen-filter';\n\n    let inStockDateFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      filter: dateFilter({\n        getFilter: (filter) => {\n          // inStockDateFilter was assigned once the component has been mounted.\n          inStockDateFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      inStockDateFilter({\n        date: new Date(2018, 0, 1),\n        comparator: Comparator.GT\n      });\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> filter InStock Date columns which is greater than 2018.01.01 </button>\n\n        <BootstrapTable keyField='id' data={ stocks } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    `,\n    filter: filterFactory(),\n    header: <button className=\"btn btn-lg btn-primary\" onClick={handleDateFilterClick}> filter InStock Date columns which is greater than 2018.01.01 </button>\n  }\n}"},null===(_ProgrammaticallyDate2=ProgrammaticallyDateFilter.parameters)||void 0===_ProgrammaticallyDate2||null===(_ProgrammaticallyDate3=_ProgrammaticallyDate2.docs)||void 0===_ProgrammaticallyDate3?void 0:_ProgrammaticallyDate3.source)})}),ProgrammaticallyMultiSelectFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ProgrammaticallyMultiSelectFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ProgrammaticallyMult=ProgrammaticallyMultiSelectFilter.parameters)||void 0===_ProgrammaticallyMult?void 0:_ProgrammaticallyMult.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Programmatically multi select filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        getFilter: filter => {\n          // qualityMultiSelectFilter was assigned once the component has been mounted.\n          qualityMultiSelectFilter = filter;\n        }\n      })\n    }],\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { multiSelectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let qualityFilter;\n\n    const selectOptions = {\n      0: 'good',\n      1: 'Bad',\n      2: 'unknown'\n    };\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quality',\n      formatter: cell => selectOptions[cell],\n      filter: multiSelectFilter({\n        options: selectOptions,\n        getFilter: (filter) => {\n          // qualityFilter was assigned once the component has been mounted.\n          qualityFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      qualityFilter([0, 2]);\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }>{' filter columns by option \"good\" and \"unknow\" '}</button>\n        <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n      </div>\n    );\n    `,\n    filter: filterFactory(),\n    header: <button className=\"btn btn-lg btn-primary\" onClick={handleQualityMultiSelectFilterClick}>{' filter columns by option \"good\" and \"unknow\" '}</button>\n  }\n}"},null===(_ProgrammaticallyMult2=ProgrammaticallyMultiSelectFilter.parameters)||void 0===_ProgrammaticallyMult2||null===(_ProgrammaticallyMult3=_ProgrammaticallyMult2.docs)||void 0===_ProgrammaticallyMult3?void 0:_ProgrammaticallyMult3.source)})}),CustomFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},CustomFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_CustomFilter$paramet=CustomFilter.parameters)||void 0===_CustomFilter$paramet?void 0:_CustomFilter$paramet.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Custom filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: customFilter(),\n      filterRenderer: (onFilter: any, column: any) => <PriceFilter onFilter={onFilter} column={column} />\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, customFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    class PriceFilter extends React.Component {\n      static propTypes = {\n        column: PropTypes.object.isRequired,\n        onFilter: PropTypes.func.isRequired\n      }\n      constructor(props) {\n        super(props);\n        this.filter = this.filter.bind(this);\n        this.getValue = this.getValue.bind(this);\n      }\n      getValue() {\n        return this.input.value;\n      }\n      filter() {\n        this.props.onFilter(this.getValue());\n      }\n      render() {\n        return [\n          <input\n            key=\"input\"\n            ref={ node => this.input = node }\n            type=\"text\"\n            placeholder=\"Input price\"\n          />,\n          <button\n            key=\"submit\"\n            className=\"btn btn-warning\"\n            onClick={ this.filter }\n          >\n            { \\`Filter $\\{this.props.column.text}\\` }\n          </button>\n        ];\n      }\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: customFilter(),\n      filterRenderer: (onFilter, column) =>\n        <PriceFilter onFilter={ onFilter } column={ column } />\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_CustomFilter$paramet2=CustomFilter.parameters)||void 0===_CustomFilter$paramet2||null===(_CustomFilter$paramet3=_CustomFilter$paramet2.docs)||void 0===_CustomFilter$paramet3?void 0:_CustomFilter$paramet3.source)})}),AdvanceCustomFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},AdvanceCustomFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_AdvanceCustomFilter$=AdvanceCustomFilter.parameters)||void 0===_AdvanceCustomFilter$?void 0:_AdvanceCustomFilter$.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Advance custom filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: customFilter({\n        type: FILTER_TYPES.NUMBER // ask react-bootstrap-table to filter data as number\n      }),\n\n      filterRenderer: (onFilter, column) => <AdvancePriceFilter onFilter={onFilter} column={column} />\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, customFilter, Comparator, FILTER_TYPES } from 'react-bootstrap-table-nextgen-filter';\n\n    class PriceFilter extends React.Component {\n      static propTypes = {\n        column: PropTypes.object.isRequired,\n        onFilter: PropTypes.func.isRequired\n      }\n      constructor(props) {\n        super(props);\n        this.filter = this.filter.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.state = { value: 2100 };\n      }\n      onChange(e) {\n        this.setState({ value: e.target.value });\n      }\n      getValue() {\n        return parseInt(this.range.value, 10);\n      }\n      filter() {\n        this.props.onFilter({\n          number: this.getValue(),\n          comparator: this.select.value\n        });\n      }\n      render() {\n        return [\n          <input\n            key=\"range\"\n            ref={ node => this.range = node }\n            type=\"range\"\n            min=\"2100\"\n            max=\"2110\"\n            onChange={ this.onChange }\n          />,\n          <p\n            key=\"show\"\n            ref={ node => this.showValue = node }\n            style={ { textAlign: 'center' } }\n          >\n            { this.state.value }\n          </p>,\n          <select\n            key=\"select\"\n            ref={ node => this.select = node }\n            className=\"form-control\"\n          >\n            <option value={ Comparator.GT }>&gt;</option>\n            <option value={ Comparator.EQ }>=</option>\n            <option value={ Comparator.LT }>&lt;</option>\n          </select>,\n          <button\n            key=\"submit\"\n            className=\"btn btn-warning\"\n            onClick={ this.filter }\n          >\n            { \\`Filter $\\{this.props.column.text}\\` }\n          </button>\n        ];\n      }\n    }\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: customFilter({\n        type: FILTER_TYPES.NUMBER // ask react-bootstrap-table to filter data as number\n      }),\n      filterRenderer: (onFilter, column) =>\n        <PriceFilter onFilter={ onFilter } column={ column } />\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory()\n  }\n}"},null===(_AdvanceCustomFilter$2=AdvanceCustomFilter.parameters)||void 0===_AdvanceCustomFilter$2||null===(_AdvanceCustomFilter$3=_AdvanceCustomFilter$2.docs)||void 0===_AdvanceCustomFilter$3?void 0:_AdvanceCustomFilter$3.source)})}),PreservedOptionOrderOnSelectFilter.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},PreservedOptionOrderOnSelectFilter.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_PreservedOptionOrder=PreservedOptionOrderOnSelectFilter.parameters)||void 0===_PreservedOptionOrder?void 0:_PreservedOptionOrder.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Preserved option order on select filter\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: any) => {\n        const foundOption = selectFilterOptions.find((opt: any) => opt.value === cell);\n        return foundOption ? foundOption.label : \"\";\n      },\n      filter: selectFilter({\n        options: selectFilterOptions\n      })\n    }],\n    data: productsQualityGenerator(6),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { selectFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const selectOptions = [\n      { value: 0, label: 'good' },\n      { value: 1, label: 'Bad' },\n      { value: 2, label: 'unknown' }\n    ];\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name'\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: cell => selectOptions.find(opt => opt.value === cell).label,\n      filter: selectFilter({\n        options: selectOptions\n      })\n    }];\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n    `,\n    filter: filterFactory(),\n    header: <h3><code>selectFilter.options</code> accept an Array and we keep that order when rendering the options</h3>\n  }\n}"},null===(_PreservedOptionOrder2=PreservedOptionOrderOnSelectFilter.parameters)||void 0===_PreservedOptionOrder2||null===(_PreservedOptionOrder3=_PreservedOptionOrder2.docs)||void 0===_PreservedOptionOrder3?void 0:_PreservedOptionOrder3.source)})}),ClearAllFilters.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ClearAllFilters.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ClearAllFilters$para=ClearAllFilters.parameters)||void 0===_ClearAllFilters$para?void 0:_ClearAllFilters$para.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Clear all filters\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        getFilter: filter => {\n          clearNameFilter = filter;\n        },\n        onFilter: filterVal => console.log(`Filter product name ${filterVal}`)\n      })\n    }, {\n      dataField: 'quality',\n      text: 'Product Quailty',\n      formatter: (cell: number) => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        getFilter: filter => {\n          clearQualityFilter = filter;\n        },\n        onFilter: filterVal => console.log(`Filter quality ${filterVal}`)\n      })\n    }, {\n      dataField: 'price',\n      text: 'Price',\n      filter: textFilter({\n        getFilter: filter => {\n          clearPriceFilter = filter;\n        },\n        onFilter: filterVal => console.log(`Filter Price: ${filterVal}`)\n      })\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      formatter: (cell: any) => cell.toString(),\n      filter: dateFilter({\n        getFilter: filter => {\n          clearStockDateFilter = filter;\n        },\n        onFilter: filterVal => console.log(`Filter date: ${filterVal}`)\n      })\n    }],\n    data: stockGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter, dateFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    let nameFilter;\n    let priceFilter;\n    let stockDateFilter;\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter({\n        getFilter: (filter) => {\n          nameFilter = filter;\n        }\n      })\n    }, {\n      dataField: 'price',\n      text: 'Price',\n      filter: textFilter({\n        getFilter: (filter) => {\n          priceFilter = filter;\n        }\n      })\n    }, {\n      dataField: 'inStockDate',\n      text: 'InStock Date',\n      formatter: cell => cell.toString(),\n      filter: dateFilter({\n        getFilter: (filter) => {\n          stockDateFilter = filter;\n        }\n      })\n    }];\n\n    const handleClick = () => {\n      nameFilter('');\n      priceFilter('');\n      stockDateFilter();\n    };\n\n    export default () => (\n      <div>\n        <button className=\"btn btn-lg btn-primary\" onClick={ handleClick }> Clear all filters </button>\n        <BootstrapTable\n          keyField=\"id\"\n          data={ products }\n          columns={ columns }\n          filter={ filterFactory() }\n        />\n      </div>\n    );\n    `,\n    filter: filterFactory(),\n    header: <button className=\"btn btn-lg btn-primary\" onClick={handleAllFiltersClick}> Clear all filters </button>\n  }\n}"},null===(_ClearAllFilters$para2=ClearAllFilters.parameters)||void 0===_ClearAllFilters$para2||null===(_ClearAllFilters$para3=_ClearAllFilters$para2.docs)||void 0===_ClearAllFilters$para3?void 0:_ClearAllFilters$para3.source)})}),FilterHooks.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},FilterHooks.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_FilterHooks$paramete=FilterHooks.parameters)||void 0===_FilterHooks$paramete?void 0:_FilterHooks$paramete.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Filter hooks\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        onFilter: filterVal => console.log(`Filter Value: ${filterVal}`)\n      })\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    const columns = [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        onFilter: filterVal => console.log(\\`Filter Value: $\\{filterVal}\\`)\n      })\n    }];\n\n    function afterFilter(newResult, newFilters) {\n      console.log(newResult);\n      console.log(newFilters);\n    }\n\n    <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory({ afterFilter }) } />\n    `,\n    filter: filterFactory({\n      afterFilter\n    })\n  }\n}"},null===(_FilterHooks$paramete2=FilterHooks.parameters)||void 0===_FilterHooks$paramete2||null===(_FilterHooks$paramete3=_FilterHooks$paramete2.docs)||void 0===_FilterHooks$paramete3?void 0:_FilterHooks$paramete3.source)})}),ImplementCustomFilterLogic.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},ImplementCustomFilterLogic.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_ImplementCustomFilte=ImplementCustomFilterLogic.parameters)||void 0===_ImplementCustomFilte?void 0:_ImplementCustomFilte.docs),{},{source:(0,objectSpread2.Z)({originalSource:"{\n  name: \"Implement custom filter logic\",\n  args: {\n    columns: [{\n      dataField: 'id',\n      text: 'Product ID'\n    }, {\n      dataField: 'name',\n      text: 'Product Name',\n      filter: textFilter()\n    }, {\n      dataField: 'price',\n      text: 'Product Price',\n      filter: textFilter({\n        onFilter: filterByPrice\n      })\n    }],\n    data: productsGenerator(8),\n    sourceCode: `\\\n    import BootstrapTable from 'react-bootstrap-table-nextgen';\n    import filterFactory, { textFilter } from 'react-bootstrap-table-nextgen-filter';\n\n    class Table extends React.Component {\n      filterByPrice = (filterVal, data) => {\n        if (filterVal) {\n          return data.filter(product => product.price == filterVal);\n        }\n        return data;\n      }\n\n      render() {\n        const columns = [{\n          dataField: 'id',\n          text: 'Product ID'\n        }, {\n          dataField: 'name',\n          text: 'Product Name',\n          filter: textFilter()\n        }, {\n          dataField: 'price',\n          text: 'Product Price',\n          filter: textFilter({\n            onFilter: this.filterByPrice\n          })\n        }];\n\n        return (\n          <div>\n            <BootstrapTable\n              keyField=\"id\"\n              data={ products }\n              columns={ columns }\n              filter={ filterFactory() }\n            />\n          </div>\n        );\n      }\n    }\n    `,\n    filter: filterFactory({\n      afterFilter\n    }),\n    header: <h2>Implement a eq price filter</h2>\n  }\n}"},null===(_ImplementCustomFilte2=ImplementCustomFilterLogic.parameters)||void 0===_ImplementCustomFilte2||null===(_ImplementCustomFilte3=_ImplementCustomFilte2.docs)||void 0===_ImplementCustomFilte3?void 0:_ImplementCustomFilte3.source)})});var __namedExportsOrder=["TextFilter","TextFilterWithDefaultValue","TextFilterWithComparator","TextFilterWithCaseSensitive","SelectFilter","ConfigureSelectFilterOptions","SelectFilterWithDefaultValue","SelectFilterWithComparator","MultiSelectFilter","MultiSelectFilterWithDefaultValue","NumberFilter","NumberFilterWithDefaultValue","DateFilter","DateFilterWithDefaultValue","FilterPosition","CustomTextFilter","CustomSelectFilter","CustomNumberFilter","CustomDateFilter","CustomMultiSelectFilter","CustomFilterValue","ProgrammaticallyTextFilter","ProgrammaticallySelectFilter","ProgrammaticallyNumberFilter","ProgrammaticallyDateFilter","ProgrammaticallyMultiSelectFilter","CustomFilter","AdvanceCustomFilter","PreservedOptionOrderOnSelectFilter","ClearAllFilters","FilterHooks","ImplementCustomFilterLogic"]}}]);